{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "bbaccsynapse"
		},
		"accinput_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'accinput'"
		},
		"accml_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'accml'"
		},
		"accml1_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'accml1'"
		},
		"accsqlsvr_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'accsqlsvr'"
		},
		"advenworkLT_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'advenworkLT'"
		},
		"bbaccsynapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'bbaccsynapse-WorkspaceDefaultSqlServer'"
		},
		"iiotdata_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'iiotdata'"
		},
		"serverlesssqlsvr_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'serverlesssqlsvr'"
		},
		"tpchinput_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'tpchinput'"
		},
		"Keyvaultacc_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://accvault1.vault.azure.net/"
		},
		"accinput_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://accbbstore.dfs.core.windows.net"
		},
		"accml_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "c46a9435-c957-4e6c-a0f4-b9a597984773"
		},
		"accml_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "accenture"
		},
		"accml_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "8a3ddafe-6dd6-48af-867e-d745232a1833"
		},
		"accml_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
		},
		"accml1_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "c46a9435-c957-4e6c-a0f4-b9a597984773"
		},
		"accml1_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "accenture"
		},
		"accml1_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "8a3ddafe-6dd6-48af-867e-d745232a1833"
		},
		"accml1_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
		},
		"accvault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://accvault1.vault.azure.net/"
		},
		"accvault1bb_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://accvault1.vault.azure.net/"
		},
		"bbaccsynapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://accsynapsestorage.dfs.core.windows.net"
		},
		"bing-covid-19-data_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'bing-covid-19-data'"
		},
		"covid-tracking_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'covid-tracking'"
		},
		"iiotdata_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://iitostore.dfs.core.windows.net"
		},
		"mlopsdev_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "c46a9435-c957-4e6c-a0f4-b9a597984773"
		},
		"mlopsdev_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "mlops"
		},
		"mlopsdev_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "8a3ddafe-6dd6-48af-867e-d745232a1833"
		},
		"mlopsdev_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
		},
		"nyc_tlc_green_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'nyc_tlc_green'"
		},
		"nyc_tlc_yellow_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'nyc_tlc_yellow'"
		},
		"sample-diabetes_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'sample-diabetes'"
		},
		"us-decennial-census-county_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'us-decennial-census-county'"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/accsynapsepools')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AMLtest1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "AMLTest1",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "AMLtest1",
								"type": "NotebookReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/AMLtest1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureMLTrain')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "NYCTaxiTrain",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "AzureMLtest",
								"type": "NotebookReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/AzureMLtest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Covid19AutoMLSpark')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Covid19AutoMLSpark",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Covid19AutoMLSpark",
								"type": "NotebookReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Covid19AutoMLSpark')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/E2ETest')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ResumeSQLPool",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Resume",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "NycYellow",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "dropdailyaggr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "nycyellow",
								"type": "NotebookReference"
							}
						}
					},
					{
						"name": "PauseSQLPool",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "NycYellow",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "NYC_holidays_Scala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PauseDedicatedPools",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "dropdailyaggr",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "ResumeSQLPool",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "accsynapsepools",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[[dbo].[dropdailyaggr]"
						}
					},
					{
						"name": "NYC_holidays_Scala",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "dropdailyaggr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "NYC_holidays_Scala",
								"type": "NotebookReference"
							}
						}
					},
					{
						"name": "AzureMLSpark",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "PauseSQLPool",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "AzureSparkMLLib",
								"type": "NotebookReference"
							}
						}
					},
					{
						"name": "SparkMLLib",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "AzureMLSpark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "SparkMLLib",
								"type": "NotebookReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Resume')]",
				"[concat(variables('workspaceId'), '/notebooks/nycyellow')]",
				"[concat(variables('workspaceId'), '/pipelines/PauseDedicatedPools')]",
				"[concat(variables('workspaceId'), '/sqlPools/accsynapsepools')]",
				"[concat(variables('workspaceId'), '/notebooks/NYC_holidays_Scala')]",
				"[concat(variables('workspaceId'), '/notebooks/AzureSparkMLLib')]",
				"[concat(variables('workspaceId'), '/notebooks/SparkMLLib')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ForEachTest')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select connstr from tblconnstr;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "accsqlinput",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(activity('Lookup1').output)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "connstr",
										"value": {
											"value": "@string(item().value)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "devopsjsoninput",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "adfoutput",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Dataflow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "ConnectionString",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"variables": {
					"connstr": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-19T22:38:19Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/accsqlinput')]",
				"[concat(variables('workspaceId'), '/datasets/devopsjsoninput')]",
				"[concat(variables('workspaceId'), '/datasets/adfoutput')]",
				"[concat(variables('workspaceId'), '/dataflows/ConnectionString')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NYCYellowRank')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "NYCyellow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "cleanUpNYCYellowRank",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "NYCyellow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 48,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "cleanUpNYCYellowRank",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "NYCYellowRankDS",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/NYCyellow')]",
				"[concat(variables('workspaceId'), '/datasets/NYCYellowRankDS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NycYellow')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "nycyellow",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "nycyellow",
								"type": "NotebookReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/nycyellow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PauseDedicatedPools')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "PauseSQLPools",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://management.azure.com/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/sqlPools/accsynapsepools/pause?api-version=2019-06-01-preview",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"sku": {
									"name": "DW100c"
								}
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com/"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Resume')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ResumeSQLPools",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://management.azure.com/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/sqlPools/accsynapsepools/resume?api-version=2019-06-01-preview",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"sku": {
									"name": "DW100c"
								}
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com/"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/adventureworkstoparquet')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GetTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select Table_schema, Table_name from information_schema.tables \nwhere table_type ='BASE TABLE' \nand table_schema='SalesLT' ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "advworksLT",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetTables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ExportToParquet",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select * from ',item().Table_Schema,'.',item().Table_Name) ",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "advworksLT",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "advworksparquet",
											"type": "DatasetReference",
											"parameters": {
												"FileName": "@concat(item().Table_Schema,'_',item().Table_Name)"
											}
										}
									]
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/advworksLT')]",
				"[concat(variables('workspaceId'), '/datasets/advworksparquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/coviddata19')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "hashtest",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "hashtest",
								"type": "DataFlowReference",
								"datasetParameters": {
									"covid19input": {},
									"Sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"integrationRuntime": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/hashtest')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cp_tpchdata')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_psf",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "tpchsf10000//"
							},
							{
								"name": "Destination",
								"value": "synapseroot/tpchdata/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"maxConcurrentConnections": 5
								}
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_psf",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_psf",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_psf')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_psf')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/devopsmt')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "devopsmt",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "devopsmt",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/devopsmt')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/diabetespipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "diabetes",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "diabetessample",
								"type": "NotebookReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/diabetessample')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyccpdata')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "cpnycdata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "accinput",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "nycdataoutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-10-19T23:18:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/accinput')]",
				"[concat(variables('workspaceId'), '/datasets/nycdataoutput')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test1pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "test1",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "test1",
								"type": "NotebookReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/test1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_psf')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "tpchdata",
						"fileSystem": "synapseroot"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/JsonInput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "13456-2020.03.23.2-Sample2.json",
						"folderPath": "devopsinput",
						"fileSystem": "synapseroot"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"AirID": {
							"type": "integer"
						},
						"ComponentName": {
							"type": "string"
						},
						"Version": {
							"type": "string"
						},
						"Environment": {
							"type": "array"
						},
						"Endpoints": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"Platform": {
							"type": "string"
						},
						"Dependencies": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"version": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"sourceType": {
										"type": "string"
									},
									"source": {
										"type": "string"
									},
									"collectionSource": {
										"type": "string"
									},
									"meta": {
										"type": "object"
									},
									"custom": {
										"type": "object",
										"properties": {
											"Name": {
												"type": "string"
											},
											"Endpoints": {
												"type": "array",
												"items": {
													"type": "string"
												}
											},
											"InUse[Yes/No]": {
												"type": "boolean"
											}
										}
									}
								}
							}
						},
						"BuilderMeta": {
							"type": "object",
							"properties": {
								"MetadataBuilder": {
									"type": "object",
									"properties": {
										"version": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										}
									}
								},
								"DateTime": {
									"type": "string"
								},
								"VSTS": {
									"type": "object",
									"properties": {
										"Build": {
											"type": "object",
											"properties": {
												"BUILD_REPOSITORY_URI": {
													"type": "string"
												},
												"BUILD_SOURCEBRANCHNAME": {
													"type": "string"
												},
												"BUILD_ARTIFACTSTAGINGDIRECTORY": {
													"type": "string"
												},
												"BUILD_BUILDID": {
													"type": "string"
												},
												"BUILD_BUILDNUMBER": {
													"type": "string"
												},
												"BUILD_BUILDURI": {
													"type": "string"
												},
												"BUILD_BINARIESDIRECTORY": {
													"type": "string"
												},
												"BUILD_DEFINITIONNAME": {
													"type": "string"
												},
												"BUILD_DEFINITIONVERSION": {
													"type": "string"
												},
												"BUILD_REASON": {
													"type": "string"
												},
												"BUILD_REPOSITORY_CLEAN": {
													"type": "string"
												},
												"BUILD_REPOSITORY_LOCALPATH": {
													"type": "string"
												},
												"BUILD_REPOSITORY_ID": {
													"type": "string"
												},
												"BUILD_REPOSITORY_NAME": {
													"type": "string"
												},
												"BUILD_REPOSITORY_PROVIDER": {
													"type": "string"
												}
											}
										},
										"Agent": {
											"type": "object",
											"properties": {
												"AGENT_BUILDDIRECTORY": {
													"type": "string"
												},
												"AGENT_HOMEDIRECTORY": {
													"type": "string"
												},
												"AGENT_ID": {
													"type": "string"
												},
												"AGENT_JOBNAME": {
													"type": "string"
												},
												"AGENT_JOBSTATUS": {
													"type": "string"
												},
												"AGENT_MACHINENAME": {
													"type": "string"
												},
												"AGENT_NAME": {
													"type": "string"
												},
												"AGENT_OS": {
													"type": "string"
												},
												"AGENT_OSARCHITECTURE": {
													"type": "string"
												},
												"AGENT_TOOLSDIRECTORY": {
													"type": "string"
												},
												"AGENT_WORKFOLDER": {
													"type": "string"
												}
											}
										},
										"System": {
											"type": "object",
											"properties": {
												"PIPELINE_WORKSPACE": {
													"type": "string"
												},
												"SYSTEM_COLLECTIONID": {
													"type": "string"
												},
												"SYSTEM_DEFAULTWORKINGDIRECTORY": {
													"type": "string"
												},
												"SYSTEM_DEFINITIONID": {
													"type": "string"
												},
												"SYSTEM_HOSTTYPE": {
													"type": "string"
												},
												"SYSTEM_PULLREQUEST_ISFORK": {
													"type": "string"
												},
												"SYSTEM_PULLREQUEST_PULLREQUESTID": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_PULLREQUESTNUMBER": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_SOURCEBRANCH": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_TARGETBRANCH": {
													"type": "null"
												},
												"SYSTEM_TASKDEFINITIONSURI": {
													"type": "string"
												},
												"SYSTEM_TASKDISPLAYNAME": {
													"type": "string"
												},
												"SYSTEM_TASKINSTANCEID": {
													"type": "string"
												},
												"SYSTEM_TASKINSTANCENAME": {
													"type": "string"
												},
												"SYSTEM_TEAMFOUNDATIONCOLLECTIONURI": {
													"type": "string"
												},
												"SYSTEM_TEAMPROJECT": {
													"type": "string"
												},
												"SYSTEM_TEAMPROJECTID": {
													"type": "string"
												},
												"TASK_DISPLAYNAME": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						},
						"Eso": {
							"type": "array"
						},
						"Services": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Name": {
										"type": "string"
									},
									"Version": {
										"type": "string"
									},
									"InUse": {
										"type": "boolean"
									},
									"collectionSource": {
										"type": "string"
									}
								}
							}
						},
						"Templates": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Name": {
										"type": "string"
									},
									"Version": {
										"type": "string"
									},
									"InUse": {
										"type": "boolean"
									},
									"collectionSource": {
										"type": "string"
									}
								}
							}
						},
						"MRDR": {
							"type": "array"
						},
						"UnsupportedFiles": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"Errors": {
							"type": "object",
							"properties": {
								"CRITICAL": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"Source": {
												"type": "string"
											},
											"Time": {
												"type": "string"
											},
											"Message": {
												"type": "string"
											}
										}
									}
								},
								"ERROR": {
									"type": "array"
								},
								"WARNING": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"Source": {
												"type": "string"
											},
											"Time": {
												"type": "string"
											},
											"Message": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"FilteredData": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"DataSource": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/JsonOutput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "devopsoutput",
						"fileSystem": "synapseroot"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"AirID": {
							"type": "string"
						},
						"ComponentName": {
							"type": "string"
						},
						"Version": {
							"type": "string"
						},
						"Platform": {
							"type": "string"
						},
						"Source": {
							"type": "string"
						},
						"Time": {
							"type": "string"
						},
						"Message": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NYCYellowDS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctaxiyellow",
						"fileSystem": "synapseroot"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "vendorID",
						"type": "UTF8"
					},
					{
						"name": "tpepPickupDateTime",
						"type": "INT96"
					},
					{
						"name": "tpepDropoffDateTime",
						"type": "INT96"
					},
					{
						"name": "passengerCount",
						"type": "INT32"
					},
					{
						"name": "tripDistance",
						"type": "DOUBLE"
					},
					{
						"name": "puLocationId",
						"type": "UTF8"
					},
					{
						"name": "doLocationId",
						"type": "UTF8"
					},
					{
						"name": "startLon",
						"type": "DOUBLE"
					},
					{
						"name": "startLat",
						"type": "DOUBLE"
					},
					{
						"name": "endLon",
						"type": "DOUBLE"
					},
					{
						"name": "endLat",
						"type": "DOUBLE"
					},
					{
						"name": "rateCodeId",
						"type": "INT32"
					},
					{
						"name": "storeAndFwdFlag",
						"type": "UTF8"
					},
					{
						"name": "paymentType",
						"type": "UTF8"
					},
					{
						"name": "fareAmount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mtaTax",
						"type": "DOUBLE"
					},
					{
						"name": "improvementSurcharge",
						"type": "UTF8"
					},
					{
						"name": "tipAmount",
						"type": "DOUBLE"
					},
					{
						"name": "tollsAmount",
						"type": "DOUBLE"
					},
					{
						"name": "totalAmount",
						"type": "DOUBLE"
					},
					{
						"name": "puYear",
						"type": "INT32"
					},
					{
						"name": "puMonth",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NYCYellowRankDS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "NYCYellowRank",
						"fileSystem": "synapseroot"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_psf')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tpchinput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "tpchsf10000"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/tpchinput')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/aaccouputput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accsqlsvr",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "connstr",
						"type": "varchar"
					},
					{
						"name": "inserttime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblconnstr1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/accsqlsvr')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/accinput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accinput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyctlc",
						"fileSystem": "opendataset"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/accinput')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/accsqlinput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accsqlsvr",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "connstr",
						"type": "varchar"
					},
					{
						"name": "inserttime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblconnstr"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/accsqlsvr')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/adfoutput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "adfoutput",
						"fileSystem": "synapseroot"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/advworksLT')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "advenworkLT",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/advenworkLT')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/advworksparquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "@concat(item().Table_Schema,'_',item().Table_Name)"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{formatDateTime(utcnow(),'yyyy')}/@{formatDateTime(utcnow(),'MM')}/@{formatDateTime(utcnow(),'dd')}/@{concat(dataset().FileName,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')} ",
							"type": "Expression"
						},
						"folderPath": "adventureworkslt",
						"fileSystem": "synapseroot"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/covid19input')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accinput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "part-00000-a790a8ae-ed8c-4963-87e5-93fca39b7b70-c000.snappy.parquet",
						"fileSystem": "coviddata19"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "date",
						"type": "DATE"
					},
					{
						"name": "state",
						"type": "UTF8"
					},
					{
						"name": "positive",
						"type": "INT32"
					},
					{
						"name": "negative",
						"type": "INT32"
					},
					{
						"name": "pending",
						"type": "INT_16"
					},
					{
						"name": "hospitalized_currently",
						"type": "INT_16"
					},
					{
						"name": "hospitalized_cumulative",
						"type": "INT32"
					},
					{
						"name": "in_icu_currently",
						"type": "INT_16"
					},
					{
						"name": "in_icu_cumulative",
						"type": "INT_16"
					},
					{
						"name": "on_ventilator_currently",
						"type": "INT_16"
					},
					{
						"name": "on_ventilator_cumulative",
						"type": "INT_16"
					},
					{
						"name": "recovered",
						"type": "INT32"
					},
					{
						"name": "data_quality_grade",
						"type": "UTF8"
					},
					{
						"name": "last_update_et",
						"type": "INT96"
					},
					{
						"name": "hash",
						"type": "UTF8"
					},
					{
						"name": "date_checked",
						"type": "UTF8"
					},
					{
						"name": "death",
						"type": "INT_16"
					},
					{
						"name": "hospitalized",
						"type": "INT32"
					},
					{
						"name": "total",
						"type": "INT32"
					},
					{
						"name": "total_test_results",
						"type": "INT32"
					},
					{
						"name": "pos_neg",
						"type": "INT32"
					},
					{
						"name": "fips",
						"type": "INT_16"
					},
					{
						"name": "death_increase",
						"type": "INT_16"
					},
					{
						"name": "hospitalized_increase",
						"type": "INT_16"
					},
					{
						"name": "negative_increase",
						"type": "INT32"
					},
					{
						"name": "positive_increase",
						"type": "INT_16"
					},
					{
						"name": "total_test_results_increase",
						"type": "INT32"
					},
					{
						"name": "fips_code",
						"type": "UTF8"
					},
					{
						"name": "iso_subdivision",
						"type": "UTF8"
					},
					{
						"name": "load_time",
						"type": "INT96"
					},
					{
						"name": "iso_country",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/accinput')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/coviddata19output')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "covid19output",
						"fileSystem": "coviddata19"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/defaultstore')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "part-00000-a790a8ae-ed8c-4963-87e5-93fca39b7b70-c000.snappy.parquet",
						"folderPath": "coviddata19",
						"fileSystem": "coviddata19"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "date",
						"type": "DATE"
					},
					{
						"name": "state",
						"type": "UTF8"
					},
					{
						"name": "positive",
						"type": "INT32"
					},
					{
						"name": "negative",
						"type": "INT32"
					},
					{
						"name": "pending",
						"type": "INT_16"
					},
					{
						"name": "hospitalized_currently",
						"type": "INT_16"
					},
					{
						"name": "hospitalized_cumulative",
						"type": "INT32"
					},
					{
						"name": "in_icu_currently",
						"type": "INT_16"
					},
					{
						"name": "in_icu_cumulative",
						"type": "INT_16"
					},
					{
						"name": "on_ventilator_currently",
						"type": "INT_16"
					},
					{
						"name": "on_ventilator_cumulative",
						"type": "INT_16"
					},
					{
						"name": "recovered",
						"type": "INT32"
					},
					{
						"name": "data_quality_grade",
						"type": "UTF8"
					},
					{
						"name": "last_update_et",
						"type": "INT96"
					},
					{
						"name": "hash",
						"type": "UTF8"
					},
					{
						"name": "date_checked",
						"type": "UTF8"
					},
					{
						"name": "death",
						"type": "INT_16"
					},
					{
						"name": "hospitalized",
						"type": "INT32"
					},
					{
						"name": "total",
						"type": "INT32"
					},
					{
						"name": "total_test_results",
						"type": "INT32"
					},
					{
						"name": "pos_neg",
						"type": "INT32"
					},
					{
						"name": "fips",
						"type": "INT_16"
					},
					{
						"name": "death_increase",
						"type": "INT_16"
					},
					{
						"name": "hospitalized_increase",
						"type": "INT_16"
					},
					{
						"name": "negative_increase",
						"type": "INT32"
					},
					{
						"name": "positive_increase",
						"type": "INT_16"
					},
					{
						"name": "total_test_results_increase",
						"type": "INT32"
					},
					{
						"name": "fips_code",
						"type": "UTF8"
					},
					{
						"name": "iso_subdivision",
						"type": "UTF8"
					},
					{
						"name": "load_time",
						"type": "INT96"
					},
					{
						"name": "iso_country",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dependcsv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "devopsoutput",
						"fileSystem": "synapseroot"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/deveopsjsonoutputdepend')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "devopsoutput",
						"fileSystem": "synapseroot"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/devopsjsoninput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "13456-2020.03.23.2-Sample3.json",
						"folderPath": "devopsinput",
						"fileSystem": "synapseroot"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"AirID": {
							"type": "integer"
						},
						"ComponentName": {
							"type": "string"
						},
						"Version": {
							"type": "string"
						},
						"Environment": {
							"type": "array"
						},
						"Endpoints": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"Platform": {
							"type": "string"
						},
						"Dependencies": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"version": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"sourceType": {
										"type": "string"
									},
									"source": {
										"type": "string"
									},
									"collectionSource": {
										"type": "string"
									},
									"meta": {
										"type": "object"
									},
									"custom": {
										"type": "object",
										"properties": {
											"Name": {
												"type": "string"
											},
											"Endpoints": {
												"type": "array",
												"items": {
													"type": "string"
												}
											},
											"InUse[Yes/No]": {
												"type": "boolean"
											}
										}
									}
								}
							}
						},
						"BuilderMeta": {
							"type": "object",
							"properties": {
								"MetadataBuilder": {
									"type": "object",
									"properties": {
										"version": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										}
									}
								},
								"DateTime": {
									"type": "string"
								},
								"VSTS": {
									"type": "object",
									"properties": {
										"Build": {
											"type": "object",
											"properties": {
												"BUILD_REPOSITORY_URI": {
													"type": "string"
												},
												"BUILD_SOURCEBRANCHNAME": {
													"type": "string"
												},
												"BUILD_ARTIFACTSTAGINGDIRECTORY": {
													"type": "string"
												},
												"BUILD_BUILDID": {
													"type": "string"
												},
												"BUILD_BUILDNUMBER": {
													"type": "string"
												},
												"BUILD_BUILDURI": {
													"type": "string"
												},
												"BUILD_BINARIESDIRECTORY": {
													"type": "string"
												},
												"BUILD_DEFINITIONNAME": {
													"type": "string"
												},
												"BUILD_DEFINITIONVERSION": {
													"type": "string"
												},
												"BUILD_REASON": {
													"type": "string"
												},
												"BUILD_REPOSITORY_CLEAN": {
													"type": "string"
												},
												"BUILD_REPOSITORY_LOCALPATH": {
													"type": "string"
												},
												"BUILD_REPOSITORY_ID": {
													"type": "string"
												},
												"BUILD_REPOSITORY_NAME": {
													"type": "string"
												},
												"BUILD_REPOSITORY_PROVIDER": {
													"type": "string"
												}
											}
										},
										"Agent": {
											"type": "object",
											"properties": {
												"AGENT_BUILDDIRECTORY": {
													"type": "string"
												},
												"AGENT_HOMEDIRECTORY": {
													"type": "string"
												},
												"AGENT_ID": {
													"type": "string"
												},
												"AGENT_JOBNAME": {
													"type": "string"
												},
												"AGENT_JOBSTATUS": {
													"type": "string"
												},
												"AGENT_MACHINENAME": {
													"type": "string"
												},
												"AGENT_NAME": {
													"type": "string"
												},
												"AGENT_OS": {
													"type": "string"
												},
												"AGENT_OSARCHITECTURE": {
													"type": "string"
												},
												"AGENT_TOOLSDIRECTORY": {
													"type": "string"
												},
												"AGENT_WORKFOLDER": {
													"type": "string"
												}
											}
										},
										"System": {
											"type": "object",
											"properties": {
												"PIPELINE_WORKSPACE": {
													"type": "string"
												},
												"SYSTEM_COLLECTIONID": {
													"type": "string"
												},
												"SYSTEM_DEFAULTWORKINGDIRECTORY": {
													"type": "string"
												},
												"SYSTEM_DEFINITIONID": {
													"type": "string"
												},
												"SYSTEM_HOSTTYPE": {
													"type": "string"
												},
												"SYSTEM_PULLREQUEST_ISFORK": {
													"type": "string"
												},
												"SYSTEM_PULLREQUEST_PULLREQUESTID": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_PULLREQUESTNUMBER": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_SOURCEBRANCH": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_TARGETBRANCH": {
													"type": "null"
												},
												"SYSTEM_TASKDEFINITIONSURI": {
													"type": "string"
												},
												"SYSTEM_TASKDISPLAYNAME": {
													"type": "string"
												},
												"SYSTEM_TASKINSTANCEID": {
													"type": "string"
												},
												"SYSTEM_TASKINSTANCENAME": {
													"type": "string"
												},
												"SYSTEM_TEAMFOUNDATIONCOLLECTIONURI": {
													"type": "string"
												},
												"SYSTEM_TEAMPROJECT": {
													"type": "string"
												},
												"SYSTEM_TEAMPROJECTID": {
													"type": "string"
												},
												"TASK_DISPLAYNAME": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						},
						"Eso": {
							"type": "array"
						},
						"Services": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Name": {
										"type": "string"
									},
									"Version": {
										"type": "string"
									},
									"InUse": {
										"type": "boolean"
									},
									"collectionSource": {
										"type": "string"
									}
								}
							}
						},
						"Templates": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Name": {
										"type": "string"
									},
									"Version": {
										"type": "string"
									},
									"InUse": {
										"type": "boolean"
									},
									"collectionSource": {
										"type": "string"
									}
								}
							}
						},
						"MRDR": {
							"type": "array"
						},
						"UnsupportedFiles": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"Errors": {
							"type": "object",
							"properties": {
								"CRITICAL": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"Source": {
												"type": "string"
											},
											"Time": {
												"type": "string"
											},
											"Message": {
												"type": "string"
											}
										}
									}
								},
								"ERROR": {
									"type": "array"
								},
								"WARNING": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"Source": {
												"type": "string"
											},
											"Time": {
												"type": "string"
											},
											"Message": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"FilteredData": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"DataSource": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/devopsoutput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "devopsoutput",
						"fileSystem": "synapseroot"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"AirID": {
							"type": "string"
						},
						"ComponentName": {
							"type": "string"
						},
						"Version": {
							"type": "string"
						},
						"Platform": {
							"type": "string"
						},
						"Source": {
							"type": "string"
						},
						"Time": {
							"type": "string"
						},
						"Message": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/input')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "wwi-factorder.csv",
						"folderPath": "WWI",
						"fileSystem": "rawdata"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Order Key|City Key|Customer Key|Stock Item Key|Order Date Key|Picked Date Key|Salesperson Key|Picker Key|WWI Order ID|WWI Backorder ID|Description|Package|Quantity|Unit Price|Tax Rate|Total Excluding Tax|Tax Amount|Total Including Tax|Lineage Key",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/metainput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "13456-2020.03.23.2-Sample2.json",
						"folderPath": "devopsinput",
						"fileSystem": "synapseroot"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"AirID": {
							"type": "integer"
						},
						"ComponentName": {
							"type": "string"
						},
						"Version": {
							"type": "string"
						},
						"Environment": {
							"type": "array"
						},
						"Endpoints": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"Platform": {
							"type": "string"
						},
						"Dependencies": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"version": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"sourceType": {
										"type": "string"
									},
									"source": {
										"type": "string"
									},
									"collectionSource": {
										"type": "string"
									},
									"meta": {
										"type": "object"
									},
									"custom": {
										"type": "object",
										"properties": {
											"Name": {
												"type": "string"
											},
											"Endpoints": {
												"type": "array",
												"items": {
													"type": "string"
												}
											},
											"InUse[Yes/No]": {
												"type": "boolean"
											}
										}
									}
								}
							}
						},
						"BuilderMeta": {
							"type": "object",
							"properties": {
								"MetadataBuilder": {
									"type": "object",
									"properties": {
										"version": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										}
									}
								},
								"DateTime": {
									"type": "string"
								},
								"VSTS": {
									"type": "object",
									"properties": {
										"Build": {
											"type": "object",
											"properties": {
												"BUILD_REPOSITORY_URI": {
													"type": "string"
												},
												"BUILD_SOURCEBRANCHNAME": {
													"type": "string"
												},
												"BUILD_ARTIFACTSTAGINGDIRECTORY": {
													"type": "string"
												},
												"BUILD_BUILDID": {
													"type": "string"
												},
												"BUILD_BUILDNUMBER": {
													"type": "string"
												},
												"BUILD_BUILDURI": {
													"type": "string"
												},
												"BUILD_BINARIESDIRECTORY": {
													"type": "string"
												},
												"BUILD_DEFINITIONNAME": {
													"type": "string"
												},
												"BUILD_DEFINITIONVERSION": {
													"type": "string"
												},
												"BUILD_REASON": {
													"type": "string"
												},
												"BUILD_REPOSITORY_CLEAN": {
													"type": "string"
												},
												"BUILD_REPOSITORY_LOCALPATH": {
													"type": "string"
												},
												"BUILD_REPOSITORY_ID": {
													"type": "string"
												},
												"BUILD_REPOSITORY_NAME": {
													"type": "string"
												},
												"BUILD_REPOSITORY_PROVIDER": {
													"type": "string"
												}
											}
										},
										"Agent": {
											"type": "object",
											"properties": {
												"AGENT_BUILDDIRECTORY": {
													"type": "string"
												},
												"AGENT_HOMEDIRECTORY": {
													"type": "string"
												},
												"AGENT_ID": {
													"type": "string"
												},
												"AGENT_JOBNAME": {
													"type": "string"
												},
												"AGENT_JOBSTATUS": {
													"type": "string"
												},
												"AGENT_MACHINENAME": {
													"type": "string"
												},
												"AGENT_NAME": {
													"type": "string"
												},
												"AGENT_OS": {
													"type": "string"
												},
												"AGENT_OSARCHITECTURE": {
													"type": "string"
												},
												"AGENT_TOOLSDIRECTORY": {
													"type": "string"
												},
												"AGENT_WORKFOLDER": {
													"type": "string"
												}
											}
										},
										"System": {
											"type": "object",
											"properties": {
												"PIPELINE_WORKSPACE": {
													"type": "string"
												},
												"SYSTEM_COLLECTIONID": {
													"type": "string"
												},
												"SYSTEM_DEFAULTWORKINGDIRECTORY": {
													"type": "string"
												},
												"SYSTEM_DEFINITIONID": {
													"type": "string"
												},
												"SYSTEM_HOSTTYPE": {
													"type": "string"
												},
												"SYSTEM_PULLREQUEST_ISFORK": {
													"type": "string"
												},
												"SYSTEM_PULLREQUEST_PULLREQUESTID": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_PULLREQUESTNUMBER": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_SOURCEBRANCH": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI": {
													"type": "null"
												},
												"SYSTEM_PULLREQUEST_TARGETBRANCH": {
													"type": "null"
												},
												"SYSTEM_TASKDEFINITIONSURI": {
													"type": "string"
												},
												"SYSTEM_TASKDISPLAYNAME": {
													"type": "string"
												},
												"SYSTEM_TASKINSTANCEID": {
													"type": "string"
												},
												"SYSTEM_TASKINSTANCENAME": {
													"type": "string"
												},
												"SYSTEM_TEAMFOUNDATIONCOLLECTIONURI": {
													"type": "string"
												},
												"SYSTEM_TEAMPROJECT": {
													"type": "string"
												},
												"SYSTEM_TEAMPROJECTID": {
													"type": "string"
												},
												"TASK_DISPLAYNAME": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						},
						"Eso": {
							"type": "array"
						},
						"Services": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Name": {
										"type": "string"
									},
									"Version": {
										"type": "string"
									},
									"InUse": {
										"type": "boolean"
									},
									"collectionSource": {
										"type": "string"
									}
								}
							}
						},
						"Templates": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Name": {
										"type": "string"
									},
									"Version": {
										"type": "string"
									},
									"InUse": {
										"type": "boolean"
									},
									"collectionSource": {
										"type": "string"
									}
								}
							}
						},
						"MRDR": {
							"type": "array"
						},
						"UnsupportedFiles": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"Errors": {
							"type": "object",
							"properties": {
								"CRITICAL": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"Source": {
												"type": "string"
											},
											"Time": {
												"type": "string"
											},
											"Message": {
												"type": "string"
											}
										}
									}
								},
								"ERROR": {
									"type": "array"
								},
								"WARNING": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"Source": {
												"type": "string"
											},
											"Time": {
												"type": "string"
											},
											"Message": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"FilteredData": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"DataSource": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nycdataoutput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "nyctaxi"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/output')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bbaccsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "tmp",
						"fileSystem": "synapseroot"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/bbaccsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlcoviddata')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accsqlsvr",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SNo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ObservationDate",
						"type": "varchar"
					},
					{
						"name": "ProvinceState",
						"type": "varchar"
					},
					{
						"name": "CountryRegion",
						"type": "varchar"
					},
					{
						"name": "LastUpdate",
						"type": "varchar"
					},
					{
						"name": "Confirmed",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Deaths",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Recovered",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "coviddata"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/accsqlsvr')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tblconnsvr')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "accsqlsvr",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "connstr",
						"type": "varchar"
					},
					{
						"name": "inserttime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblconnstr"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/accsqlsvr')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Keyvaultacc')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('Keyvaultacc_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIWorkspace1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "9c096ec7-b70d-4df1-8b46-03d52259986d",
					"tenantID": "72f988bf-86f1-41af-91ab-2d7cd011db47"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/accinput')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('accinput_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('accinput_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/accml')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('accml_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('accml_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "accml",
					"servicePrincipalId": "[parameters('accml_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('accml_servicePrincipalKey')]"
					},
					"tenant": "[parameters('accml_properties_typeProperties_tenant')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/accml1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('accml1_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('accml1_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "accml",
					"servicePrincipalId": "[parameters('accml1_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('accml1_servicePrincipalKey')]"
					},
					"tenant": "[parameters('accml1_properties_typeProperties_tenant')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/accsqlsvr')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('accsqlsvr_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/accvault1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('accvault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/accvault1bb')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('accvault1bb_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/advenworkLT')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('advenworkLT_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bbaccsynapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('bbaccsynapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bbaccsynapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('bbaccsynapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bing-covid-19-data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('bing-covid-19-data_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/covid-tracking')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('covid-tracking_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/iiotdata')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('iiotdata_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('iiotdata_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mlopsdev')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('mlopsdev_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('mlopsdev_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "mlopsdev",
					"servicePrincipalId": "[parameters('mlopsdev_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "accvault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "scvpsecret"
					},
					"tenant": "[parameters('mlopsdev_properties_typeProperties_tenant')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/accvault1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyc_tlc_green')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('nyc_tlc_green_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyc_tlc_yellow')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('nyc_tlc_yellow_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sample-diabetes')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('sample-diabetes_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/serverlesssqlsvr')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('serverlesssqlsvr_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tpchinput')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('tpchinput_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/us-decennial-census-county')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('us-decennial-census-county_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ConnectionString')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblconnsvr",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "aaccouputput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tid as long,\n\t\tconnstr as string,\n\t\tinserttime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 derive(tmpconstr = connstr) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tconnstr = tmpconstr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(input(\n\t\tid as long,\n\t\tconnstr as string,\n\t\tinserttime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/tblconnsvr')]",
				"[concat(variables('workspaceId'), '/datasets/aaccouputput')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NYCyellow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "NYCYellowDS",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "NYCYellowRankDS",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tvendorID as string,\n\t\ttpepPickupDateTime as timestamp,\n\t\ttpepDropoffDateTime as timestamp,\n\t\tpassengerCount as integer,\n\t\ttripDistance as double,\n\t\tpuLocationId as string,\n\t\tdoLocationId as string,\n\t\tstartLon as double,\n\t\tstartLat as double,\n\t\tendLon as double,\n\t\tendLat as double,\n\t\trateCodeId as integer,\n\t\tstoreAndFwdFlag as string,\n\t\tpaymentType as string,\n\t\tfareAmount as double,\n\t\textra as double,\n\t\tmtaTax as double,\n\t\timprovementSurcharge as string,\n\t\ttipAmount as double,\n\t\ttollsAmount as double,\n\t\ttotalAmount as double,\n\t\tpuYear as integer,\n\t\tpuMonth as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> source1\nsource1 select(mapColumn(\n\t\tvendorID,\n\t\ttpepPickupDateTime,\n\t\ttpepDropoffDateTime,\n\t\tpassengerCount,\n\t\ttripDistance,\n\t\tpuLocationId,\n\t\tdoLocationId,\n\t\tstartLon,\n\t\tstartLat,\n\t\tendLon,\n\t\tendLat,\n\t\trateCodeId,\n\t\tstoreAndFwdFlag,\n\t\tpaymentType,\n\t\tfareAmount,\n\t\textra,\n\t\tmtaTax,\n\t\timprovementSurcharge,\n\t\ttipAmount,\n\t\ttollsAmount,\n\t\ttotalAmount,\n\t\tpuYear,\n\t\tpuMonth\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(puYear,\n\t\tpuMonth),\n\tfareAmount = sum(fareAmount),\n\t\ttotalAmount = sum(totalAmount),\n\t\ttipAmount = sum(tipAmount),\n\tpartitionBy('hash', 1)) ~> Aggregate1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['yearmonthaggr'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/NYCYellowDS')]",
				"[concat(variables('workspaceId'), '/datasets/NYCYellowRankDS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/devopsmt')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "devopsjsoninput",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "deveopsjsonoutputdepend",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tAirID as string,\n\t\tComponentName as string,\n\t\tVersion as string,\n\t\tEnvironment as string[],\n\t\tEndpoints as string[],\n\t\tPlatform as string,\n\t\tDependencies as (name as string, version as string, type as string, sourceType as string, source as string, collectionSource as string, meta as ({} as string), custom as (Name as string, Endpoints as string[], {InUse[Yes/No]} as boolean))[],\n\t\tBuilderMeta as (MetadataBuilder as (version as string, updated as string), DateTime as string, VSTS as (Build as (BUILD_REPOSITORY_URI as string, BUILD_SOURCEBRANCHNAME as string, BUILD_ARTIFACTSTAGINGDIRECTORY as string, BUILD_BUILDID as string, BUILD_BUILDNUMBER as string, BUILD_BUILDURI as string, BUILD_BINARIESDIRECTORY as string, BUILD_DEFINITIONNAME as string, BUILD_DEFINITIONVERSION as string, BUILD_REASON as string, BUILD_REPOSITORY_CLEAN as string, BUILD_REPOSITORY_LOCALPATH as string, BUILD_REPOSITORY_ID as string, BUILD_REPOSITORY_NAME as string, BUILD_REPOSITORY_PROVIDER as string), Agent as (AGENT_BUILDDIRECTORY as string, AGENT_HOMEDIRECTORY as string, AGENT_ID as string, AGENT_JOBNAME as string, AGENT_JOBSTATUS as string, AGENT_MACHINENAME as string, AGENT_NAME as string, AGENT_OS as string, AGENT_OSARCHITECTURE as string, AGENT_TOOLSDIRECTORY as string, AGENT_WORKFOLDER as string), System as (PIPELINE_WORKSPACE as string, SYSTEM_COLLECTIONID as string, SYSTEM_DEFAULTWORKINGDIRECTORY as string, SYSTEM_DEFINITIONID as string, SYSTEM_HOSTTYPE as string, SYSTEM_PULLREQUEST_ISFORK as string, SYSTEM_PULLREQUEST_PULLREQUESTID as string, SYSTEM_PULLREQUEST_PULLREQUESTNUMBER as string, SYSTEM_PULLREQUEST_SOURCEBRANCH as string, SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI as string, SYSTEM_PULLREQUEST_TARGETBRANCH as string, SYSTEM_TASKDEFINITIONSURI as string, SYSTEM_TASKDISPLAYNAME as string, SYSTEM_TASKINSTANCEID as string, SYSTEM_TASKINSTANCENAME as string, SYSTEM_TEAMFOUNDATIONCOLLECTIONURI as string, SYSTEM_TEAMPROJECT as string, SYSTEM_TEAMPROJECTID as string, TASK_DISPLAYNAME as string))),\n\t\tEso as string[],\n\t\tServices as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tTemplates as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tMRDR as string[],\n\t\tUnsupportedFiles as string[],\n\t\tErrors as (CRITICAL as (Source as string, Time as string, Message as string)[], ERROR as string[], WARNING as (Source as string, Time as string, Message as string)[]),\n\t\tFilteredData as string[],\n\t\tDataSource as string[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 select(mapColumn(\n\t\tAirID,\n\t\tComponentName,\n\t\tVersion,\n\t\tEnvironment,\n\t\tEndpoints,\n\t\tPlatform,\n\t\tDependencies,\n\t\tBuilderMeta,\n\t\tEso,\n\t\tServices,\n\t\tTemplates,\n\t\tMRDR,\n\t\tUnsupportedFiles,\n\t\tErrors,\n\t\tFilteredData,\n\t\tDataSource\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['devopsoutput.json'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/devopsjsoninput')]",
				"[concat(variables('workspaceId'), '/datasets/deveopsjsonoutputdepend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/hashtest')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "covid19input",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~>  covid19input",
							"dataset": {
								"referenceName": "covid19input",
								"type": "DatasetReference"
							}
						}
					],
					"sinks": [
						{
							"name": "Sink1",
							"dataset": {
								"referenceName": "coviddata19output",
								"type": "DatasetReference"
							},
							"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Sink1"
						}
					],
					"script": "section Section1;\r\nshared covid19input = let\r\n  AdfDoc = AzureStorage.DataLakeContents(\"https://accbbstore.dfs.core.windows.net/coviddata19/part-00000-a790a8ae-ed8c-4963-87e5-93fca39b7b70-c000.snappy.parquet\"),\r\n  Parquet = Parquet.Document(AdfDoc)\r\nin\r\n  Parquet;\r\nshared UserQuery = let\r\n  Source = covid19input,\r\n  #\"Added custom\" = Table.AddColumn(Source, \"NeHash\", each [hash])\r\nin\r\n  #\"Added custom\";\r\n"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/covid19input')]",
				"[concat(variables('workspaceId'), '/datasets/coviddata19output')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/blobacckey')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ServicePrincipal",
				"typeProperties": {
					"tenant": "72f988bf-86f1-41af-91ab-2d7cd011db47",
					"servicePrincipalId": "8a3ddafe-6dd6-48af-867e-d745232a1833",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Keyvaultacc",
							"type": "LinkedServiceReference"
						},
						"secretName": "accbbstore"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Keyvaultacc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/scvpsecret')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ServicePrincipal",
				"typeProperties": {
					"tenant": "72f988bf-86f1-41af-91ab-2d7cd011db47",
					"servicePrincipalId": "8a3ddafe-6dd6-48af-867e-d745232a1833",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "accvault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "scvpsecret"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/accvault1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/svcname')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ServicePrincipal",
				"typeProperties": {
					"tenant": "72f988bf-86f1-41af-91ab-2d7cd011db47",
					"servicePrincipalId": "8a3ddafe-6dd6-48af-867e-d745232a1833",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "accvault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "svcname"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/accvault1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tenantid')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ServicePrincipal",
				"typeProperties": {
					"tenant": "72f988bf-86f1-41af-91ab-2d7cd011db47",
					"servicePrincipalId": "8a3ddafe-6dd6-48af-867e-d745232a1833",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "accvault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "tenantid"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/accvault1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/00 CREATE WWI TABLES')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n/************************************ Create Tables*********************************/\n\n\ncreate schema wwi\nGo\n\n -- 1. Create [FactTransaction] table\n\nCREATE TABLE [wwi].[FactTransaction]\n( \n\t[TransactionKey] [bigint]  NOT NULL,\n\t[DateKey] [date]  NOT NULL,\n\t[CustomerKey] [int]  NULL,\n\t[BillToCustomerKey] [int]  NULL,\n\t[SupplierKey] [int]  NULL,\n\t[TransactionTypeKey] [int]  NOT NULL,\n\t[PaymentMethodKey] [int]  NULL,\n\t[WWICustomerTransaction ID] [int]  NULL,\n\t[WWISupplierTransaction ID] [int]  NULL,\n\t[WWIInvoiceID] [int]  NULL,\n\t[WWIPurchaseOrderID] [int]  NULL,\n\t[SupplierInvoiceNumber] [nvarchar](20)  NULL,\n\t[TotalExcludingTax] [decimal](18,2)  NOT NULL,\n\t[TaxAmount] [decimal](18,2)  NOT NULL,\n\t[TotalIncludingTax] [decimal](18,2)  NOT NULL,\n\t[OutstandingBalance] [decimal](18,2)  NOT NULL,\n\t[IsFinalized] [nvarchar](5)  NOT NULL,\n\t[LineageKey] [int]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerKey] ),\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n-- 2. [FactStockHolding]\nCREATE TABLE [wwi].[FactStockHolding]\n( \n\t[StockHoldingKey] [bigint]  NOT NULL,\n\t[StockItemKey] [int]  NOT NULL,\n\t[QuantityOnHand] [int]  NOT NULL,\n\t[BinLocation] [nvarchar](20)  NOT NULL,\n\t[LastStocktakeQuantity] [int]  NOT NULL,\n\t[LastCostPrice] [decimal](18,2)  NOT NULL,\n\t[ReorderLevel] [int]  NOT NULL,\n\t[TargetStockLevel] [int]  NOT NULL,\n\t[LineageKey] [int]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [StockItemKey] ),\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n-- 3.  [FactSale]\nCREATE TABLE [wwi].[FactSale]\n( \n\t[SaleKey] [bigint]  NOT NULL,\n\t[CityKey] [int]  NOT NULL,\n\t[CustomerKey] [int]  NOT NULL,\n\t[BillToCustomerKey] [int]  NOT NULL,\n\t[StockItemKey] [int]  NOT NULL,\n\t[InvoiceDateKey] [date]  NOT NULL,\n\t[DeliveryDateKey] [date]  NULL,\n\t[SalespersonKey] [int]  NOT NULL,\n\t[WWIInvoiceID] [int]  NOT NULL,\n\t[Description] [nvarchar](100)  NOT NULL,\n\t[Package] [nvarchar](50)  NOT NULL,\n\t[Quantity] [int]  NOT NULL,\n\t[UnitPrice] [decimal](18,2)  NOT NULL,\n\t[TaxRate] [decimal](18,3)  NOT NULL,\n\t[TotalExcludingTax] [decimal](18,2)  NOT NULL,\n\t[TaxAmount] [decimal](18,2)  NOT NULL,\n\t[Profit] [decimal](18,2)  NOT NULL,\n\t[TotalIncludingTax] [decimal](18,2)  NOT NULL,\n\t[TotalDryItems] [int]  NOT NULL,\n\t[TotalChillerItems] [int]  NOT NULL,\n\t[LineageKey] [int]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerKey] ),\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n-- 4. [FactPurchase]\n\nCREATE TABLE [wwi].[FactPurchase]\n( \n\t[PurchaseKey] [bigint]  NOT NULL,\n\t[DateKey] [date]  NOT NULL,\n\t[SupplierKey] [int]  NOT NULL,\n\t[StockItemKey] [int]  NOT NULL,\n\t[WWIPurchaseOrderID] [int]  NULL,\n\t[OrderedOuters] [int]  NOT NULL,\n\t[OrderedQuantity] [int]  NOT NULL,\n\t[ReceivedOuters] [int]  NOT NULL,\n\t[Package] [nvarchar](50)  NOT NULL,\n\t[IsOrderFinalized] [nvarchar](5)  NOT NULL,\n\t[LineageKey] [int]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [SupplierKey] ),\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n-- 5. [FactOrder]\nCREATE TABLE [wwi].[FactOrder]\n( \n\t[OrderKey] [bigint]  NOT NULL,\n\t[CityKey] [int]  NOT NULL,\n\t[CustomerKey] [int]  NOT NULL,\n\t[StockItemKey] [int]  NOT NULL,\n\t[OrderDateKey] [date]  NOT NULL,\n\t[PickedDateKey] [date]  NULL,\n\t[SalespersonKey] [int]  NOT NULL,\n\t[PickerKey] [int]  NULL,\n\t[WWIOrderID] [int]  NOT NULL,\n\t[WWIBackorderID] [int]  NULL,\n\t[Description] [nvarchar](100)  NOT NULL,\n\t[Package] [nvarchar](50)  NOT NULL,\n\t[Quantity] [int]  NOT NULL,\n\t[UnitPrice] [decimal](18,2)  NOT NULL,\n\t[TaxRate] [decimal](18,3)  NOT NULL,\n\t[TotalExcludingTax] [decimal](18,2)  NOT NULL,\n\t[TaxAmount] [decimal](18,2)  NOT NULL,\n\t[TotalIncludingTax] [decimal](18,2)  NOT NULL,\n\t[LineageKey] [int]  NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerKey] ),\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n--6. [FactMovement]\nCREATE TABLE [wwi].[FactMovement]\n( \n\t[MovementKey] [bigint]  NOT NULL,\n\t[DateKey] [date]  NOT NULL,\n\t[StockItemKey] [int]  NOT NULL,\n\t[CustomerKey] [int]  NULL,\n\t[SupplierKey] [int]  NULL,\n\t[TransactionTypeKey] [int]  NOT NULL,\n\t[WWIStockItemTransactionID] [int]  NOT NULL,\n\t[WWIInvoiceID] [int]  NULL,\n\t[WWIPurchaseOrderID] [int]  NULL,\n\t[Quantity] [int]  NOT NULL,\n\t[LineageKey] [int]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerKey] ),\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n--7. [DimTransactionType]\nCREATE TABLE [wwi].[DimTransactionType]\n( \n\t[TransactionTypeKey] [int]  NOT NULL,\n\t[WWITransactionTypeID] [int]  NOT NULL,\n\t[TransactionType] [nvarchar](50)  NOT NULL,\n\t[ValidFrom] [datetime2](7)  NOT NULL,\n\t[ValidTo] [datetime2](7)  NOT NULL,\n\t[LineageKey] [int]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = REPLICATE,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n--8. DimSupplier\nCREATE TABLE [wwi].[DimSupplier]\n( \n\t[SupplierKey] [int]  NOT NULL,\n\t[WWISupplierID] [int]  NOT NULL,\n\t[Supplier] [nvarchar](100)  NOT NULL,\n\t[Category] [nvarchar](50)  NOT NULL,\n\t[PrimaryContact] [nvarchar](50)  NOT NULL,\n\t[SupplierReference] [nvarchar](20)  NULL,\n\t[PaymentDays] [int]  NOT NULL,\n\t[PostalCode] [nvarchar](10)  NOT NULL,\n\t[ValidFrom] [datetime2](7)  NOT NULL,\n\t[ValidTo] [datetime2](7)  NOT NULL,\n\t[LineageKey] [int]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = REPLICATE,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n--9. [DimStockItem]\n\nCREATE TABLE [wwi].[DimStockItem]\n( \n\t[StockItemKey] [int]  NOT NULL,\n\t[WWIStockItemID] [int]  NOT NULL,\n\t[Stock Item] [nvarchar](100)  NOT NULL,\n\t[Color] [nvarchar](20)  NOT NULL,\n\t[SellingPackage] [nvarchar](50)  NOT NULL,\n\t[Buying Package] [nvarchar](50)  NOT NULL,\n\t[Brand] [nvarchar](50)  NOT NULL,\n\t[Size] [nvarchar](20)  NOT NULL,\n\t[LeadTimeDays] [int]  NOT NULL,\n\t[QuantityPerOuter] [int]  NOT NULL,\n\t[IsChillerStock] [nvarchar](5)  NOT NULL,\n\t[Barcode] [nvarchar](50)  NULL,\n\t[TaxRate] [decimal](18,3)  NOT NULL,\n\t[UnitPrice] [decimal](18,2)  NOT NULL,\n\t[RecommendedRetailPrice] [decimal](18,2)  NULL,\n\t[TypicalWeightPerUnit] [decimal](18,3)  NOT NULL,\n\t[ValidFrom] [datetime2](7)  NOT NULL,\n\t[ValidTo] [datetime2](7)  NOT NULL,\n\t[LineageKey] [int]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = REPLICATE,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n--10. DimPaymentMethod\nCREATE TABLE [wwi].[DimPaymentMethod]\n( \n\t[PaymentMethodKey] [int]  NOT NULL,\n\t[WWIPaymentMethodID] [int]  NOT NULL,\n\t[PaymentMethod] [nvarchar](50)  NOT NULL,\n\t[ValidFrom] [datetime2](7)  NOT NULL,\n\t[ValidTo] [datetime2](7)  NOT NULL,\n\t[LineageKey] [int]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = REPLICATE,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n--11. [DimEmployee]\nCREATE TABLE [wwi].[DimEmployee]\n( \n\t[EmployeeKey] [int]  NOT NULL,\n\t[WWIEmployeeID] [int]  NOT NULL,\n\t[Employee] [nvarchar](50)  NOT NULL,\n\t[PreferredName] [nvarchar](50)  NOT NULL,\n\t[IsSalesperson] [nvarchar](5)  NOT NULL,\n\t[ValidFrom] [datetime2](7)  NOT NULL,\n\t[ValidTo] [datetime2](7)  NOT NULL,\n\t[LineageKey] [int]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = REPLICATE,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n--12. DimDate\nCREATE TABLE [wwi].[DimDate]\n( \n\t[Date] [date]  NOT NULL,\n\t[DayNumber] [int]  NOT NULL,\n\t[Day] [nvarchar](10)  NOT NULL,\n\t[Month] [nvarchar](10)  NOT NULL,\n\t[ShortMonth] [nvarchar](3)  NOT NULL,\n\t[CalendarMonthNumber] [int]  NOT NULL,\n\t[CalendarMonthLabel] [nvarchar](20)  NOT NULL,\n\t[CalendarYear] [int]  NOT NULL,\n\t[CalendarYearLabel] [nvarchar](10)  NOT NULL,\n\t[FiscalMonthNumber] [int]  NOT NULL,\n\t[FiscalMonthLabel] [nvarchar](20)  NOT NULL,\n\t[FiscalYear] [int]  NOT NULL,\n\t[FiscalYearLabel] [nvarchar](10)  NOT NULL,\n\t[ISOWeekNumber] [int]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = REPLICATE,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n--13. [DimCity]\nCREATE TABLE [wwi].[DimCity]\n( \n\t[CityKey] [int]  NOT NULL,\n\t[WWICityID] [int]  NOT NULL,\n\t[City] [nvarchar](50)  NOT NULL,\n\t[StateProvince] [nvarchar](50)  NOT NULL,\n\t[Country] [nvarchar](60)  NOT NULL,\n\t[Continent] [nvarchar](30)  NOT NULL,\n\t[SalesTerritory] [nvarchar](50)  NOT NULL,\n\t[Region] [nvarchar](30)  NOT NULL,\n\t[Subregion] [nvarchar](30)  NOT NULL,\n\t[LatestRecordedPopulation] [bigint]  NOT NULL,\n\t[ValidFrom] [datetime2](7)  NOT NULL,\n\t[ValidTo] [datetime2](7)  NOT NULL,\n\t[LineageKey] [int]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = REPLICATE,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n--14. [DimCustomer]\nCREATE TABLE [wwi].[DimCustomer]\n( \n\t[CustomerKey] [int]  NOT NULL,\n\t[WWICustomerID] [int]  NOT NULL,\n\t[Customer] [nvarchar](100)  NOT NULL,\n\t[BillToCustomer] [nvarchar](100)  NOT NULL,\n\t[Category] [nvarchar](50)  NOT NULL,\n\t[BuyingGroup] [nvarchar](50)  NOT NULL,\n\t[PrimaryContact] [nvarchar](50)  NOT NULL,\n\t[PostalCode] [nvarchar](10)  NOT NULL,\n\t[ValidFrom] [datetime2](7)  NOT NULL,\n\t[ValidTo] [datetime2](7)  NOT NULL,\n\t[LineageKey] [int]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = REPLICATE,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n--15. [PostalCodes]\nCREATE TABLE [wwi].[PostalCodes]\n( \n\t[City] [nvarchar](30)  NULL,\n\t[State] [nvarchar](30)  NULL,\n\t[Zip] [nvarchar](10)  NULL,\n\t[Latitude] [nvarchar](30)  NULL,\n\t[Longitude] [nvarchar](30)  NULL,\n\t[Timezone] [nvarchar](5)  NULL\n)\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n --16. Employee PII Data\n CREATE TABLE [wwi].[EmployeePIIData]\n( \n\t[Id] [int]  NULL,\n\t[FirstName] [nvarchar](30)  NULL,\n\t[LastName] [nvarchar](30)  NULL,\n\t[Company] [nvarchar](30)  NULL,\n\t[Address] [nvarchar](30)  NULL,\n\t[City] [nvarchar](30)  NULL,\n\t[County] [nvarchar](30)  NULL,\n\t[State] [nvarchar](10)  NULL,\n\t[Phone] [varchar](100)  NULL,\n\t[email] [varchar](100)  NULL,\n\t[SSN] [nvarchar](30)  NULL\n)\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "accsynapsepools",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01 COPY INTO WWI TABLES')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n\n/****************** Load data into SQL Pool table using COPY INTO ***********************/\n\n-- 1. FactTransaction\nCOPY INTO wwi.FactTransaction\n(TransactionKey 1, DateKey 2, CustomerKey 3, BillToCustomerKey 4, SupplierKey 5, TransactionTypeKey 6, PaymentMethodKey 7, [WWICustomerTransaction ID] 8, [WWISupplierTransaction ID] 9, WWIInvoiceID 10, WWIPurchaseOrderID 11, SupplierInvoiceNumber 12, TotalExcludingTax 13, TaxAmount 14, TotalIncludingTax 15, OutstandingBalance 16, IsFinalized 17, LineageKey 18)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-facttransaction.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '|'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\n\nGO\n\n\n-- 2. FactStockHolding\n\nCOPY INTO wwi.FactStockHolding\n(StockHoldingKey 1, StockItemKey 2, QuantityOnHand 3, BinLocation 4, LastStocktakeQuantity 5, LastCostPrice 6, ReorderLevel 7, TargetStockLevel 8, LineageKey 9)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-factstockholding.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '|'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\n\nGO\n\n\n-- 3. FactSale\nCOPY INTO wwi.FactSale\n(SaleKey 1, CityKey 2, CustomerKey 3, BillToCustomerKey 4, StockItemKey 5, InvoiceDateKey 6, DeliveryDateKey 7, SalespersonKey 8, WWIInvoiceID 9, Description 10, Package 11, Quantity 12, UnitPrice 13, TaxRate 14, TotalExcludingTax 15, TaxAmount 16, Profit 17, TotalIncludingTax 18, TotalDryItems 19, TotalChillerItems 20, LineageKey 21)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-factsale.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '|'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\nGO\n\n\n-- 4. FactPurchase\nCOPY INTO wwi.FactPurchase\n(PurchaseKey 1, DateKey 2, SupplierKey 3, StockItemKey 4, WWIPurchaseOrderID 5, OrderedOuters 6, OrderedQuantity 7, ReceivedOuters 8, Package 9, IsOrderFinalized 10, LineageKey 11)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-factpurchase.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '|'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\n\nGO\n\n\n--5. FactOrder\nCOPY INTO wwi.FactOrder\n(OrderKey 1, CityKey 2, CustomerKey 3, StockItemKey 4, OrderDateKey 5, PickedDateKey 6, SalespersonKey 7, PickerKey 8, WWIOrderID 9, WWIBackorderID 10, Description 11, Package 12, Quantity 13, UnitPrice 14, TaxRate 15, TotalExcludingTax 16, TaxAmount 17, TotalIncludingTax 18, LineageKey 19)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-factorder.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '|'\n\t,FIRSTROW = 3\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\nGO\n\n-- 6. [FactMovement]\nCOPY INTO wwi.FactMovement\n(MovementKey 1, DateKey 2, StockItemKey 3, CustomerKey 4, SupplierKey 5, TransactionTypeKey 6, WWIStockItemTransactionID 7, WWIInvoiceID 8, WWIPurchaseOrderID 9, Quantity 10, LineageKey 11)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-factmovement.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '|'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\nGO\n\n--7. DimTransactionType\nCOPY INTO wwi.DimTransactionType\n(TransactionTypeKey 1, WWITransactionTypeID 2, TransactionType 3, ValidFrom 4, ValidTo 5, LineageKey 6)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-dimtransactiontype.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '|'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\n\nGO\n\n--8. DimSupplier\nCOPY INTO wwi.DimSupplier\n(SupplierKey 1, WWISupplierID 2, Supplier 3, Category 4, PrimaryContact 5, SupplierReference 6, PaymentDays 7, PostalCode 8, ValidFrom 9, ValidTo 10, LineageKey 11)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-dimsupplier.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '|'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\n\nGO\n\n--9. DimStockItem\nCOPY INTO wwi.DimStockItem\n--(StockItemKey 1, WWIStockItemID 2, Stock Item 3, Color 4, SellingPackage 5, Buying Package 6, Brand 7, Size 8, LeadTimeDays 9, QuantityPerOuter 10, IsChillerStock 11, Barcode 12, TaxRate 13, UnitPrice 14, RecommendedRetailPrice 15, TypicalWeightPerUnit 16, ValidFrom 17, ValidTo 18, LineageKey 19)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-dimstockitem.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '|'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\n\nGO\n\n--10. DimPaymentMethod\nCOPY INTO wwi.DimPaymentMethod\n(PaymentMethodKey 1, WWIPaymentMethodID 2, PaymentMethod 3, ValidFrom 4, ValidTo 5, LineageKey 6)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-dimpaymentmethod.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '|'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\n\nGO\n\n--11. DimEmployee\nCOPY INTO wwi.DimEmployee\n(EmployeeKey 1, WWIEmployeeID 2, Employee 3, PreferredName 4, IsSalesperson 5, ValidFrom 6, ValidTo 7, LineageKey 8)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-dimemployee.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '|'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\n\nGO\n\n--12. DimDate\nCOPY INTO wwi.DimDate\n(Date 1, DayNumber 2, Day 3, Month 4, ShortMonth 5, CalendarMonthNumber 6, CalendarMonthLabel 7, CalendarYear 8, CalendarYearLabel 9, FiscalMonthNumber 10, FiscalMonthLabel 11, FiscalYear 12, FiscalYearLabel 13, ISOWeekNumber 14)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-dimdate.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '|'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\n\nGO\n\n--13. DimCity\nCOPY INTO wwi.DimCity\n(CityKey 1, WWICityID 2, City 3, StateProvince 4, Country 5, Continent 6, SalesTerritory 7, Region 8, Subregion 9, LatestRecordedPopulation 10, ValidFrom 11, ValidTo 12, LineageKey 13)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-dimcity.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '|'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\n\nGO\n\n--14. DimCustomer\nCOPY INTO wwi.DimCustomer\n(CustomerKey 1, WWICustomerID 2, Customer 3, BillToCustomer 4, Category 5, BuyingGroup 6, PrimaryContact 7, PostalCode 8, ValidFrom 9, ValidTo 10, LineageKey 11)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-dimcustomer.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '|'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\n\nGO\n\n\n--15. [PostalCodes]\nCOPY INTO [wwi].[PostalCodes]\n([City] 1, [State] 2,\t[Zip] 3,\t[Latitude] 4,\t[Longitude] 5,\t[Timezone] 6)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/postalcodes.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = ','\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\n\nGO\n\n--16.EmployeePIIData\nCOPY INTO wwi.EmployeePIIData\n(Id 1, FirstName 2, LastName 3, Company 4, Address 5, City 6, County 7, State 8, Phone 9, email 10, SSN 11)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/EmployeePIIData20K.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = ','\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/rawdata/'\n\t,IDENTITY_INSERT = 'OFF'\n)\n--END\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "accsynapsepools",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01 Create Trips Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE TABLE [dbo].[Trips]\n( \n    [vendorID] [real]  NOT NULL,\n    [passengerCount] [real]  NULL,\n    [tripDistance] [real]  NULL,\n    [month_num] [real]  NULL,\n    [day_of_month] [real]  NULL,\n    [day_of_week] [real]  NULL,\n    [day_of_hour] [real]  NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    HEAP\n)\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "accsynapsepools",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02 Create Models Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE TABLE [dbo].[Models]\n( \n    [Id] [int]  NOT NULL,\n    [Model] [varbinary](max)  NULL,\n    [Description] [varchar](200)  NULL\n)\nWITH\n(\n    DISTRIBUTION = REPLICATE,\n    HEAP\n)\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "accsynapsepools",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02 Set up RLS DDM')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n/*****************************************************************************************************************/\n-- 1. Setting up Dynamic Data Masking on EmailId column of wwi.EmployeePIIData\n\n        ALTER TABLE wwi.EmployeePIIData  \n        ALTER COLUMN Email varchar(100) MASKED WITH (FUNCTION = 'email()'); \n\n        ALTER TABLE wwi.EmployeePIIData  \n        ALTER COLUMN Phone varchar(100) MASKED WITH (FUNCTION = 'partial(0,\"XXX-XXX-XX\",2)'); \n\n/*****************************************************************************************************************/\n\n-- 2. Setting up Row Level Security on State\n\n        --Create User and Grant Select Permissions\n        CREATE USER [babal@microsoft.com] FROM EXTERNAL PROVIDER\n        GRANT SELECT ON wwi.EmployeePIIData TO [babal@microsoft.com] \n        EXEC sp_addrolemember 'db_datareader', 'babal@microsoft.com'\n\n        CREATE USER [youralias@domain.com] FROM EXTERNAL PROVIDER\n        GRANT SELECT ON wwi.EmployeePIIData TO [youralias@domain.com] \n        EXEC sp_addrolemember 'db_datareader', 'youralias@domain.com'\n\n\n        --Grant Impersonate permissions for AAD login \n        GRANT IMPERSONATE ON USER::[babal@microsoft.com] TO [babal@microsoft.com];\n        GRANT IMPERSONATE ON USER::[youralias@domain.com] TO [youralias@domain.com];\n\n        --Create roles as values present in column \n        --CREATE ROLE [DE]; --This role already exists for SQL login\n        CREATE ROLE [CA];\n        CREATE ROLE [PA];\n        CREATE ROLE [NY];\n       \n        -- Add AAD users to roles      \n        EXEC sp_addrolemember 'NY', 'babal@microsoft.com';\n        EXEC sp_addrolemember 'PA', 'babal@microsoft.com';\n        EXEC sp_addrolemember 'CA', 'babal@microsoft.com';\n\n\n        CREATE FUNCTION wwi.fn_securitypredicate_rolemember(@State AS sysname)  \n        RETURNS TABLE  \n        WITH SCHEMABINDING  \n        AS  \n        RETURN SELECT 1 AS fn_securitypredicate_result   \n        WHERE \n            (@State = 'NY' and IS_ROLEMEMBER('NY') = 1) \n        or (@State = 'CA' and IS_ROLEMEMBER('CA') = 1) \n        or (@State = 'PA' and IS_ROLEMEMBER('PA') = 1)\n        or IS_ROLEMEMBER('dbo') = 1; \n\n        --Create Security Policy to filter rows based on column values \n        CREATE SECURITY POLICY StateFilter_rolemember \n        ADD FILTER PREDICATE wwi.fn_securitypredicate_rolemember([state])   \n        ON  wwi.EmployeePIIData \n        WITH (STATE = ON); \n\n\n        --Test Runs\n        select USER_NAME()\n        select top 100 * from wwi.EmployeePIIData \n        EXECUTE AS USER ='babal@microsoft.com'\n        select user_name() as UserName, is_rolemember('NY') As IsALCustomer, is_rolemember('CA') As IsCACustomer\n        select top 100 * from wwi.EmployeePIIData ;\n        revert\n        EXECUTE AS USER ='youralias@domain.com'\n        select user_name() as UserName, is_rolemember('NY') As IsALCustomer, is_rolemember('CA') As IsCACustomer\n        select top 100 [State], * from wwi.EmployeePIIData ;\n        revert\n        select user_name() as UserName, is_rolemember('NY') As IsALCustomer, is_rolemember('CA') As IsCACustomer\n        select top 100 * from wwi.EmployeePIIData ;\n\n\n\n--      DROP SECURITY POLICY StateFilter_rolemember; \n--      DROP FUNCTION Security.fn_securitypredicate_rolemember\n--      DROP SCHEMA Security;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "accsynapsepools",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03 Example run for RLS DDM')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "--Returns records for CA state\nEXECUTE AS USER ='babal@microsoft.com'\nSELECT \n    Count(*) as EmployeeCount\nFROM \n    wwi.EmployeePIIData;\n\nSELECT \n    [FirstName]\n    ,[LastName]\n    ,[State]\n    ,[Phone]\n    ,[Email]\nFROM \n    wwi.EmployeePIIData ;\nrevert\n\n\n\n--Returns records for PA and NY state\nEXECUTE AS USER ='youralias@domain.com'\nSELECT \n    Count(*) as EmployeeCount\nFROM \n    wwi.EmployeePIIData;\n\nSELECT \n    [FirstName]\n    ,[LastName]\n    ,[State]\n    ,[Phone]\n    ,[Email]    \nFROM \n    wwi.EmployeePIIData;\nrevert",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "accsynapsepools",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03 Register Model in SQL Pool')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\nInsert into dbo.Models\n(Id, [Model],[Description])\nVALUES(60,\n,'NYC cab fare prediction model')",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "accsynapsepools",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04 Load Trips table with data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- type your sql script here, we now have intellisense\n\nDROP TABLE dbo.Trips;\n\nIF NOT EXISTS (SELECT * FROM sys.objects WHERE NAME = 'Trips' AND TYPE = 'U')\nCREATE TABLE dbo.Trips\n( \n    [vendorID] [real]  NOT NULL,\n    [passengerCount] [real]  NULL,\n    [tripDistance] [real]  NULL,\n    [month_num] [real]  NULL,\n    [day_of_month] [real]  NULL,\n    [day_of_week] [real]  NULL,\n    [day_of_hour] [real]  NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    HEAP\n)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​                 \n--CREATE PROC bulk_load_test\n--AS\n--BEGIN\nCOPY INTO dbo.Trips\n(vendorID 1, passengerCount 2, tripDistance 3, month_num 4, day_of_month 5, day_of_week 6, day_of_hour 7)\nFROM 'https://accsynapsestorage.dfs.core.windows.net/tripsdatascore/trips.txt'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIELDQUOTE = '\"'\n\t,FIELDTERMINATOR = '\t'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://accsynapsestorage.dfs.core.windows.net/tripsdatascore/'\n\t,IDENTITY_INSERT = 'OFF'\n)\n--END\nGO\n\nSELECT TOP 100 * FROM dbo.Trips\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "accsynapsepools",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05 Data Exploration with SQLOD')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://accsynapsestorage.blob.core.windows.net/curateddata/ordersumamtion/OrdersByState/part-00000-e73ae662-3767-44ef-ba2e-84a26ecc7ee5-c000.snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "master",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05 PREDICT In-Engine ML Scoring')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n-- PREDICTIVE MODELS TABLE\nSELECT * FROM Models;\n\n-- TRIPS DATA TABLE\nselect * from dbo.Trips\n\n-- quick predict\nSELECT TOP 10\n       [vendorID],\n       [passengerCount],\n       [tripDistance],\n       [month_num],\n       [day_of_month],\n       [day_of_week],\n       [day_of_hour],\n       [totalAmount]\nFROM PREDICT (model = (SELECT Model FROM Models WHERE Id = 60), Data = dbo.Trips) WITH (totalAmount float)\n\n\n-- NEXT PREDICTIONS INTO A MORE COMPLEX QUERY\n--DECLARE @model varbinary(max) = (SELECT Model FROM Models WHERE Id = 60);\nSELECT\n\tPassengerCount,\n\tTripCount,\n\tAvgTripAmount,\n\tRANK() OVER (ORDER BY AvgTripAmount DESC) AS RankTripAmount\nFROM (\n\tSELECT \n\t\t   [passengerCount] as PassengerCount,\n\t\t   COUNT(*) as TripCount,\n\t\t   AVG([totalAmount]) as AvgTripAmount\n\tFROM PREDICT (model = (SELECT Model FROM Models WHERE Id = 60), Data = dbo.Trips) WITH (totalAmount float)\n\tGROUP BY\n\t\t[passengerCount]) SubQ\nORDER BY\n\tPassengerCount\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "accsynapsepools",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NYCYellow')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "use nyctaxi\nGO\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK     'https://accsynapsestorage.blob.core.windows.net/synapseroot/nyctaxiyellow/*',\n        FORMAT = 'parquet'\n    ) AS [result];\n\nSELECT\n    PuYear, PuMonth, sum(FareAmount) as FareAmount, sum(TotalAmount) as TotalAmount\nFROM\n    OPENROWSET(\n        BULK     'https://accsynapsestorage.blob.core.windows.net/synapseroot/nyctaxiyellow/*',\n        FORMAT = 'parquet'\n    ) AS [result] \n    Group by PuYear, PuMonth\n    Order by PuYear, PuMonth;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "nyctaxi",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [Id]\n,[FirstName]\n,[LastName]\n,[Company]\n,[Address]\n,[City]\n,[County]\n,[State]\n,[Phone]\n,[email]\n,[SSN]\n FROM [wwi].[EmployeePIIData]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "accsynapsepools",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    count(*)\nFROM\n    OPENROWSET(\n        BULK     'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n        FORMAT = 'parquet'\n    ) AS [result];\n\nSELECT\n    TOP 2000 *\nFROM\n    OPENROWSET(\n        BULK     'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n        FORMAT = 'parquet'\n    ) AS [result];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "master",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://accsynapsestorage.dfs.core.windows.net/rawdata/WWI/wwi-dimstockitem.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION='2.0'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "master",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/arcinsightnullquery')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://accsynapsestorage.dfs.core.windows.net/synapseroot/arcinsight/serverless---71310---Evergreen_AwsLambdaSample---20201215.2---2020-12-15 16_49_35.parquet',\n        FORMAT='PARQUET'\n    ) AS [result]\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://accsynapsestorage.dfs.core.windows.net/synapseroot/arcinsight/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [result]\n\n\nCreate database arcinsight;\n\nuse arcinsight;\n-- 1st View\n-- Timed out after 30 min\n\nDROP VIEW iacAwsView;\n\nCREATE VIEW iacAwsView AS\nSELECT *\nFROM OPENROWSET\n(\n    BULK 'https://accsynapsestorage.dfs.core.windows.net/synapseroot/arcinsight/*.parquet',\n    FORMAT = 'PARQUET'\n)\nWITH (\n  [name] VARCHAR(100) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n  [stage] VARCHAR(100) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n  [runtime] VARCHAR(100) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n  [region] VARCHAR(100) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n  [airid] VARCHAR(200) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n  [environment] VARCHAR(100) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n  [securityGroupIds] VARCHAR(8000) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n  [subnetIds] VARCHAR(8000) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n  [resname] VARCHAR(100) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n  [restype] VARCHAR(2000) COLLATE Latin1_General_100_CI_AI_SC_UTF8\n) AS iacAws;\nGO\n\nSelect * from iacAwsView;\n\nDrop View iacAwsView;\n\nCREATE VIEW iacAwsView AS\nSELECT *\nFROM OPENROWSET\n(\n    BULK 'https://accsynapsestorage.dfs.core.windows.net/synapseroot/arcinsight/*.parquet',\n    FORMAT = 'PARQUET'\n)\nWITH (\n  [name] VARCHAR(100),\n  [stage] VARCHAR(100),\n  [runtime] VARCHAR(100),\n  [region] VARCHAR(100),\n  [airid] VARCHAR(200),\n  [environment] VARCHAR(100),\n  [securityGroupIds] VARCHAR(8000),\n  [subnetIds] VARCHAR(8000),\n  [resname] VARCHAR(100),\n  [restype] VARCHAR(2000)\n) AS iacAws;\nGO\n\nSelect * from iacAwsView;\n\nDrop View iacAwsView;\n\nCREATE VIEW iacAwsView AS\nSELECT *\nFROM OPENROWSET\n(\n    BULK 'https://accsynapsestorage.dfs.core.windows.net/synapseroot/arcinsight/*.parquet',\n    FORMAT = 'PARQUET'\n) AS iacAws;\nGO\n\nSelect * from iacAwsView;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "arcinsight"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/coviddata')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://accsynapsestorage.dfs.core.windows.net/coviddata/covid_19_data.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION='2.0',\n        FIRSTROW = 2\n    ) AS [result]\n\nCREATE DATABASE coviddb;\n\nCREATE VIEW covidview AS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'https://accsynapsestorage.dfs.core.windows.net/coviddata/covid_19_data.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION='2.0',\n        DATA_SOURCE = 'SqlOnDemandDemo',\n        FIRSTROW = 2\n    ) WITH (\n      SNo int,\n      ObservationDate varchar(50),\n      ProvinceState varchar(200),\n      CountryRegion varchar(200),\n      LastUpdate varchar(50),\n      Confirmed decimal(18,2),\n      Deaths decimal(18,2),\n      Recovered decimal(18,2)\n) AS [result]\n\nuse coviddb\nGO\n\nuse coviddb\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'xyxpojklnbgtyughd234!234$%';\n-- create credentials for containers in our demo storage account\nCREATE DATABASE SCOPED CREDENTIAL sqlondemand\nWITH IDENTITY='SHARED ACCESS SIGNATURE',  \nSECRET = '?sv=2019-12-12&ss=bfqt&srt=sco&sp=rwdlacupx&se=2021-10-08T20:03:10Z&st=2020-10-08T12:03:10Z&spr=https&sig=73FwbAOqT3VI6SQ%2FjX1E0CQDo0y7Sri8%2FdAdgOnGE8w%3D'\nGO\nCREATE EXTERNAL DATA SOURCE SqlOnDemandDemo WITH (\n    LOCATION = 'https://accsynapsestorage.blob.core.windows.net',\n    CREDENTIAL = sqlondemand\n);\n\n\nDROP VIEW IF EXISTS covidview;\nGO\n\nCREATE VIEW covidview AS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'coviddata/covid_19_data.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION='2.0',\n        DATA_SOURCE = 'SqlOnDemandDemo',\n        FIRSTROW = 2\n    ) WITH (\n      SNo int,\n      ObservationDate varchar(50),\n      ProvinceState varchar(200),\n      CountryRegion varchar(200),\n      LastUpdate varchar(50),\n      Confirmed decimal(18,2),\n      Deaths decimal(18,2),\n      Recovered decimal(18,2)\n) AS [result]\n\nselect top 200 * from covidview;\n\nselect count(*) from covidview;\n\nSelect CountryRegion, sum(Confirmed) as Confirmed, sum(Deaths) as Deaths, sum(Recovered) as Recovered\n from covidview \ngroup by CountryRegion\n\nSelect datepart(YEAR, ObservationDate) as year, datepart(MONTH, ObservationDate) as month, \nCountryRegion, \nsum(Confirmed) as Confirmed, sum(Deaths) as Deaths, sum(Recovered) as Recovered\n from covidview \ngroup by datepart(YEAR, ObservationDate), datepart(MONTH, ObservationDate),CountryRegion\n\n-- create a container called covidoutput in blob or adls container.\nCREATE EXTERNAL DATA SOURCE mycovidioutput WITH (\n    LOCATION = 'https://accsynapsestorage.blob.core.windows.net/covidoutput', CREDENTIAL = sqlondemand\n);\nGO\n\nCREATE EXTERNAL FILE FORMAT [ParquetFF] WITH (\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n);\nGO\n\nDrop external table covidaggrCETAS;\n\nCREATE EXTERNAL TABLE [dbo].[covidaggrCETAS] WITH (\n        LOCATION = 'covidParquet/',\n        DATA_SOURCE = [mycovidioutput],\n        FILE_FORMAT = [ParquetFF]\n) AS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'coviddata/covid_19_data.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION='2.0',\n        DATA_SOURCE = 'SqlOnDemandDemo',\n        FIRSTROW = 2\n    ) WITH (\n      SNo int,\n      ObservationDate varchar(50),\n      ProvinceState varchar(200),\n      CountryRegion varchar(200),\n      LastUpdate varchar(50),\n      Confirmed decimal(18,2),\n      Deaths decimal(18,2),\n      Recovered decimal(18,2)\n) AS [result];\n\nCREATE EXTERNAL TABLE [dbo].[covidaggrCETAS] WITH (\n        LOCATION = 'covidAggr/',\n        DATA_SOURCE = [mycovidioutput],\n        FILE_FORMAT = [ParquetFF]\n) AS\nSelect datepart(YEAR, ObservationDate) as year, datepart(MONTH, ObservationDate) as month, \nCountryRegion, \nsum(Confirmed) as Confirmed, sum(Deaths) as Deaths, sum(Recovered) as Recovered\n from covidview \ngroup by datepart(YEAR, ObservationDate), datepart(MONTH, ObservationDate),CountryRegion;\n\nUSE [coviddb];\nGO\n\nSELECT\n    *\nFROM covidaggrCETAS;\n\nSelect \nYear, Month, CountryRegion, Confirmed, Deaths, Recovered \nfrom covidaggrCETAS;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "coviddb",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dailaggrsql')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- type your sql script here, we now have intellisense\n\nDrop Table [wwi].[dailyaggr];\n\nCREATE TABLE [wwi].[dailyaggr]\n( \n\t[tsYear] [bigint]  NOT NULL,\n\t[tsMonth] [bigint]  NOT NULL,\n\t[tsDay] [bigint]  NULL,\n\t[tsHour] [bigint]  NULL,\n\t[avgFare] [real]  NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [tsYear] ),\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n\nSelect  * from [wwi].[dailyaggr];\n\nSelect  count(*) from [wwi].[dailyaggr];\n\n\nCREATE PROCEDURE dropdailyaggr\nAS\nDrop Table [wwi].[dailyaggr]\nGO\n\nexec dropdailyaggr",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "accsynapsepools",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dailyaggr')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "Drop Table [wwi].[dailyaggr];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "accsynapsepools",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nycdata')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- type your sql script here, we now have intellisense\nCreate database nyctaxi;\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK     'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n        FORMAT = 'parquet'\n    ) AS [result];\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK     'https://azureopendatastorage.blob.core.windows.net/nyctlc/green/puYear=*/puMonth=*/*.parquet',\n        FORMAT = 'parquet'\n    ) AS [result];\n\nuse nyctaxi;\nGO\n\nuse nyctaxi\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'xyxpojklnbgtyughd234!234$%';\n-- create credentials for containers in our demo storage account\nuse nyctaxi\nCREATE DATABASE SCOPED CREDENTIAL sqlondemand\nWITH IDENTITY='SHARED ACCESS SIGNATURE',  \nSECRET = '?sv=2019-12-12&ss=bfqt&srt=sco&sp=rwdlacupx&se=2021-10-08T20:03:10Z&st=2020-10-08T12:03:10Z&spr=https&sig=73FwbAOqT3VI6SQ%2FjX1E0CQDo0y7Sri8%2FdAdgOnGE8w%3D'\nGO\n\nuse nyctaxi\nCREATE EXTERNAL DATA SOURCE SqlOnDemandDemo1 WITH (\n    LOCATION = 'https://accsynapsestorage.blob.core.windows.net',\n    CREDENTIAL = sqlondemand\n);\n\nuse nyctaxi\n-- create a container called covidoutput in blob or adls container.\nCREATE EXTERNAL DATA SOURCE mycovidioutputyellow WITH (\n    LOCATION = 'https://accsynapsestorage.blob.core.windows.net/nyctaxiyellow', CREDENTIAL = sqlondemand\n);\nGO\n\nCREATE EXTERNAL DATA SOURCE mycovidioutputgreen WITH (\n    LOCATION = 'https://accsynapsestorage.blob.core.windows.net/nyctaxigreen', CREDENTIAL = sqlondemand\n);\nGO\n\nuse nyctaxi\nCREATE EXTERNAL FILE FORMAT [ParquetFF] WITH (\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n);\nGO\n\nuse nyctaxi\nCREATE EXTERNAL TABLE [dbo].[nycyellow] WITH (\n        LOCATION = 'nyctaxiyellow/',\n        DATA_SOURCE = [mycovidioutputyellow],\n        FILE_FORMAT = [ParquetFF]\n) AS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK     'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n        FORMAT = 'parquet'\n    ) AS [result];\n\n\nuse nyctaxi\nCREATE EXTERNAL TABLE [dbo].[nycgreen] WITH (\n        LOCATION = 'nyctaxigreen/',\n        DATA_SOURCE = [mycovidioutputgreen],\n        FILE_FORMAT = [ParquetFF]\n) AS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK     'https://azureopendatastorage.blob.core.windows.net/nyctlc/green/puYear=*/puMonth=*/*.parquet',\n        FORMAT = 'parquet'\n    ) AS [result];\n\n\n\nuse nyctaxi;\nGO\n\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK     'https://accsynapsestorage.blob.core.windows.net/synapseroot/nyctaxiyellow/*',\n        FORMAT = 'parquet'\n    ) AS [result];\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK     'https://accsynapsestorage.blob.core.windows.net/synapseroot/nyctaxigreen/*',\n        FORMAT = 'parquet'\n    ) AS [result];\n\n\nSELECT\n    count(*)\nFROM\n    OPENROWSET(\n        BULK     'https://accsynapsestorage.blob.core.windows.net/synapseroot/nyctaxiyellow/*',\n        FORMAT = 'parquet'\n    ) AS [result];\n\n\n\nSELECT\n    count(*)\nFROM\n    OPENROWSET(\n        BULK     'https://accsynapsestorage.blob.core.windows.net/synapseroot/nyctaxigreen/*',\n        FORMAT = 'parquet'\n    ) AS [result];\n\nSELECT\n    Top 2000 *\nFROM\n    OPENROWSET(\n        BULK     'https://accsynapsestorage.blob.core.windows.net/synapseroot/nyctaxiyellow/*',\n        FORMAT = 'parquet'\n    ) AS [result];\n\nSELECT\n    PuYear, PuMonth, sum(FareAmount) as FareAmount, sum(TotalAmount) as TotalAmount\nFROM\n    OPENROWSET(\n        BULK     'https://accsynapsestorage.blob.core.windows.net/synapseroot/nyctaxiyellow/*',\n        FORMAT = 'parquet'\n    ) AS [result] \n    Group by PuYear, PuMonth\n    Order by PuYear, PuMonth;\n\nSELECT\n    Top 10000 *\nFROM\n    OPENROWSET(\n        BULK     'https://accsynapsestorage.blob.core.windows.net/synapseroot/nyctaxiyellow/*',\n        FORMAT = 'parquet'\n    ) AS [result];\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK     'https://accsynapsestorage.blob.core.windows.net/synapseroot/nyctaxiyellow/*',\n        FORMAT = 'parquet'\n    ) AS [result];\n\nSELECT\n    distinct VendorID\nFROM\n    OPENROWSET(\n        BULK     'https://accsynapsestorage.blob.core.windows.net/synapseroot/nyctaxiyellow/*',\n        FORMAT = 'parquet'\n    ) AS [result];\n\nSELECT\n    distinct PaymentType\nFROM\n    OPENROWSET(\n        BULK     'https://accsynapsestorage.blob.core.windows.net/synapseroot/nyctaxiyellow/*',\n        FORMAT = 'parquet'\n    ) AS [result];\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK     'https://azureopendatastorage.blob.core.windows.net/censusdatacontainer/release/us_population_county/year=*/*.parquet',\n        FORMAT = 'parquet'\n    ) AS [result];\n\n\nuse nyctaxi\nDROP EXTERNAL DATA SOURCE uspopulation;\n\nuse nyctaxi\nCREATE EXTERNAL DATA SOURCE myuspopulation WITH (\n    LOCATION = 'https://accsynapsestorage.blob.core.windows.net/uspopulation', CREDENTIAL = sqlondemand\n);\nGO\n\nuse nyctaxi\nDROP EXTERNAL TABLE [dbo].[factpopulation];\n\nuse nyctaxi\nCREATE EXTERNAL TABLE [dbo].[factpopulation] WITH (\n        LOCATION = 'fact/',\n        DATA_SOURCE = [myuspopulation],\n        FILE_FORMAT = [ParquetFF]\n) AS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK     'https://azureopendatastorage.blob.core.windows.net/censusdatacontainer/release/us_population_county/year=*/*.parquet',\n        FORMAT = 'parquet'\n    ) AS [result];\n\n\nselect \n top 100 * \nuspopulation\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK     'https://accsynapsestorage.blob.core.windows.net/uspopulation/fact/*',\n        FORMAT = 'parquet'\n    ) AS [result];\n\n\nuse nyctaxi\nselect top 200 * from dbo.factpopulation;\n\nSELECT\n    StateName, CountyName, \n    Race, Sex,\n    sum(Population) as Population, \n    Avg(MinAge) as MinAge, \n    Max(MaxAge) as MaxAge\nFROM\n    dbo.factpopulation\n    Group by StateName, CountyName, Race, Sex\n    Order by StateName, CountyName, Race, Sex;\n\n\nSelect distinct StateName from dbo.factpopulation;\n\nCREATE EXTERNAL TABLE [dbo].[dimstate] WITH (\n        LOCATION = 'dimstate/',\n        DATA_SOURCE = [myuspopulation],\n        FILE_FORMAT = [ParquetFF]\n) AS\nSelect distinct StateName from dbo.factpopulation\n\nselect * from dbo.dimstate;\n\nCREATE EXTERNAL TABLE [dbo].[dimcountyname] WITH (\n        LOCATION = 'dimcountryname/',\n        DATA_SOURCE = [myuspopulation],\n        FILE_FORMAT = [ParquetFF]\n) AS\nSelect distinct CountyName from dbo.factpopulation\n\nCREATE EXTERNAL TABLE [dbo].[dimRace] WITH (\n        LOCATION = 'dimRace/',\n        DATA_SOURCE = [myuspopulation],\n        FILE_FORMAT = [ParquetFF]\n) AS\nSelect distinct Race from dbo.factpopulation\n\nCREATE EXTERNAL TABLE [dbo].[dimSex] WITH (\n        LOCATION = 'dimsex/',\n        DATA_SOURCE = [myuspopulation],\n        FILE_FORMAT = [ParquetFF]\n) AS\nSelect distinct Sex from dbo.factpopulation\n\nSelect * from dbo.dimstate\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "nyctaxi",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyctaxisql')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK     'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n        FORMAT = 'parquet'\n    ) AS [result];\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/serverlesscovid19sql')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [_c0]\n,[_c1]\n,[_c2]\n,[_c3]\n,[_c4]\n,[_c5]\n,[_c6]\n,[_c7]\n FROM [default].[dbo].[covid19]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "default",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03 Training NYC Taxi ONNX model')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {}
				},
				"metadata": {
					"kernelspec": {
						"name": "SQL",
						"display_name": "SQL"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"## Predict-New-York-Taxi-Trip-Amount\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Read data from open dataset"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.opendatasets import NycTlcGreen\r\n",
							"import pandas as pd\r\n",
							"from datetime import datetime\r\n",
							"from dateutil.relativedelta import relativedelta\r\n",
							"\r\n",
							"green_taxi_df = pd.DataFrame([])\r\n",
							"\r\n",
							"start = datetime.strptime(\"1/1/2015\",\"%m/%d/%Y\")\r\n",
							"end = datetime.strptime(\"1/31/2015\",\"%m/%d/%Y\")\r\n",
							"\r\n",
							"for sample_month in range(12):\r\n",
							"    temp_df_green = NycTlcGreen(start + relativedelta(months=sample_month), end + relativedelta(months=sample_month)) \\\r\n",
							"        .to_pandas_dataframe()\r\n",
							"    green_taxi_df = green_taxi_df.append(temp_df_green.sample(2000))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"green_taxi_df.head(10)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Data exploration and feature engineering\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"def build_time_features(vector):\n",
							"    pickup_datetime = vector[0]\n",
							"    month_num = pickup_datetime.month\n",
							"    day_of_month = pickup_datetime.day\n",
							"    day_of_week = pickup_datetime.weekday()\n",
							"    day_of_hour = pickup_datetime.hour\n",
							"    return pd.Series((month_num, day_of_month, day_of_week, day_of_hour))\n",
							"\n",
							"green_taxi_df[[\"month_num\", \"day_of_month\",\"day_of_week\", \"day_of_hour\"]] = green_taxi_df[[\"lpepPickupDatetime\"]].apply(build_time_features, axis=1)\n",
							"\n",
							"green_taxi_df.head(10)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"source": [
							"green_taxi_df.columns"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"columns_to_remove = [\"lpepPickupDatetime\", \"lpepDropoffDatetime\", \"puLocationId\", \"doLocationId\", \"extra\", \"mtaTax\",\n",
							"                     \"improvementSurcharge\", \"tollsAmount\", \"ehailFee\", \"tripType\", \"rateCodeID\", \n",
							"                     \"storeAndFwdFlag\", \"paymentType\", \"fareAmount\", \"tipAmount\",\"puYear\", \"puMonth\"\n",
							"                    ]\n",
							"for col in columns_to_remove:\n",
							"    green_taxi_df.pop(col)\n",
							"    \n",
							"green_taxi_df.head(5)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"green_taxi_df.describe()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"source": [
							"final_df = green_taxi_df.query(\"pickupLatitude>=40.53 and pickupLatitude<=40.88\")\r\n",
							"final_df = final_df.query(\"pickupLongitude>=-74.09 and pickupLongitude<=-73.72\")\r\n",
							"final_df = final_df.query(\"tripDistance>=0.25 and tripDistance<31\")\r\n",
							"final_df = final_df.query(\"passengerCount>0 and totalAmount>0\")\r\n",
							"\r\n",
							"columns_to_remove_for_training = [\"pickupLongitude\", \"pickupLatitude\", \"dropoffLongitude\", \"dropoffLatitude\"]\r\n",
							"for col in columns_to_remove_for_training:\r\n",
							"    final_df.pop(col)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"final_df.describe()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"passengerCount"
									],
									"values": [
										"vendorID"
									],
									"yLabel": "vendorID",
									"xLabel": "passengerCount",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"vendorID\":{\"1\":1487,\"2\":122,\"3\":44,\"4\":7,\"5\":90,\"6\":40}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"display(final_df)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"source": [
							"## AutoML setup and running experiment\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import azureml.core\n",
							"import logging\n",
							"from azureml.core.workspace import Workspace\n",
							"from azureml.core import Workspace\n",
							"from azureml.core.experiment import Experiment\n",
							"from azureml.train.automl import AutoMLConfig\n",
							"import os\n",
							"\n",
							"subscription_id = os.getenv(\"SUBSCRIPTION_ID\", default=\"c46a9435-c957-4e6c-a0f4-b9a597984773\")\n",
							"resource_group = os.getenv(\"RESOURCE_GROUP\", default=\"mlops\")\n",
							"workspace_name = os.getenv(\"WORKSPACE_NAME\", default=\"mlopsdev\")\n",
							"workspace_region = os.getenv(\"WORKSPACE_REGION\", default=\"Central US\")\n",
							"\n",
							"ws = Workspace(subscription_id = subscription_id, resource_group = resource_group, workspace_name = workspace_name)\n",
							"ws.write_config()"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"source": [
							"from sklearn.model_selection import train_test_split\r\n",
							"\r\n",
							"y_df = final_df.pop(\"totalAmount\")\r\n",
							"x_df = final_df\r\n",
							"\r\n",
							"x_train, x_test, y_train, y_test = train_test_split(x_df, y_df, test_size=0.2, random_state=223)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"source": [
							"import logging\n",
							"\n",
							"automl_settings = {\n",
							"    \"iteration_timeout_minutes\": 2,\n",
							"    \"iterations\": 5,\n",
							"    \"primary_metric\": 'spearman_correlation',\n",
							"    \"preprocess\": True,\n",
							"    \"verbosity\": logging.INFO,\n",
							"    \"n_cross_validations\": 2\n",
							"}"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.train.automl import AutoMLConfig\n",
							"\n",
							"label = \"totalAmount\"\n",
							"\n",
							"automl_config = AutoMLConfig(task='regression',\n",
							"                             debug_log='automl_errors_5.log',\n",
							"#                             compute_target = AMLCompute,\n",
							"                             X=x_train,\n",
							"                             y=y_train,\n",
							"#                             label_column_name = label,\n",
							"                             enable_onnx_compatible_models=True,\n",
							"                             **automl_settings)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.core.experiment import Experiment\n",
							"experiment = Experiment(ws, \"greentaxi-experiment1\")\n",
							"local_run = experiment.submit(automl_config, show_output=True)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Retrieve the best onnx model\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"best_run, onnx_mdl = local_run.get_output(return_onnx_model=True) "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.automl.runtime.onnx_convert.onnx_converter import OnnxConverter\n",
							"onnx_fl_path = \"./taxi_best_model.onnx\"\n",
							"OnnxConverter.save_onnx_model(onnx_mdl, onnx_fl_path) #save the best onnx model"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"source": [
							"with open(\"taxi_best_model.onnx\", \"wb\") as f:\n",
							"    f.write(onnx_mdl.SerializeToString())"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"source": [
							"import os, uuid\n",
							"from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient, __version__\n",
							"\n",
							"try:\n",
							"    print(\"Azure Blob storage v\" + __version__ + \" - Python quickstart sample\")\n",
							"    # Quick start code goes here\n",
							"except Exception as ex:\n",
							"    print('Exception:')\n",
							"    print(ex)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Export ONNX model\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import BlobServiceClient\n",
							"from azure.storage.blob import BlobClient\n",
							"\n",
							"connection_string = \"DefaultEndpointsProtocol=https;AccountName=accsynapsestorage;AccountKey=ex1PbXf87GVGWh2OkZnBETN0wDCmlgzHDGpPR4+E/+DbJ3MYSeJHgec5lIgOkGOp9m13qVa7dWRXS52CTeRxRQ==;EndpointSuffix=core.windows.net\"\n",
							"service = BlobServiceClient.from_connection_string(conn_str=connection_string)\n",
							"\n",
							"blob = BlobClient.from_connection_string(conn_str=connection_string, container_name=\"taximodel\", blob_name=\"taxiscore/taxi_best_model.onnx\")\n",
							"\n",
							"with open(\"./taxi_best_model.onnx\", \"rb\") as data:\n",
							"    blob.upload_blob(data,overwrite=True)"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import *"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"source": [
							"# Create the BlockBlockService that the system uses to call the Blob service for the storage account.\n",
							"block_blob_service = BlockBlobService(\n",
							"    account_name='accsynapsestorage', account_key='ex1PbXf87GVGWh2OkZnBETN0wDCmlgzHDGpPR4+E/+DbJ3MYSeJHgec5lIgOkGOp9m13qVa7dWRXS52CTeRxRQ==')\n",
							"\n",
							"# Create a container called 'quickstartblobs'.\n",
							"container_name = 'taximodel'\n",
							"block_blob_service.create_container(container_name)"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"source": [
							"# Upload the created file, use local_file_name for the blob name.\n",
							"#block_blob_service.create_blob_from_path(\n",
							"#    container_name, local_file_name, full_path_to_file)\n",
							"\n",
							"filename = \"./taxi_best_model.onnx\"\n",
							"#block_blob_service.create_blob_from_path(container_name,\"taxi_best_model.onnx\",filename)\n",
							"\n",
							"#with open(\"./taxi_best_model.onnx\", \"rb\") as data:\n",
							"#    block_blob_service.create_blob_from_path(data,overwrite=True)\n",
							"\n",
							"with open(\"./taxi_best_model.onnx\", \"rb\") as data:\n",
							"    block_blob_service.create_blob_from_path(container_name,\"taxi_best_model.onnx\",filename)"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"source": [
							"\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04 Analyze data with Scala')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {}
				},
				"metadata": {
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"## Read Data From SQL Pool\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"val df_City = spark.read.sqlanalytics(\"accsynapsepools.wwi.DimCity\") \n",
							"val df_FactOrder = spark.read.sqlanalytics(\"accsynapsepools.wwi.FactOrder\")\n",
							" // df.show(10)\n",
							" //https://github.com/prlangad/AnalyticsPipeline"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"df_City.createOrReplaceTempView(\"city\")\n",
							"df_FactOrder.createOrReplaceTempView(\"factOrder\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data Exploration and Analysis\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"val df = spark.sql(\"select * from factOrder\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Use of Magic commands\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"WWICityID"
									],
									"values": [
										"CityKey"
									],
									"yLabel": "CityKey",
									"xLabel": "WWICityID",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"CityKey\":{\"154\":115751,\"185\":115464,\"267\":115758,\"349\":116031,\"439\":115765,\"517\":113993,\"570\":115772,\"595\":115471,\"600\":103794,\"662\":115779,\"807\":115786,\"882\":116038,\"962\":114000,\"995\":115793,\"1066\":115478,\"1197\":115800,\"1269\":115807,\"1282\":108326,\"1363\":114007,\"1406\":116045,\"1476\":115814,\"1509\":103801,\"1543\":115485,\"1621\":115821,\"1665\":114014,\"1813\":115828,\"1839\":11883,\"1846\":11890,\"1853\":11897,\"1860\":11904,\"1867\":11911,\"1918\":116052,\"1942\":113510,\"2034\":108333,\"2064\":115835,\"2086\":115492,\"2168\":113517,\"2288\":116059,\"2328\":115842,\"2384\":113524,\"2469\":11757,\"2476\":11764,\"2483\":11771,\"2490\":11778,\"2497\":11785,\"2562\":115849,\"2566\":103808,\"2578\":113531,\"2611\":116066,\"2630\":115499,\"2657\":114021,\"2733\":115856,\"2874\":116073,\"2903\":113538,\"2921\":30181,\"2928\":30188,\"2935\":146058,\"2942\":30202,\"2949\":30209,\"2972\":115870,\"3076\":113545,\"3085\":115877,\"3191\":113552,\"3211\":114028,\"3249\":116080,\"3343\":115884,\"3372\":113559,\"3414\":115506,\"3474\":115891,\"3494\":108340,\"3519\":114035,\"3600\":115898,\"3608\":113566,\"3676\":116087,\"3772\":115905,\"3783\":103815,\"3860\":113573,\"3874\":114042,\"4006\":115912,\"4012\":116094,\"4071\":113580,\"4195\":108347,\"4207\":115513,\"4218\":113587,\"4265\":114049,\"4349\":113594,\"4449\":115919,\"4484\":116101,\"4548\":11918,\"4555\":11925,\"4562\":11932,\"4569\":11939,\"4611\":12016,\"4618\":12037,\"4625\":12044,\"4640\":113601,\"4646\":114056,\"4683\":115520,\"4700\":115926,\"4832\":113608,\"4883\":115933,\"4934\":115940,\"4986\":115947,\"5052\":116108,\"5060\":115954,\"5069\":113615,\"5089\":11792,\"5096\":11799,\"5103\":11806,\"5108\":114063,\"5110\":11813,\"5157\":103822,\"5228\":115961,\"5235\":115527,\"5323\":115968,\"5429\":115975,\"5480\":113622,\"5533\":114070,\"5557\":115982,\"5581\":116115,\"5625\":115989,\"5640\":113629,\"5687\":108354,\"5691\":11981,\"5698\":11988,\"5704\":115534,\"5705\":11995,\"5712\":12002,\"5719\":12009,\"5799\":114077,\"5936\":113636,\"6018\":12079,\"6025\":12086,\"6032\":12093,\"6039\":12100,\"6046\":12107,\"6150\":116122,\"6227\":114084,\"6281\":103829,\"6299\":30993,\"6306\":31000,\"6313\":31007,\"6320\":31014,\"6327\":31021,\"6353\":113643,\"6377\":115541,\"6556\":113650,\"6573\":113713,\"6776\":113720,\"6831\":114091,\"6833\":113657,\"6879\":30447,\"6887\":30454,\"6894\":30461,\"6901\":30468,\"6908\":30475,\"6950\":113727,\"7022\":113664,\"7142\":113734,\"7179\":113671,\"7215\":114098,\"7262\":113741,\"7366\":108361,\"7417\":114105,\"7433\":113678,\"7454\":103836,\"7524\":115548,\"7553\":113748,\"7638\":113685,\"7673\":113755,\"7804\":113762,\"7862\":12457,\"7869\":128019,\"7876\":12471,\"7883\":12478,\"7911\":113769,\"7920\":114112,\"8031\":113776,\"8069\":113692,\"8106\":114119,\"8196\":115562,\"8239\":11946,\"8246\":11953,\"8253\":11960,\"8260\":11967,\"8267\":11974,\"8287\":113699,\"8290\":113783,\"8315\":12023,\"8322\":12030,\"8390\":113706,\"8481\":113790,\"8563\":104690,\"8579\":115569,\"8729\":12051,\"8736\":12058,\"8742\":104697,\"8743\":12065,\"8747\":103843,\"8750\":12072,\"8758\":11820,\"8765\":11827,\"8766\":113797,\"8767\":114126,\"8772\":11834,\"8779\":11841,\"8786\":11848,\"8806\":113804,\"8912\":104704,\"8939\":108368,\"8967\":113811,\"9025\":115576,\"9040\":30720,\"9047\":30727,\"9054\":30734,\"9061\":30741,\"9068\":30748,\"9084\":104711,\"9101\":113818,\"9133\":114133,\"9208\":113825,\"9333\":104718,\"9354\":113832,\"9381\":115583,\"9484\":104725,\"9564\":113839,\"9590\":114140,\"9723\":113846,\"9843\":104732,\"9848\":108375,\"9860\":12485,\"9867\":12492,\"9869\":113853,\"9874\":12499,\"9881\":12506,\"9888\":12513,\"9957\":103850,\"9981\":114147,\"10030\":115590,\"10066\":113860,\"10097\":12520,\"10104\":12527,\"10111\":12534,\"10118\":12541,\"10125\":12548,\"10135\":104739,\"10197\":113867,\"10217\":114154,\"10226\":113874,\"10274\":113881,\"10394\":11855,\"10401\":11862,\"10408\":11869,\"10415\":11876,\"10453\":114161,\"10461\":104746,\"10566\":104753,\"10582\":113888,\"10611\":12114,\"10618\":12121,\"10625\":12128,\"10632\":12135,\"10639\":12142,\"10820\":113895,\"10845\":104760,\"10852\":115597,\"10992\":114168,\"11015\":104767,\"11031\":103857,\"11064\":113902,\"11072\":104774,\"11097\":108382,\"11302\":104781,\"11354\":113909,\"11470\":104788,\"11512\":113916,\"11662\":104795,\"11674\":113923,\"11718\":114175,\"11804\":113930,\"11805\":115604,\"11820\":104802,\"11883\":113937,\"11979\":12555,\"11986\":12562,\"11993\":12569,\"12000\":12576,\"12007\":12583,\"12033\":104809,\"12037\":113944,\"12100\":114182,\"12252\":104816,\"12301\":113951,\"12325\":103864,\"12342\":115611,\"12395\":104823,\"12431\":114189,\"12448\":113958,\"12566\":104830,\"12646\":113965,\"12706\":114196,\"12845\":104837,\"12873\":113972,\"12908\":115618,\"12995\":114203,\"13017\":104844,\"13100\":12590,\"13107\":12597,\"13114\":12604,\"13117\":104851,\"13121\":12611,\"13128\":12618,\"13176\":113979,\"13267\":115625,\"13272\":104410,\"13320\":114210,\"13327\":104858,\"13356\":113986,\"13455\":103871,\"13461\":104417,\"13466\":108389,\"13472\":114259,\"13546\":104865,\"13573\":104424,\"13597\":114217,\"13668\":12625,\"13675\":12632,\"13682\":12639,\"13683\":104872,\"13689\":12646,\"13690\":115632,\"13734\":114266,\"13779\":104879,\"13903\":114273,\"13936\":108396,\"13941\":104431,\"13943\":104886,\"14009\":114224,\"14087\":114280,\"14088\":103878,\"14174\":114287,\"14245\":104438,\"14311\":114231,\"14312\":104893,\"14329\":115639,\"14421\":114294,\"14450\":104445,\"14506\":103885,\"14562\":12653,\"14569\":12660,\"14576\":12667,\"14583\":12674,\"14590\":12681,\"14602\":104900,\"14610\":115646,\"14786\":114301,\"14787\":108403,\"14816\":104907,\"14883\":104452,\"14961\":114238,\"15011\":104914,\"15074\":114308,\"15077\":115653,\"15248\":114315,\"15258\":104921,\"15307\":104459,\"15335\":114245,\"15408\":114322,\"15522\":104928,\"15531\":103892,\"15585\":114329,\"15711\":115660,\"15747\":104935,\"15819\":114336,\"15894\":11687,\"15901\":11694,\"15908\":11701,\"15915\":11708,\"15922\":11715,\"15939\":104466,\"15951\":104942,\"16034\":114252,\"16061\":104949,\"16218\":104956,\"16366\":104963,\"16372\":104473,\"16389\":115667,\"16570\":104970,\"16615\":104480,\"16616\":12688,\"16623\":12695,\"16627\":108410,\"16630\":12702,\"16637\":12709,\"16644\":12716,\"16715\":115674,\"16806\":103899,\"16957\":104487,\"17024\":108417,\"17111\":115681,\"17163\":104494,\"17385\":104501,\"17468\":12723,\"17475\":12730,\"17482\":12737,\"17489\":12744,\"17496\":12751,\"17539\":115688,\"17696\":104508,\"17910\":115695,\"17954\":104977,\"18039\":104515,\"18084\":109201,\"18234\":109208,\"18256\":104522,\"18309\":12758,\"18316\":12765,\"18323\":12772,\"18330\":12779,\"18335\":115702,\"18337\":12786,\"18360\":109215,\"18452\":109222,\"18595\":109229,\"18607\":104984,\"18648\":103906,\"18719\":109236,\"18745\":104529,\"18976\":104536,\"19005\":115709,\"19112\":109243,\"19114\":12793,\"19121\":12800,\"19122\":104543,\"19152\":104991,\"19340\":109250,\"19389\":104550,\"19515\":109257,\"19530\":104998,\"19594\":103913,\"19654\":109264,\"19711\":104557,\"19795\":105005,\"19864\":109271,\"19875\":115716,\"19938\":104564,\"20004\":109103,\"20021\":109110,\"20166\":109117,\"20168\":109278,\"20223\":108424,\"20248\":11561,\"20255\":11568,\"20262\":11575,\"20269\":11582,\"20318\":104571,\"20366\":109285,\"20413\":109124,\"20491\":109131,\"20492\":103920,\"20589\":109292,\"20629\":115723,\"20733\":109138,\"20790\":104578,\"20831\":109299,\"20903\":109306,\"20963\":109145,\"21026\":108431,\"21057\":104585,\"21081\":109313,\"21086\":11589,\"21093\":11596,\"21100\":11603,\"21107\":11610,\"21114\":11617,\"21311\":109320,\"21314\":109152,\"21396\":115730,\"21557\":109159,\"21577\":12352,\"21578\":104592,\"21584\":12359,\"21591\":12366,\"21597\":109327,\"21598\":12373,\"21605\":12380,\"21761\":115737,\"21765\":109334,\"21817\":109166,\"21853\":104599,\"21857\":109341,\"21918\":103927,\"21938\":109173,\"21959\":11624,\"21966\":11631,\"21973\":11638,\"21980\":11645,\"21987\":11652,\"22025\":109348,\"22199\":109180,\"22220\":115744,\"22332\":109355,\"22372\":104606,\"22474\":109362,\"22496\":109187,\"22520\":12317,\"22525\":12387,\"22532\":12394,\"22539\":12401,\"22546\":12408,\"22553\":12415,\"22575\":104613,\"22576\":109194,\"22663\":109369,\"22785\":108438,\"22795\":109376,\"22844\":11659,\"22851\":11666,\"22858\":11673,\"22865\":11680,\"22903\":104620,\"23085\":109383,\"23118\":103934,\"23120\":104627,\"23234\":109390,\"23286\":108445,\"23422\":12422,\"23429\":12429,\"23436\":12436,\"23443\":12443,\"23450\":12450,\"23484\":109397,\"23651\":104634,\"23680\":109404,\"23811\":104046,\"23948\":103941,\"24020\":104641,\"24265\":103948,\"24308\":104053,\"24454\":104648,\"24615\":108452,\"24629\":12149,\"24636\":12156,\"24643\":12163,\"24650\":12170,\"24657\":12177,\"24661\":12247,\"24668\":12254,\"24675\":12261,\"24682\":12268,\"24689\":12275,\"24747\":103955,\"24830\":108459,\"24933\":104060,\"25039\":104655,\"25314\":104067,\"25716\":103962,\"25717\":104662,\"25826\":12184,\"25834\":12191,\"25841\":12198,\"25848\":12205,\"25855\":12212,\"25860\":12282,\"25866\":104074,\"25867\":12289,\"25874\":12296,\"25881\":12303,\"25888\":12310,\"25897\":12324,\"25904\":12331,\"25911\":12338,\"25918\":12345,\"26105\":108466,\"26230\":104669,\"26338\":104081,\"26661\":104676,\"26853\":113475,\"26909\":104088,\"26955\":108830,\"26972\":12219,\"26979\":12226,\"26986\":12233,\"26994\":12240,\"26996\":113482,\"27041\":108837,\"27045\":104095,\"27051\":104683,\"27092\":113489,\"27136\":104102,\"27147\":103969,\"27163\":108844,\"27189\":108473,\"27203\":113496,\"27284\":108851,\"27360\":113503,\"27390\":11722,\"27397\":11729,\"27404\":11736,\"27411\":11743,\"27418\":11750,\"27444\":104109,\"27462\":108578,\"27469\":108858,\"27601\":108585,\"27660\":108865,\"27760\":108872,\"27865\":108592,\"27924\":104116,\"28090\":108480,\"28143\":108599,\"28148\":108879,\"28237\":104123,\"28278\":108886,\"28285\":108893,\"28403\":108606,\"28504\":108900,\"28521\":104130,\"28579\":108907,\"28768\":108613,\"28799\":223986,\"28827\":113307,\"28831\":104137,\"28850\":103976,\"28984\":224000,\"29012\":113314,\"29032\":108620,\"29046\":224014,\"29154\":104144,\"29196\":108487,\"29241\":113321,\"29291\":224028,\"29335\":113230,\"29349\":104151,\"29419\":224042,\"29423\":108627,\"29599\":113328,\"29608\":108634,\"29614\":104158,\"29619\":224056,\"29770\":113335,\"29799\":224070,\"29806\":104165,\"29978\":113237,\"29979\":108641,\"30107\":108494,\"30117\":113342,\"30232\":103983,\"30238\":104172,\"30264\":224084,\"30344\":224098,\"30361\":224112,\"30378\":224126,\"30399\":224140,\"30415\":224154,\"30435\":113244,\"30439\":224168,\"30520\":104179,\"30553\":224182,\"30582\":224196,\"30599\":224210,\"30614\":108648,\"30659\":113349,\"30686\":224224,\"30802\":113356,\"30857\":104186,\"30916\":103990,\"30929\":108655,\"30930\":224238,\"30988\":104193,\"31006\":113251,\"31024\":108662,\"31037\":224252,\"31191\":104200,\"31236\":224266,\"31266\":104305,\"31268\":113363,\"31280\":108501,\"31404\":113370,\"31422\":104312,\"31471\":104319,\"31485\":224280,\"31490\":108669,\"31601\":104207,\"31605\":224294,\"31629\":113258,\"31651\":104326,\"31707\":113377,\"31736\":108676,\"31742\":224308,\"31768\":104333,\"31821\":224322,\"31826\":104340,\"31906\":113265,\"31916\":108683,\"31959\":224336,\"31999\":104347,\"32012\":104214,\"32077\":224350,\"32109\":104354,\"32112\":108508,\"32141\":113384,\"32153\":115261,\"32214\":104361,\"32231\":115268,\"32247\":104221,\"32278\":108690,\"32311\":104368,\"32345\":104228,\"32377\":113391,\"32429\":104375,\"32460\":108697,\"32525\":113398,\"32528\":104382,\"32539\":115275,\"32559\":104235,\"32656\":103997,\"32664\":113272,\"32690\":104242,\"32761\":104389,\"32776\":108704,\"32779\":113405,\"32801\":30048,\"32808\":30055,\"32815\":30062,\"32822\":30069,\"32829\":30076,\"32834\":108515,\"32836\":30083,\"32842\":104396,\"32843\":30090,\"32850\":30097,\"32857\":30104,\"32864\":30111,\"32866\":115282,\"32871\":30118,\"32878\":30125,\"32879\":113412,\"32885\":30132,\"32892\":30139,\"32899\":30146,\"32900\":113279,\"32906\":30153,\"32913\":30160,\"32916\":104249,\"32920\":30167,\"32927\":30174,\"32948\":104403,\"32969\":30216,\"32976\":30223,\"32983\":30230,\"32990\":30237,\"32997\":30244,\"33004\":30251,\"33011\":30258,\"33018\":30265,\"33025\":30272,\"33032\":30279,\"33039\":30286,\"33046\":30293,\"33049\":113419,\"33053\":30300,\"33060\":30307,\"33067\":30314,\"33074\":30321,\"33081\":30328,\"33088\":30335,\"33095\":30342,\"33102\":30349,\"33109\":30356,\"33116\":30363,\"33119\":104004,\"33123\":30370,\"33130\":30377,\"33137\":115289,\"33138\":30384,\"33145\":30391,\"33152\":30398,\"33159\":30405,\"33166\":30412,\"33173\":30419,\"33180\":30426,\"33188\":30433,\"33192\":113426,\"33195\":30440,\"33237\":30482,\"33244\":30489,\"33251\":30496,\"33258\":30503,\"33265\":30510,\"33267\":108711,\"33272\":30517,\"33279\":115296,\"33281\":30524,\"33288\":30531,\"33296\":30538,\"33302\":104256,\"33303\":30545,\"33310\":30552,\"33317\":30559,\"33324\":30566,\"33331\":30573,\"33338\":30580,\"33345\":30587,\"33352\":30594,\"33356\":115303,\"33359\":30601,\"33366\":30608,\"33374\":30615,\"33381\":30622,\"33388\":30629,\"33392\":108522,\"33395\":30636,\"33402\":30643,\"33410\":30650,\"33417\":138906,\"33424\":30664,\"33431\":30671,\"33438\":30678,\"33440\":113286,\"33445\":30685,\"33452\":30692,\"33459\":30699,\"33466\":30706,\"33473\":30713,\"33481\":113433,\"33484\":108718,\"33508\":104263,\"33515\":30755,\"33522\":30762,\"33529\":30769,\"33536\":30776,\"33543\":30783,\"33550\":30790,\"33557\":30797,\"33564\":30804,\"33569\":115310,\"33571\":30811,\"33578\":30818,\"33586\":30825,\"33593\":30832,\"33600\":30839,\"33607\":30846,\"33614\":30853,\"33621\":30860,\"33628\":30867,\"33635\":30874,\"33642\":30881,\"33649\":30888,\"33656\":30895,\"33663\":30902,\"33670\":30909,\"33677\":30916,\"33684\":30923,\"33691\":30930,\"33698\":30937,\"33705\":30944,\"33713\":30951,\"33720\":30958,\"33726\":115317,\"33727\":30965,\"33734\":30972,\"33741\":30979,\"33742\":108725,\"33748\":30986,\"33751\":104011,\"33799\":115324,\"33809\":108256,\"33943\":113440,\"33958\":113293,\"33976\":115331,\"33983\":108732,\"34005\":31028,\"34012\":31035,\"34019\":31042,\"34026\":31049,\"34033\":31056,\"34040\":31063,\"34047\":31070,\"34054\":31077,\"34060\":113447,\"34061\":31084,\"34068\":31091,\"34075\":31098,\"34077\":104270,\"34082\":31105,\"34089\":31112,\"34096\":31119,\"34103\":31126,\"34110\":31133,\"34117\":31140,\"34124\":31147,\"34131\":31154,\"34138\":31161,\"34145\":31168,\"34146\":115338,\"34152\":31175,\"34159\":31182,\"34166\":31189,\"34173\":31196,\"34180\":31203,\"34183\":108263,\"34187\":31210,\"34194\":31217,\"34201\":31224,\"34208\":31231,\"34215\":31238,\"34222\":31245,\"34238\":115345,\"34251\":108739,\"34303\":113300,\"34307\":113454,\"34356\":115352,\"34382\":104277,\"34473\":115359,\"34551\":108746,\"34580\":113461,\"34602\":104284,\"34609\":115366,\"34613\":108270,\"34685\":115373,\"34799\":113468,\"34803\":108753,\"34805\":104018,\"34822\":108277,\"34946\":108760,\"35011\":115380,\"35045\":104291,\"35046\":115387,\"35157\":108767,\"35165\":104298,\"35227\":115394,\"35252\":108529,\"35346\":108284,\"35389\":115401,\"35476\":108774,\"35485\":115408,\"35742\":115415,\"35827\":108781,\"35877\":108291,\"35897\":108536,\"36035\":115422,\"36080\":104025,\"36129\":108788,\"36284\":115429,\"36462\":108543,\"36533\":115436,\"36630\":108795,\"36662\":108550,\"36723\":108298,\"36747\":115443,\"36891\":115450,\"36923\":108557,\"37030\":104032,\"37123\":115457,\"37158\":108802,\"37178\":108305,\"37346\":108564,\"37379\":115996,\"37428\":108312,\"37569\":116003,\"37579\":108809,\"37724\":116010,\"37770\":108816,\"37811\":108571,\"37815\":104039,\"37987\":108319,\"38038\":116017,\"38052\":108823,\"38107\":116024}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							}
						},
						"source": [
							"%%sql \n",
							"SELECT * FROM city"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Join Data\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 2,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"StateProvince"
									],
									"values": [
										"TotalOrders"
									],
									"yLabel": "TotalOrders",
									"xLabel": "StateProvince",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"TotalOrders\":{\"California\":484498,\"Florida\":298035,\"Minnesota\":271092,\"Missouri\":255080,\"New Jersey\":270617,\"New Mexico\":257567,\"New York\":470182,\"Ohio\":302124,\"Pennsylvania\":531114,\"Texas\":651960}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"val df = (spark.sql(\"\"\"SELECT city.StateProvince, SUM(Quantity) as TotalOrders \n",
							"                    FROM factorder \n",
							"                    JOIN  city on city.CityKey=factorder.CityKey \n",
							"                    group by city.StateProvince \n",
							"                    order by SUM(Quantity) desc \"\"\"))\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Write result to ADLS Gen2 in Parquet format\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Primary storage info\n",
							"val account_name = \"accsynapsestorage\" // fill in your primary account name\n",
							"val container_name = \"curateddata\" // fill in your container name\n",
							"val relative_path = \"ordersumamtion\" // fill in your relative folder path\n",
							"\n",
							"val adls_path = f\"abfss://$container_name@$account_name.dfs.core.windows.net/$relative_path/\"\n",
							"print(\"Primary storage account path: \" + adls_path)\n",
							"val parquet_path = adls_path + \"OrdersByState\"\n",
							"df.write.mode(\"Overwrite\").parquet(parquet_path)\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AMLtest1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"blob_account_name = \"azureopendatastorage\"\n",
							"blob_container_name = \"nyctlc\"\n",
							"blob_relative_path = \"yellow\"\n",
							"blob_sas_token = r\"\""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# Allow Spark to read from Blob remotely\n",
							"wasbs_path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path)\n",
							"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),blob_sas_token)\n",
							"\n",
							"# Spark read parquet, note that it won't load any data yet by now\n",
							"df = spark.read.parquet(wasbs_path)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"# Create an ingestion filter\n",
							"start_date = '2015-01-01 00:00:00'\n",
							"end_date = '2015-12-31 00:00:00'\n",
							"\n",
							"filtered_df = df.filter('tpepPickupDateTime > \"' + start_date + '\" and tpepPickupDateTime < \"' + end_date + '\"')\n",
							"\n",
							"filtered_df.describe().show()"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"source": [
							"from datetime import datetime\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"# To make development easier, faster and less expensive down sample for now\n",
							"sampled_taxi_df = filtered_df.sample(True, 0.001, seed=1234)\n",
							"\n",
							"taxi_df = sampled_taxi_df.select('vendorID', 'passengerCount', 'tripDistance',  'startLon', 'startLat', 'endLon' \\\n",
							"                                , 'endLat', 'paymentType', 'fareAmount', 'tipAmount'\\\n",
							"                                , column('puMonth').alias('month_num') \\\n",
							"                                , date_format('tpepPickupDateTime', 'hh').alias('hour_of_day')\\\n",
							"                                , date_format('tpepPickupDateTime', 'EEEE').alias('day_of_week')\\\n",
							"                                , dayofmonth(col('tpepPickupDateTime')).alias('day_of_month')\n",
							"                                ,(unix_timestamp(col('tpepDropoffDateTime')) - unix_timestamp(col('tpepPickupDateTime'))).alias('trip_time'))\\\n",
							"                        .filter((sampled_taxi_df.passengerCount > 0) & (sampled_taxi_df.passengerCount < 8)\\\n",
							"                                & (sampled_taxi_df.tipAmount >= 0)\\\n",
							"                                & (sampled_taxi_df.fareAmount >= 1) & (sampled_taxi_df.fareAmount <= 250)\\\n",
							"                                & (sampled_taxi_df.tipAmount < sampled_taxi_df.fareAmount)\\\n",
							"                                & (sampled_taxi_df.tripDistance > 0) & (sampled_taxi_df.tripDistance <= 200)\\\n",
							"                                & (sampled_taxi_df.rateCodeId <= 5)\\\n",
							"                                & (sampled_taxi_df.paymentType.isin({\"1\", \"2\"})))\n",
							"taxi_df.show(10)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"# Random split dataset using spark, convert Spark to Pandas\n",
							"training_data, validation_data = taxi_df.randomSplit([0.8,0.2], 223)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.core import Workspace\n",
							"\n",
							"# Enter your workspace subscription, resource group, name, and region.\n",
							"subscription_id = \"c46a9435-c957-4e6c-a0f4-b9a597984773\" #you should be owner or contributor\n",
							"resource_group = \"mlops\" #you should be owner or contributor\n",
							"workspace_name = \"mlopsdev\" #your workspace name\n",
							"#workspace_region = \"<enter workspace region>\" #your region\n",
							"\n",
							"ws = Workspace(workspace_name = workspace_name,\n",
							"               subscription_id = subscription_id,\n",
							"               resource_group = resource_group)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"import pandas \n",
							"from azureml.core import Dataset\n",
							"\n",
							"# Get the AML Default Datastore\n",
							"datastore = ws.get_default_datastore()\n",
							"training_pd = training_data.toPandas().to_csv('training_pd.csv', index=False)\n",
							"\n",
							"# Convert into AML Tabular Dataset\n",
							"datastore.upload_files(files = ['training_pd.csv'],\n",
							"                       target_path = 'train-dataset/tabular/',\n",
							"                       overwrite = True,\n",
							"                       show_progress = True)\n",
							"dataset_training = Dataset.Tabular.from_delimited_files(path = [(datastore, 'train-dataset/tabular/training_pd.csv')])"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"import logging\n",
							"\n",
							"automl_settings = {\n",
							"    \"iteration_timeout_minutes\": 10,\n",
							"    \"experiment_timeout_minutes\": 30,\n",
							"    \"enable_early_stopping\": True,\n",
							"    \"primary_metric\": 'r2_score',\n",
							"    \"featurization\": 'auto',\n",
							"    \"verbosity\": logging.INFO,\n",
							"    \"n_cross_validations\": 2}"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.train.automl import AutoMLConfig\n",
							"\n",
							"automl_config = AutoMLConfig(task='regression',\n",
							"                             debug_log='automated_ml_errors.log',\n",
							"                             training_data = dataset_training,\n",
							"                             spark_context = sc,\n",
							"                             model_explainability = False, \n",
							"                             label_column_name =\"fareAmount\",**automl_settings)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.core.experiment import Experiment\n",
							"\n",
							"# Start an experiment in Azure Machine Learning\n",
							"experiment = Experiment(ws, \"aml-synapse-regression\")\n",
							"tags = {\"Synapse\": \"regression\"}\n",
							"local_run = experiment.submit(automl_config, show_output=True, tags = tags)\n",
							"\n",
							"# Use the get_details function to retrieve the detailed output for the run.\n",
							"run_details = local_run.get_details()"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"source": [
							"# Get best model\n",
							"best_run, fitted_model = local_run.get_output()"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"# Test best model accuracy\n",
							"validation_data_pd = validation_data.toPandas()\n",
							"y_test = validation_data_pd.pop(\"fareAmount\").to_frame()\n",
							"y_predict = fitted_model.predict(validation_data_pd)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"source": [
							"from sklearn.metrics import mean_squared_error\n",
							"from math import sqrt\n",
							"\n",
							"# Calculate Root Mean Square Error\n",
							"y_actual = y_test.values.flatten().tolist()\n",
							"rmse = sqrt(mean_squared_error(y_actual, y_predict))\n",
							"\n",
							"print(\"Root Mean Square Error:\")\n",
							"print(rmse)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"source": [
							"# Calculate MAPE and Model Accuracy \n",
							"sum_actuals = sum_errors = 0\n",
							"\n",
							"for actual_val, predict_val in zip(y_actual, y_predict):\n",
							"    abs_error = actual_val - predict_val\n",
							"    if abs_error < 0:\n",
							"        abs_error = abs_error * -1\n",
							"\n",
							"    sum_errors = sum_errors + abs_error\n",
							"    sum_actuals = sum_actuals + actual_val\n",
							"\n",
							"mean_abs_percent_error = sum_errors / sum_actuals\n",
							"\n",
							"print(\"Model MAPE:\")\n",
							"print(mean_abs_percent_error)\n",
							"print()\n",
							"print(\"Model Accuracy:\")\n",
							"print(1 - mean_abs_percent_error)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"source": [
							"import matplotlib.pyplot as plt\n",
							"import numpy as np\n",
							"from sklearn.metrics import mean_squared_error, r2_score\n",
							"\n",
							"# Calculate the R2 score using the predicted and actual fare prices\n",
							"y_test_actual = y_test[\"fareAmount\"]\n",
							"r2 = r2_score(y_test_actual, y_predict)\n",
							"\n",
							"# Plot the Actual vs Predicted Fare Amount Values\n",
							"plt.style.use('ggplot')\n",
							"plt.figure(figsize=(10, 7))\n",
							"plt.scatter(y_test_actual,y_predict)\n",
							"plt.plot([np.min(y_test_actual), np.max(y_test_actual)], [np.min(y_test_actual), np.max(y_test_actual)], color='lightblue')\n",
							"plt.xlabel(\"Actual Fare Amount\")\n",
							"plt.ylabel(\"Predicted Fare Amount\")\n",
							"plt.title(\"Actual vs Predicted Fare Amont R^2={}\".format(r2))\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"source": [
							"description = 'My AutoML Model'\n",
							"model_path='outputs/model.pkl'\n",
							"model = best_run.register_model(model_name = 'NYCGreenTaxiModel', model_path = model_path, description = description)\n",
							"print(model.name, model.version)"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureMLRun')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from azureml.core import Workspace"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"import azureml.core\n",
							"print(azureml.core.VERSION)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\n",
							"\n",
							"sc = SparkSession.builder.getOrCreate()\n",
							"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\n",
							"tenantid = token_library.getConnectionStringAsMap(\"Keyvaultacc\").get(\"tenantid\")\n",
							"svcpid = token_library.getConnectionStringAsMap(\"Keyvaultacc\").get(\"svcpid\")\n",
							"scvpsecret = token_library.getConnectionStringAsMap(\"Keyvaultacc\").get(\"scvpsecret\")\n",
							"#connection_string = token_library.getConnectionString(\"Keyvaultacc\")\n",
							"print(tenantid)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.core.authentication import ServicePrincipalAuthentication\n",
							"\n",
							"sp = ServicePrincipalAuthentication(tenant_id=\"your-tenant-id\", # tenantID\n",
							"                                    service_principal_id=\"your-client-id\", # clientId\n",
							"                                    service_principal_password=\"your-client-secret\") # clientSecret"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.core import Workspace\n",
							"\n",
							"ws = Workspace.get(name=\"ml-example\",\n",
							"                   auth=sp,\n",
							"                   subscription_id=\"your-sub-id\")\n",
							"ws.get_details()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureMLTips')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from azureml.core import Workspace"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"ws = Workspace.get(name=\"mlopsdev\", subscription_id='c46a9435-c957-4e6c-a0f4-b9a597984773', resource_group='mlops')"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"print('Workspace name: ' + ws.name, \r\n",
							"      'Azure region: ' + ws.location, \r\n",
							"      'Subscription id: ' + ws.subscription_id, \r\n",
							"      'Resource group: ' + ws.resource_group, sep = '\\n')"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"ws.write_config(path='.azureml')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"ws = Workspace.from_config()\r\n",
							"ws.get_details()"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from azureml.core import Workspace\n",
							"from azureml.core.compute import ComputeTarget, AmlCompute\n",
							"from azureml.core.compute_target import ComputeTargetException\n",
							"\n",
							"ws = Workspace.from_config() # This automatically looks for a directory .azureml\n",
							"\n",
							"# Choose a name for your CPU cluster\n",
							"cpu_cluster_name = \"cpu-cluster1\"\n",
							"\n",
							"# Verify that the cluster does not exist already\n",
							"try:\n",
							"    cpu_cluster = ComputeTarget(workspace=ws, name=cpu_cluster_name)\n",
							"    print('Found existing cluster, use it.')\n",
							"except ComputeTargetException:\n",
							"    compute_config = AmlCompute.provisioning_configuration(vm_size='STANDARD_D2_V2',\n",
							"                                                           idle_seconds_before_scaledown=2400,\n",
							"                                                           min_nodes=0,\n",
							"                                                           max_nodes=4)\n",
							"    cpu_cluster = ComputeTarget.create(ws, cpu_cluster_name, compute_config)\n",
							"\n",
							"cpu_cluster.wait_for_completion(show_output=True)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from azureml.opendatasets import NycTlcGreen\r\n",
							"import pandas as pd\r\n",
							"from datetime import datetime\r\n",
							"from dateutil.relativedelta import relativedelta"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"green_taxi_df = pd.DataFrame([])\r\n",
							"start = datetime.strptime(\"1/1/2015\",\"%m/%d/%Y\")\r\n",
							"end = datetime.strptime(\"1/31/2015\",\"%m/%d/%Y\")\r\n",
							"\r\n",
							"for sample_month in range(12):\r\n",
							"    temp_df_green = NycTlcGreen(start + relativedelta(months=sample_month), end + relativedelta(months=sample_month)) \\\r\n",
							"        .to_pandas_dataframe()\r\n",
							"    green_taxi_df = green_taxi_df.append(temp_df_green.sample(2000))\r\n",
							"\r\n",
							"green_taxi_df.head(10)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"display(green_taxi_df)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"def build_time_features(vector):\r\n",
							"    pickup_datetime = vector[0]\r\n",
							"    month_num = pickup_datetime.month\r\n",
							"    day_of_month = pickup_datetime.day\r\n",
							"    day_of_week = pickup_datetime.weekday()\r\n",
							"    hour_of_day = pickup_datetime.hour\r\n",
							"\r\n",
							"    return pd.Series((month_num, day_of_month, day_of_week, hour_of_day))\r\n",
							"\r\n",
							"green_taxi_df[[\"month_num\", \"day_of_month\",\"day_of_week\", \"hour_of_day\"]] = green_taxi_df[[\"lpepPickupDatetime\"]].apply(build_time_features, axis=1)\r\n",
							"green_taxi_df.head(10)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"columns_to_remove = [\"lpepPickupDatetime\", \"lpepDropoffDatetime\", \"puLocationId\", \"doLocationId\", \"extra\", \"mtaTax\",\r\n",
							"                     \"improvementSurcharge\", \"tollsAmount\", \"ehailFee\", \"tripType\", \"rateCodeID\",\r\n",
							"                     \"storeAndFwdFlag\", \"paymentType\", \"fareAmount\" #, \"tipAmount\"\r\n",
							"                    ]\r\n",
							"for col in columns_to_remove:\r\n",
							"    green_taxi_df.pop(col)\r\n",
							"\r\n",
							"green_taxi_df.head(5)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"green_taxi_df.columns"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"green_taxi_df.describe()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"final_df = green_taxi_df.query(\"pickupLatitude>=40.53 and pickupLatitude<=40.88\")\r\n",
							"final_df = final_df.query(\"pickupLongitude>=-74.09 and pickupLongitude<=-73.72\")\r\n",
							"final_df = final_df.query(\"tripDistance>=0.25 and tripDistance<31\")\r\n",
							"final_df = final_df.query(\"passengerCount>0 and totalAmount>0\")\r\n",
							"\r\n",
							"columns_to_remove_for_training = [\"pickupLongitude\", \"pickupLatitude\", \"dropoffLongitude\", \"dropoffLatitude\"]\r\n",
							"for col in columns_to_remove_for_training:\r\n",
							"    final_df.pop(col)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"final_df.describe()"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from sklearn.model_selection import train_test_split\r\n",
							"\r\n",
							"x_train, x_test = train_test_split(final_df, test_size=0.2, random_state=223)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import logging\r\n",
							"\r\n",
							"automl_settings = {\r\n",
							"    \"iteration_timeout_minutes\": 2,\r\n",
							"    \"experiment_timeout_hours\": 0.3,\r\n",
							"    \"enable_early_stopping\": True,\r\n",
							"    \"primary_metric\": 'spearman_correlation',\r\n",
							"    \"featurization\": 'auto',\r\n",
							"    \"verbosity\": logging.INFO,\r\n",
							"    \"n_cross_validations\": 5\r\n",
							"}"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from azureml.train.automl import AutoMLConfig\r\n",
							"\r\n",
							"automl_config = AutoMLConfig(task='regression',\r\n",
							"                             debug_log='automated_ml_errors.log',\r\n",
							"                             #compute_target=cpu_cluster,\r\n",
							"                             training_data=x_train,\r\n",
							"                             label_column_name=\"tipAmount\",\r\n",
							"                             **automl_settings)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from azureml.core.experiment import Experiment\n",
							"experiment = Experiment(ws, \"taxi-experiment-fromsynapsews-tips\")\n",
							"local_run = experiment.submit(automl_config, show_output=True)"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"best_run, fitted_model = local_run.get_output()\r\n",
							"print(best_run)\r\n",
							"print(fitted_model)"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"y_test = x_test.pop(\"tipAmount\")\r\n",
							"\r\n",
							"y_predict = fitted_model.predict(x_test)\r\n",
							"print(y_predict[:10])"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from sklearn.metrics import mean_squared_error\r\n",
							"from math import sqrt\r\n",
							"\r\n",
							"y_actual = y_test.values.flatten().tolist()\r\n",
							"rmse = sqrt(mean_squared_error(y_actual, y_predict))\r\n",
							"rmse"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"sum_actuals = sum_errors = 0\r\n",
							"\r\n",
							"for actual_val, predict_val in zip(y_actual, y_predict):\r\n",
							"    abs_error = actual_val - predict_val\r\n",
							"    if abs_error < 0:\r\n",
							"        abs_error = abs_error * -1\r\n",
							"\r\n",
							"    sum_errors = sum_errors + abs_error\r\n",
							"    sum_actuals = sum_actuals + actual_val\r\n",
							"\r\n",
							"mean_abs_percent_error = sum_errors / sum_actuals\r\n",
							"print(\"Model MAPE:\")\r\n",
							"print(mean_abs_percent_error)\r\n",
							"print()\r\n",
							"print(\"Model Accuracy:\")\r\n",
							"print(1 - mean_abs_percent_error)"
						],
						"outputs": [],
						"execution_count": 22
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureMLtest')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from azureml.core import Workspace"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import azureml.core\r\n",
							"print(azureml.core.VERSION)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"ws = Workspace.get(name=\"mlopsdev\", subscription_id='c46a9435-c957-4e6c-a0f4-b9a597984773', resource_group='mlops')"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"print('Workspace name: ' + ws.name, \r\n",
							"      'Azure region: ' + ws.location, \r\n",
							"      'Subscription id: ' + ws.subscription_id, \r\n",
							"      'Resource group: ' + ws.resource_group, sep = '\\n')"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"ws.write_config(path='.azureml')"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# tutorial/02-create-compute.py\r\n",
							"from azureml.core import Workspace\r\n",
							"from azureml.core.compute import ComputeTarget, AmlCompute\r\n",
							"from azureml.core.compute_target import ComputeTargetException\r\n",
							"\r\n",
							"ws = Workspace.from_config() # This automatically looks for a directory .azureml\r\n",
							"\r\n",
							"# Choose a name for your CPU cluster\r\n",
							"cpu_cluster_name = \"cpu-cluster\"\r\n",
							"\r\n",
							"# Verify that the cluster does not exist already\r\n",
							"try:\r\n",
							"    cpu_cluster = ComputeTarget(workspace=ws, name=cpu_cluster_name)\r\n",
							"    print('Found existing cluster, use it.')\r\n",
							"except ComputeTargetException:\r\n",
							"    compute_config = AmlCompute.provisioning_configuration(vm_size='STANDARD_D2_V2',\r\n",
							"                                                           idle_seconds_before_scaledown=2400,\r\n",
							"                                                           min_nodes=0,\r\n",
							"                                                           max_nodes=4)\r\n",
							"    cpu_cluster = ComputeTarget.create(ws, cpu_cluster_name, compute_config)\r\n",
							"\r\n",
							"cpu_cluster.wait_for_completion(show_output=True)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from azureml.opendatasets import NycTlcGreen\r\n",
							"import pandas as pd\r\n",
							"from datetime import datetime\r\n",
							"from dateutil.relativedelta import relativedelta"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"green_taxi_df = pd.DataFrame([])\r\n",
							"start = datetime.strptime(\"1/1/2015\",\"%m/%d/%Y\")\r\n",
							"end = datetime.strptime(\"1/31/2015\",\"%m/%d/%Y\")\r\n",
							"\r\n",
							"for sample_month in range(12):\r\n",
							"    temp_df_green = NycTlcGreen(start + relativedelta(months=sample_month), end + relativedelta(months=sample_month)) \\\r\n",
							"        .to_pandas_dataframe()\r\n",
							"    green_taxi_df = green_taxi_df.append(temp_df_green.sample(2000))\r\n",
							"\r\n",
							"green_taxi_df.head(10)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"def build_time_features(vector):\r\n",
							"    pickup_datetime = vector[0]\r\n",
							"    month_num = pickup_datetime.month\r\n",
							"    day_of_month = pickup_datetime.day\r\n",
							"    day_of_week = pickup_datetime.weekday()\r\n",
							"    hour_of_day = pickup_datetime.hour\r\n",
							"\r\n",
							"    return pd.Series((month_num, day_of_month, day_of_week, hour_of_day))\r\n",
							"\r\n",
							"green_taxi_df[[\"month_num\", \"day_of_month\",\"day_of_week\", \"hour_of_day\"]] = green_taxi_df[[\"lpepPickupDatetime\"]].apply(build_time_features, axis=1)\r\n",
							"green_taxi_df.head(10)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"columns_to_remove = [\"lpepPickupDatetime\", \"lpepDropoffDatetime\", \"puLocationId\", \"doLocationId\", \"extra\", \"mtaTax\",\r\n",
							"                     \"improvementSurcharge\", \"tollsAmount\", \"ehailFee\", \"tripType\", \"rateCodeID\",\r\n",
							"                     \"storeAndFwdFlag\", \"paymentType\", \"fareAmount\", \"tipAmount\"\r\n",
							"                    ]\r\n",
							"for col in columns_to_remove:\r\n",
							"    green_taxi_df.pop(col)\r\n",
							"\r\n",
							"green_taxi_df.head(5)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"green_taxi_df.describe()"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"final_df = green_taxi_df.query(\"pickupLatitude>=40.53 and pickupLatitude<=40.88\")\r\n",
							"final_df = final_df.query(\"pickupLongitude>=-74.09 and pickupLongitude<=-73.72\")\r\n",
							"final_df = final_df.query(\"tripDistance>=0.25 and tripDistance<31\")\r\n",
							"final_df = final_df.query(\"passengerCount>0 and totalAmount>0\")\r\n",
							"\r\n",
							"columns_to_remove_for_training = [\"pickupLongitude\", \"pickupLatitude\", \"dropoffLongitude\", \"dropoffLatitude\"]\r\n",
							"for col in columns_to_remove_for_training:\r\n",
							"    final_df.pop(col)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"final_df.describe()"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from sklearn.model_selection import train_test_split\r\n",
							"\r\n",
							"x_train, x_test = train_test_split(final_df, test_size=0.2, random_state=223)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import logging\r\n",
							"\r\n",
							"automl_settings = {\r\n",
							"    \"iteration_timeout_minutes\": 2,\r\n",
							"    \"experiment_timeout_hours\": 0.3,\r\n",
							"    \"enable_early_stopping\": True,\r\n",
							"    \"primary_metric\": 'spearman_correlation',\r\n",
							"    \"featurization\": 'auto',\r\n",
							"    \"verbosity\": logging.INFO,\r\n",
							"    \"n_cross_validations\": 5\r\n",
							"}"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from azureml.train.automl import AutoMLConfig\r\n",
							"\r\n",
							"automl_config = AutoMLConfig(task='regression',\r\n",
							"                             debug_log='automated_ml_errors.log',\r\n",
							"                             training_data=x_train,\r\n",
							"                             label_column_name=\"totalAmount\",\r\n",
							"                             **automl_settings)"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from azureml.core.experiment import Experiment\n",
							"experiment = Experiment(ws, \"taxi-experiment-fromsynapsews-total\")\n",
							"local_run = experiment.submit(automl_config, show_output=True)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"#from azureml.widgets import RunDetails\n",
							"#RunDetails(local_run).show()"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"best_run, fitted_model = local_run.get_output()\r\n",
							"print(best_run)\r\n",
							"print(fitted_model)"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"y_test = x_test.pop(\"totalAmount\")\r\n",
							"\r\n",
							"y_predict = fitted_model.predict(x_test)\r\n",
							"print(y_predict[:10])"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from sklearn.metrics import mean_squared_error\r\n",
							"from math import sqrt\r\n",
							"\r\n",
							"y_actual = y_test.values.flatten().tolist()\r\n",
							"rmse = sqrt(mean_squared_error(y_actual, y_predict))\r\n",
							"rmse"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"sum_actuals = sum_errors = 0\r\n",
							"\r\n",
							"for actual_val, predict_val in zip(y_actual, y_predict):\r\n",
							"    abs_error = actual_val - predict_val\r\n",
							"    if abs_error < 0:\r\n",
							"        abs_error = abs_error * -1\r\n",
							"\r\n",
							"    sum_errors = sum_errors + abs_error\r\n",
							"    sum_actuals = sum_actuals + actual_val\r\n",
							"\r\n",
							"mean_abs_percent_error = sum_errors / sum_actuals\r\n",
							"print(\"Model MAPE:\")\r\n",
							"print(mean_abs_percent_error)\r\n",
							"print()\r\n",
							"print(\"Model Accuracy:\")\r\n",
							"print(1 - mean_abs_percent_error)"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSparkMLLib')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import matplotlib.pyplot as plt\r\n",
							"from datetime import datetime\r\n",
							"from dateutil import parser\r\n",
							"from pyspark.sql.functions import unix_timestamp, date_format, col, when\r\n",
							"from pyspark.ml import Pipeline\r\n",
							"from pyspark.ml import PipelineModel\r\n",
							"from pyspark.ml.feature import RFormula\r\n",
							"from pyspark.ml.feature import OneHotEncoder, StringIndexer, VectorIndexer\r\n",
							"from pyspark.ml.classification import LogisticRegression\r\n",
							"from pyspark.mllib.evaluation import BinaryClassificationMetrics\r\n",
							"from pyspark.ml.evaluation import BinaryClassificationEvaluator"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from azureml.opendatasets import NycTlcYellow\r\n",
							"\r\n",
							"end_date = parser.parse('2018-06-06')\r\n",
							"start_date = parser.parse('2018-05-01')\r\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\r\n",
							"filtered_df = nyc_tlc.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# To make development easier, faster and less expensive down sample for now\r\n",
							"sampled_taxi_df = filtered_df.sample(True, 0.001, seed=1234)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"#sampled_taxi_df.show(5)\r\n",
							"display(sampled_taxi_df)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"sampled_taxi_df.createOrReplaceTempView(\"nytaxi\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"taxi_df = sampled_taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'rateCodeId', 'passengerCount'\\\r\n",
							"                                , 'tripDistance', 'tpepPickupDateTime', 'tpepDropoffDateTime'\\\r\n",
							"                                , date_format('tpepPickupDateTime', 'hh').alias('pickupHour')\\\r\n",
							"                                , date_format('tpepPickupDateTime', 'EEEE').alias('weekdayString')\\\r\n",
							"                                , (unix_timestamp(col('tpepDropoffDateTime')) - unix_timestamp(col('tpepPickupDateTime'))).alias('tripTimeSecs')\\\r\n",
							"                                , (when(col('tipAmount') > 0, 1).otherwise(0)).alias('tipped')\r\n",
							"                                )\\\r\n",
							"                        .filter((sampled_taxi_df.passengerCount > 0) & (sampled_taxi_df.passengerCount < 8)\\\r\n",
							"                                & (sampled_taxi_df.tipAmount >= 0) & (sampled_taxi_df.tipAmount <= 25)\\\r\n",
							"                                & (sampled_taxi_df.fareAmount >= 1) & (sampled_taxi_df.fareAmount <= 250)\\\r\n",
							"                                & (sampled_taxi_df.tipAmount < sampled_taxi_df.fareAmount)\\\r\n",
							"                                & (sampled_taxi_df.tripDistance > 0) & (sampled_taxi_df.tripDistance <= 100)\\\r\n",
							"                                & (sampled_taxi_df.rateCodeId <= 5)\r\n",
							"                                & (sampled_taxi_df.paymentType.isin({\"1\", \"2\"}))\r\n",
							"                                )"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"taxi_featurised_df = taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'passengerCount'\\\r\n",
							"                                                , 'tripDistance', 'weekdayString', 'pickupHour','tripTimeSecs','tipped'\\\r\n",
							"                                                , when((taxi_df.pickupHour <= 6) | (taxi_df.pickupHour >= 20),\"Night\")\\\r\n",
							"                                                .when((taxi_df.pickupHour >= 7) & (taxi_df.pickupHour <= 10), \"AMRush\")\\\r\n",
							"                                                .when((taxi_df.pickupHour >= 11) & (taxi_df.pickupHour <= 15), \"Afternoon\")\\\r\n",
							"                                                .when((taxi_df.pickupHour >= 16) & (taxi_df.pickupHour <= 19), \"PMRush\")\\\r\n",
							"                                                .otherwise(0).alias('trafficTimeBins')\r\n",
							"                                              )\\\r\n",
							"                                       .filter((taxi_df.tripTimeSecs >= 30) & (taxi_df.tripTimeSecs <= 7200))"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Since the sample uses an algorithm that only works with numeric features, convert them so they can be consumed\r\n",
							"sI1 = StringIndexer(inputCol=\"trafficTimeBins\", outputCol=\"trafficTimeBinsIndex\")\r\n",
							"en1 = OneHotEncoder(dropLast=False, inputCol=\"trafficTimeBinsIndex\", outputCol=\"trafficTimeBinsVec\")\r\n",
							"sI2 = StringIndexer(inputCol=\"weekdayString\", outputCol=\"weekdayIndex\")\r\n",
							"en2 = OneHotEncoder(dropLast=False, inputCol=\"weekdayIndex\", outputCol=\"weekdayVec\")\r\n",
							"\r\n",
							"# Create a new dataframe that has had the encodings applied\r\n",
							"encoded_final_df = Pipeline(stages=[sI1, en1, sI2, en2]).fit(taxi_featurised_df).transform(taxi_featurised_df)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"#Decide on the split between training and testing data from the dataframe\r\n",
							"trainingFraction = 0.7\r\n",
							"testingFraction = (1-trainingFraction)\r\n",
							"seed = 1234\r\n",
							"\r\n",
							"# Split the dataframe into test and training dataframes\r\n",
							"train_data_df, test_data_df = encoded_final_df.randomSplit([trainingFraction, testingFraction], seed=seed)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"## Create a new LR object for the model\r\n",
							"logReg = LogisticRegression(maxIter=10, regParam=0.3, labelCol = 'tipped')\r\n",
							"\r\n",
							"## The formula for the model\r\n",
							"classFormula = RFormula(formula=\"tipped ~ pickupHour + weekdayVec + passengerCount + tripTimeSecs + tripDistance + fareAmount + paymentType+ trafficTimeBinsVec\")\r\n",
							"\r\n",
							"## Undertake training and create an LR model\r\n",
							"lrModel = Pipeline(stages=[classFormula, logReg]).fit(train_data_df)\r\n",
							"\r\n",
							"## Saving the model is optional but its another form of inter session cache\r\n",
							"datestamp = datetime.now().strftime('%m-%d-%Y-%s')\r\n",
							"fileName = \"lrModel_\" + datestamp\r\n",
							"logRegDirfilename = fileName\r\n",
							"lrModel.save(logRegDirfilename)\r\n",
							"\r\n",
							"## Predict tip 1/0 (yes/no) on the test dataset, evaluation using AUROC\r\n",
							"predictions = lrModel.transform(test_data_df)\r\n",
							"predictionAndLabels = predictions.select(\"label\",\"prediction\").rdd\r\n",
							"metrics = BinaryClassificationMetrics(predictionAndLabels)\r\n",
							"print(\"Area under ROC = %s\" % metrics.areaUnderROC)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"## Plot the ROC curve, no need for pandas as this uses the modelSummary object\r\n",
							"modelSummary = lrModel.stages[-1].summary\r\n",
							"\r\n",
							"plt.plot([0, 1], [0, 1], 'r--')\r\n",
							"plt.plot(modelSummary.roc.select('FPR').collect(),\r\n",
							"         modelSummary.roc.select('TPR').collect())\r\n",
							"plt.xlabel('False Positive Rate')\r\n",
							"plt.ylabel('True Positive Rate')\r\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Covid19AutoMLSpark')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 6,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "6",
						"spark.dynamicAllocation.maxExecutors": "6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import azureml.core\n",
							"\n",
							"from azureml.core import Experiment, Workspace, Dataset, Datastore\n",
							"from azureml.train.automl import AutoMLConfig\n",
							"from azureml.data.dataset_factory import TabularDatasetFactory"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"subscription_id = \"c46a9435-c957-4e6c-a0f4-b9a597984773\"\n",
							"resource_group = \"accenture\"\n",
							"workspace_name = \"accml\"\n",
							"experiment_name = \"bbaccsynapse-covid19-20201217032226\"\n",
							"\n",
							"ws = Workspace(subscription_id = subscription_id, resource_group = resource_group, workspace_name = workspace_name)\n",
							"experiment = Experiment(ws, experiment_name)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df = spark.sql(\"SELECT * FROM default.covid19\")\r\n",
							"from pyspark.sql.types import *"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df = df.withColumn(\"_c5\", df[\"_c5\"].cast(DoubleType()).alias(\"_c5\"))\r\n",
							"df = df.withColumn(\"_c6\", df[\"_c6\"].cast(DoubleType()).alias(\"_c6\"))\r\n",
							"df = df.withColumn(\"_c7\", df[\"_c7\"].cast(DoubleType()).alias(\"_c7\"))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"source": [
							"datastore = Datastore.get_default(ws)\n",
							"dataset = TabularDatasetFactory.register_spark_dataframe(df, datastore, name = experiment_name + \"-dataset\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"automl_config = AutoMLConfig(spark_context = sc,\n",
							"                             task = \"regression\",\n",
							"                             training_data = dataset,\n",
							"                             label_column_name = \"_c7\",\n",
							"                             primary_metric = \"spearman_correlation\",\n",
							"                             experiment_timeout_hours = 3,\n",
							"                             max_concurrent_iterations = 6,\n",
							"                             enable_onnx_compatible_models = False)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"run = experiment.submit(automl_config)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"run.wait_for_completion(show_output=False)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"source": [
							"displayHTML(\"<a href={} target='_blank'>Your experiment in Azure Machine Learning portal: {}</a>\".format(run.get_portal_url(), run.id))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"run.wait_for_completion()\n",
							"\n",
							"# Install required dependency\n",
							"import pip\n",
							"pip.main([\"install\", \"azure-storage-blob==12.5.0\"])\n",
							"\n",
							"import mlflow\n",
							"\n",
							"# Get best model from automl run\n",
							"best_run, non_onnx_model = run.get_output()\n",
							"\n",
							"artifact_path = experiment_name + \"_artifact\"\n",
							"\n",
							"mlflow.set_tracking_uri(ws.get_mlflow_tracking_uri())\n",
							"mlflow.set_experiment(experiment_name)\n",
							"\n",
							"with mlflow.start_run() as run:\n",
							"    # Save the model to the outputs directory for capture\n",
							"    mlflow.sklearn.log_model(non_onnx_model, artifact_path)\n",
							"\n",
							"    # Register the model to AML model registry\n",
							"    mlflow.register_model(\"runs:/\" + run.info.run_id + \"/\" + artifact_path, \"bbaccsynapse-covid19-20201217032226-Best\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Covid19AutoMLSparkOnnx')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import azureml.core\n",
							"\n",
							"from azureml.core import Experiment, Workspace, Dataset, Datastore\n",
							"from azureml.train.automl import AutoMLConfig\n",
							"from azureml.data.dataset_factory import TabularDatasetFactory"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"subscription_id = \"c46a9435-c957-4e6c-a0f4-b9a597984773\"\n",
							"resource_group = \"accenture\"\n",
							"workspace_name = \"accml\"\n",
							"experiment_name = \"bbaccsynapse-covid19-20201217032448-onnx\"\n",
							"\n",
							"ws = Workspace(subscription_id = subscription_id, resource_group = resource_group, workspace_name = workspace_name)\n",
							"experiment = Experiment(ws, experiment_name)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df = spark.sql(\"SELECT * FROM default.covid19\")\r\n",
							"from pyspark.sql.types import *\r\n",
							""
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df = df.withColumn(\"_c5\", df[\"_c5\"].cast(DoubleType()).alias(\"_c5\"))\r\n",
							"df = df.withColumn(\"_c6\", df[\"_c6\"].cast(DoubleType()).alias(\"_c6\"))\r\n",
							"df = df.withColumn(\"_c7\", df[\"_c7\"].cast(DoubleType()).alias(\"_c7\"))"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"source": [
							"datastore = Datastore.get_default(ws)\n",
							"dataset = TabularDatasetFactory.register_spark_dataframe(df, datastore, name = experiment_name + \"-dataset\")"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(df)"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.printSchema"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"source": [
							"automl_config = AutoMLConfig(spark_context = sc,\n",
							"                             task = \"regression\",\n",
							"                             training_data = dataset,\n",
							"                             label_column_name = \"_c7\",\n",
							"                             primary_metric = \"spearman_correlation\",\n",
							"                             experiment_timeout_hours = 3,\n",
							"                             max_concurrent_iterations = 2,\n",
							"                             enable_onnx_compatible_models = True)"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"source": [
							"run = experiment.submit(automl_config)"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"run.wait_for_completion(show_output=True)"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"source": [
							"displayHTML(\"<a href={} target='_blank'>Your experiment in Azure Machine Learning portal: {}</a>\".format(run.get_portal_url(), run.id))"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"source": [
							"run.wait_for_completion()\n",
							"\n",
							"# Install required dependency\n",
							"import pip\n",
							"pip.main([\"install\", \"azure-storage-blob==12.5.0\"])\n",
							"\n",
							"import onnxruntime\n",
							"import mlflow\n",
							"import mlflow.onnx\n",
							"\n",
							"from mlflow.models.signature import ModelSignature\n",
							"from mlflow.types import DataType\n",
							"from mlflow.types.schema import ColSpec, Schema\n",
							"\n",
							"# Get best model from automl run\n",
							"best_run, onnx_model = run.get_output(return_onnx_model=True)\n",
							"\n",
							"# Define utility functions to infer the schema of ONNX model\n",
							"def _infer_schema(data):\n",
							"    res = []\n",
							"    for _, col in enumerate(data):\n",
							"        t = col.type.replace(\"tensor(\", \"\").replace(\")\", \"\")\n",
							"        if t in [\"bool\"]:\n",
							"            dt = DataType.boolean\n",
							"        elif t in [\"int8\", \"uint8\", \"int16\", \"uint16\", \"int32\"]:\n",
							"            dt = DateType.integer\n",
							"        elif t in [\"uint32\", \"int64\"]:\n",
							"            dt = DataType.long\n",
							"        elif t in [\"float16\", \"bfloat16\", \"float\"]:\n",
							"            dt = DataType.float\n",
							"        elif t in [\"double\"]:\n",
							"            dt = DataType.double\n",
							"        elif t in [\"string\"]:\n",
							"            dt = DataType.string\n",
							"        else:\n",
							"            raise Exception(\"Unsupported type: \" + t)\n",
							"        res.append(ColSpec(type=dt, name=col.name))\n",
							"    return Schema(res)\n",
							"\n",
							"def _infer_signature(onnx_model):\n",
							"    onnx_model_bytes = onnx_model.SerializeToString()\n",
							"    onnx_runtime = onnxruntime.InferenceSession(onnx_model_bytes)\n",
							"    inputs = _infer_schema(onnx_runtime.get_inputs())\n",
							"    outputs = _infer_schema(onnx_runtime.get_outputs())\n",
							"    return ModelSignature(inputs, outputs)\n",
							"\n",
							"# Infer signature of ONNX model\n",
							"signature = _infer_signature(onnx_model)\n",
							"\n",
							"artifact_path = experiment_name + \"_artifact\"\n",
							"mlflow.set_tracking_uri(ws.get_mlflow_tracking_uri())\n",
							"mlflow.set_experiment(experiment_name)\n",
							"\n",
							"with mlflow.start_run() as run:\n",
							"    # Save the model to the outputs directory for capture\n",
							"    mlflow.onnx.log_model(onnx_model, artifact_path, signature=signature)\n",
							"\n",
							"    # Register the model to AML model registry\n",
							"    mlflow.register_model(\"runs:/\" + run.info.run_id + \"/\" + artifact_path, \"bbaccsynapse-covid19-20201217032448-Best-onnx\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Creating a managed Spark Table')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_sparksql",
						"display_name": "Synapse SQL"
					},
					"language_info": {
						"name": "sql"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Creating a managed Spark table\n",
							"This notebook describes how to create a managed table from Spark. \n",
							"The table is created in the Synapse warehouse folder in your primary storage account. The table will be synchronized and available in Synapse SQL Pools. \n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [],
									"yLabel": "",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"{}\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							},
							"collapsed": false
						},
						"source": [
							"DROP TABLE IF EXISTS cities"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [],
									"yLabel": "",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"{}\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							},
							"collapsed": false
						},
						"source": [
							"CREATE TABLE cities\n",
							"  (name STRING, population INT)\n",
							"  USING PARQUET"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"Insert a few rows into the table using a list of values.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [],
									"yLabel": "",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"{}\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							},
							"collapsed": false
						},
						"source": [
							"INSERT INTO cities VALUES ('Seattle', 730400), ('San Francisco', 881549), ('Beijing', 21540000), ('Bangalore', 10540000)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"* Retrieve values back. Click on 'Chart' below to review the visualization.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"name"
									],
									"values": [
										"population"
									],
									"yLabel": "population",
									"xLabel": "name",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"{\\\"population\\\":{\\\"Bangalore\\\":10540000,\\\"Beijing\\\":21540000,\\\"San Francisco\\\":881549,\\\"Seattle\\\":730400}}\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							},
							"collapsed": false
						},
						"source": [
							"SELECT * FROM cities ORDER BY name"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"Drop the table. Please note the data will get deleted from the primary storage account associated with this workspace.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [],
									"yLabel": "",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"{}\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							},
							"collapsed": false
						},
						"source": [
							"DROP TABLE cities"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Exploration and ML Modeling - NYC taxi predict using Spark MLlib')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Predict NYC Taxi Tips using Spark ML and Azure Open Datasets\n",
							"\n",
							"The notebook ingests, visualizes, prepares and then trains a model based on an Open Dataset that tracks NYC Yellow Taxi trips and various attributes around them.\n",
							"The goal is to predict for a given trip whether there will be a trip or not.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import matplotlib.pyplot as plt\n",
							"\n",
							"from pyspark.sql.functions import unix_timestamp\n",
							"\n",
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"from pyspark.ml import Pipeline\n",
							"from pyspark.ml import PipelineModel\n",
							"from pyspark.ml.feature import RFormula\n",
							"from pyspark.ml.feature import OneHotEncoder, StringIndexer, VectorIndexer\n",
							"from pyspark.ml.classification import LogisticRegression\n",
							"from pyspark.mllib.evaluation import BinaryClassificationMetrics\n",
							"from pyspark.ml.evaluation import BinaryClassificationEvaluator"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Ingest Data¶ \n",
							"\n",
							"Get a sample data of nyc yellow taxi to make it faster/easier to evaluate different approaches to prep for the modelling phase later in the notebook."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Import NYC yellow cab data from Azure Open Datasets\n",
							"from azureml.opendatasets import NycTlcYellow\n",
							"\n",
							"from datetime import datetime\n",
							"from dateutil import parser\n",
							"\n",
							"end_date = parser.parse('2018-05-08 00:00:00')\n",
							"start_date = parser.parse('2018-05-01 00:00:00')\n",
							"\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\n",
							"nyc_tlc_df = nyc_tlc.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"#To make development easier, faster and less expensive downsample for now\n",
							"sampled_taxi_df = nyc_tlc_df.sample(True, 0.001, seed=1234)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Exploratory Data Analysis\n",
							"\n",
							"Look at the data and evaluate its suitability for use in a model, do this via some basic charts focussed on tip values and relationships."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"#The charting package needs a Pandas dataframe or numpy array do the conversion\n",
							"sampled_taxi_pd_df = sampled_taxi_df.toPandas()\n",
							"\n",
							"# Look at tips by amount count histogram\n",
							"ax1 = sampled_taxi_pd_df['tipAmount'].plot(kind='hist', bins=25, facecolor='lightblue')\n",
							"ax1.set_title('Tip amount distribution')\n",
							"ax1.set_xlabel('Tip Amount ($)')\n",
							"ax1.set_ylabel('Counts')\n",
							"plt.suptitle('')\n",
							"plt.show()\n",
							"\n",
							"# How many passengers tip'd by various amounts\n",
							"ax2 = sampled_taxi_pd_df.boxplot(column=['tipAmount'], by=['passengerCount'])\n",
							"ax2.set_title('Tip amount by Passenger count')\n",
							"ax2.set_xlabel('Passenger count') \n",
							"ax2.set_ylabel('Tip Amount ($)')\n",
							"plt.suptitle('')\n",
							"plt.show()\n",
							"\n",
							"# Look at the relationship between fare and tip amounts\n",
							"ax = sampled_taxi_pd_df.plot(kind='scatter', x= 'fareAmount', y = 'tipAmount', c='blue', alpha = 0.10, s=2.5*(sampled_taxi_pd_df['passengerCount']))\n",
							"ax.set_title('Tip amount by Fare amount')\n",
							"ax.set_xlabel('Fare Amount ($)')\n",
							"ax.set_ylabel('Tip Amount ($)')\n",
							"plt.axis([-2, 80, -2, 20])\n",
							"plt.suptitle('')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data Prep and Featurization\n",
							"\n",
							"It's clear from the visualizations above that there are a bunch of outliers in the data. These will need to be filtered out in addition there are extra variables that are not going to be useful in the model we build at the end.\n",
							"\n",
							"Finally there is a need to create some new (derived) variables that will work better with the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"taxi_df = sampled_taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'rateCodeId', 'passengerCount'\\\n",
							"                                , 'tripDistance', 'tpepPickupDateTime', 'tpepDropoffDateTime'\\\n",
							"                                , date_format('tpepPickupDateTime', 'hh').alias('pickupHour')\\\n",
							"                                , date_format('tpepPickupDateTime', 'EEEE').alias('weekdayString')\\\n",
							"                                , (unix_timestamp(col('tpepDropoffDateTime')) - unix_timestamp(col('tpepPickupDateTime'))).alias('tripTimeSecs')\\\n",
							"                                , (when(col('tipAmount') > 0, 1).otherwise(0)).alias('tipped')\n",
							"                                )\\\n",
							"                        .filter((sampled_taxi_df.passengerCount > 0) & (sampled_taxi_df.passengerCount < 8)\\\n",
							"                                & (sampled_taxi_df.tipAmount >= 0) & (sampled_taxi_df.tipAmount <= 25)\\\n",
							"                                & (sampled_taxi_df.fareAmount >= 1) & (sampled_taxi_df.fareAmount <= 250)\\\n",
							"                                & (sampled_taxi_df.tipAmount < sampled_taxi_df.fareAmount)\\\n",
							"                                & (sampled_taxi_df.tripDistance > 0) & (sampled_taxi_df.tripDistance <= 100)\\\n",
							"                                & (sampled_taxi_df.rateCodeId <= 5)\n",
							"                                & (sampled_taxi_df.paymentType.isin({\"1\", \"2\"}))\n",
							"                                )"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data Prep and Featurization Part 2\n",
							"\n",
							"Having created new variables its now possible to drop the columns they were derived from so that the dataframe that goes into the model is the smallest in terms of number of variables, that is required.\n",
							"\n",
							"Also create some more features based on new columns from the first round.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"taxi_featurised_df = taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'passengerCount'\\\n",
							"                                                , 'tripDistance', 'weekdayString', 'pickupHour','tripTimeSecs','tipped'\\\n",
							"                                                , when((taxi_df.pickupHour <= 6) | (taxi_df.pickupHour >= 20),\"Night\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 7) & (taxi_df.pickupHour <= 10), \"AMRush\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 11) & (taxi_df.pickupHour <= 15), \"Afternoon\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 16) & (taxi_df.pickupHour <= 19), \"PMRush\")\\\n",
							"                                                .otherwise(0).alias('trafficTimeBins')\n",
							"                                              )\\\n",
							"                                       .filter((taxi_df.tripTimeSecs >= 30) & (taxi_df.tripTimeSecs <= 7200))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Encoding\n",
							"\n",
							"Different ML algorithms support different types of input, for this example Logistic Regression is being used for Binary Classification. This means that any Categorical (string) variables must be converted to numbers.\n",
							"\n",
							"The process is not as simple as a \"map\" style function as the relationship between the numbers can introduce a bias in the resulting model, the approach is to index the variable and then encode using a std approach called One Hot Encoding.\n",
							"\n",
							"This approach requires the encoder to \"learn\"/fit a model over the data in the Spark instance and then transform based on what was learnt.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# The sample uses an algorithm that only works with numeric features convert them so they can be consumed\n",
							"sI1 = StringIndexer(inputCol=\"trafficTimeBins\", outputCol=\"trafficTimeBinsIndex\"); \n",
							"en1 = OneHotEncoder(dropLast=False, inputCol=\"trafficTimeBinsIndex\", outputCol=\"trafficTimeBinsVec\");\n",
							"sI2 = StringIndexer(inputCol=\"weekdayString\", outputCol=\"weekdayIndex\"); \n",
							"en2 = OneHotEncoder(dropLast=False, inputCol=\"weekdayIndex\", outputCol=\"weekdayVec\");\n",
							"\n",
							"# Create a new dataframe that has had the encodings applied\n",
							"encoded_final_df = Pipeline(stages=[sI1, en1, sI2, en2]).fit(taxi_featurised_df).transform(taxi_featurised_df)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Generation of Testing and Training Data Sets\n",
							"Simple split, 70% for training and 30% for testing the model. Playing with this ratio may result in different models.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Decide on the split between training and testing data from the dataframe \n",
							"trainingFraction = 0.7\n",
							"testingFraction = (1-trainingFraction)\n",
							"seed = 1234\n",
							"\n",
							"# Split the dataframe into test and training dataframes\n",
							"train_data_df, test_data_df = encoded_final_df.randomSplit([trainingFraction, testingFraction], seed=seed)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Train the Model\n",
							"\n",
							"Train the Logistic Regression model and then evaluate it using Area under ROC as the metric."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"## Create a new LR object for the model\n",
							"logReg = LogisticRegression(maxIter=10, regParam=0.3, labelCol = 'tipped')\n",
							"\n",
							"## The formula for the model\n",
							"classFormula = RFormula(formula=\"tipped ~ pickupHour + weekdayVec + passengerCount + tripTimeSecs + tripDistance + fareAmount + paymentType+ trafficTimeBinsVec\")\n",
							"\n",
							"## Undertake training and create an LR model\n",
							"lrModel = Pipeline(stages=[classFormula, logReg]).fit(train_data_df)\n",
							"\n",
							"## Saving the model is optional but its another for of inter session cache\n",
							"datestamp = datetime.now().strftime('%m-%d-%Y-%s');\n",
							"fileName = \"lrModel_\" + datestamp;\n",
							"logRegDirfilename = fileName;\n",
							"lrModel.save(logRegDirfilename)\n",
							"\n",
							"## Predict tip 1/0 (yes/no) on the test dataset, evaluation using AUROC\n",
							"predictions = lrModel.transform(test_data_df)\n",
							"predictionAndLabels = predictions.select(\"label\",\"prediction\").rdd\n",
							"metrics = BinaryClassificationMetrics(predictionAndLabels)\n",
							"print(\"Area under ROC = %s\" % metrics.areaUnderROC)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Evaluate and Visualize\n",
							"\n",
							"Plot the actual curve to develop a better understanding of the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"## Plot the ROC curve, no need for pandas as this uses the modelSummary object\n",
							"modelSummary = lrModel.stages[-1].summary\n",
							"\n",
							"plt.plot([0, 1], [0, 1], 'r--')\n",
							"plt.plot(modelSummary.roc.select('FPR').collect(),\n",
							"         modelSummary.roc.select('TPR').collect())\n",
							"plt.xlabel('False Positive Rate')\n",
							"plt.ylabel('True Positive Rate')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Exploration and ML Modeling')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 4,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "4",
						"spark.dynamicAllocation.maxExecutors": "4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Predict NYC Taxi Tips using Spark ML and Azure Open Datasets\n",
							"\n",
							"The notebook ingests, visualizes, prepares and then trains a model based on an Open Dataset that tracks NYC Yellow Taxi trips and various attributes around them.\n",
							"The goal is to predict for a given trip whether there will be a trip or not.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import matplotlib.pyplot as plt\n",
							"\n",
							"from pyspark.sql.functions import unix_timestamp\n",
							"\n",
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"from pyspark.ml import Pipeline\n",
							"from pyspark.ml import PipelineModel\n",
							"from pyspark.ml.feature import RFormula\n",
							"from pyspark.ml.feature import OneHotEncoder, StringIndexer, VectorIndexer\n",
							"from pyspark.ml.classification import LogisticRegression\n",
							"from pyspark.mllib.evaluation import BinaryClassificationMetrics\n",
							"from pyspark.ml.evaluation import BinaryClassificationEvaluator"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Ingest Data¶ \n",
							"\n",
							"Get a sample data of nyc yellow taxi to make it faster/easier to evaluate different approaches to prep for the modelling phase later in the notebook."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Import NYC yellow cab data from Azure Open Datasets\n",
							"from azureml.opendatasets import NycTlcYellow\n",
							"\n",
							"from datetime import datetime\n",
							"from dateutil import parser\n",
							"\n",
							"end_date = parser.parse('2018-05-08 00:00:00')\n",
							"start_date = parser.parse('2018-05-01 00:00:00')\n",
							"\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\n",
							"nyc_tlc_df = nyc_tlc.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"#To make development easier, faster and less expensive downsample for now\n",
							"sampled_taxi_df = nyc_tlc_df.sample(True, 0.001, seed=1234)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Exploratory Data Analysis\n",
							"\n",
							"Look at the data and evaluate its suitability for use in a model, do this via some basic charts focussed on tip values and relationships."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"#The charting package needs a Pandas dataframe or numpy array do the conversion\n",
							"sampled_taxi_pd_df = sampled_taxi_df.toPandas()\n",
							"\n",
							"# Look at tips by amount count histogram\n",
							"ax1 = sampled_taxi_pd_df['tipAmount'].plot(kind='hist', bins=25, facecolor='lightblue')\n",
							"ax1.set_title('Tip amount distribution')\n",
							"ax1.set_xlabel('Tip Amount ($)')\n",
							"ax1.set_ylabel('Counts')\n",
							"plt.suptitle('')\n",
							"plt.show()\n",
							"\n",
							"# How many passengers tip'd by various amounts\n",
							"ax2 = sampled_taxi_pd_df.boxplot(column=['tipAmount'], by=['passengerCount'])\n",
							"ax2.set_title('Tip amount by Passenger count')\n",
							"ax2.set_xlabel('Passenger count') \n",
							"ax2.set_ylabel('Tip Amount ($)')\n",
							"plt.suptitle('')\n",
							"plt.show()\n",
							"\n",
							"# Look at the relationship between fare and tip amounts\n",
							"ax = sampled_taxi_pd_df.plot(kind='scatter', x= 'fareAmount', y = 'tipAmount', c='blue', alpha = 0.10, s=2.5*(sampled_taxi_pd_df['passengerCount']))\n",
							"ax.set_title('Tip amount by Fare amount')\n",
							"ax.set_xlabel('Fare Amount ($)')\n",
							"ax.set_ylabel('Tip Amount ($)')\n",
							"plt.axis([-2, 80, -2, 20])\n",
							"plt.suptitle('')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data Prep and Featurization\n",
							"\n",
							"It's clear from the visualizations above that there are a bunch of outliers in the data. These will need to be filtered out in addition there are extra variables that are not going to be useful in the model we build at the end.\n",
							"\n",
							"Finally there is a need to create some new (derived) variables that will work better with the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"taxi_df = sampled_taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'rateCodeId', 'passengerCount'\\\n",
							"                                , 'tripDistance', 'tpepPickupDateTime', 'tpepDropoffDateTime'\\\n",
							"                                , date_format('tpepPickupDateTime', 'hh').alias('pickupHour')\\\n",
							"                                , date_format('tpepPickupDateTime', 'EEEE').alias('weekdayString')\\\n",
							"                                , (unix_timestamp(col('tpepDropoffDateTime')) - unix_timestamp(col('tpepPickupDateTime'))).alias('tripTimeSecs')\\\n",
							"                                , (when(col('tipAmount') > 0, 1).otherwise(0)).alias('tipped')\n",
							"                                )\\\n",
							"                        .filter((sampled_taxi_df.passengerCount > 0) & (sampled_taxi_df.passengerCount < 8)\\\n",
							"                                & (sampled_taxi_df.tipAmount >= 0) & (sampled_taxi_df.tipAmount <= 25)\\\n",
							"                                & (sampled_taxi_df.fareAmount >= 1) & (sampled_taxi_df.fareAmount <= 250)\\\n",
							"                                & (sampled_taxi_df.tipAmount < sampled_taxi_df.fareAmount)\\\n",
							"                                & (sampled_taxi_df.tripDistance > 0) & (sampled_taxi_df.tripDistance <= 100)\\\n",
							"                                & (sampled_taxi_df.rateCodeId <= 5)\n",
							"                                & (sampled_taxi_df.paymentType.isin({\"1\", \"2\"}))\n",
							"                                )"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data Prep and Featurization Part 2\n",
							"\n",
							"Having created new variables its now possible to drop the columns they were derived from so that the dataframe that goes into the model is the smallest in terms of number of variables, that is required.\n",
							"\n",
							"Also create some more features based on new columns from the first round.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"taxi_featurised_df = taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'passengerCount'\\\n",
							"                                                , 'tripDistance', 'weekdayString', 'pickupHour','tripTimeSecs','tipped'\\\n",
							"                                                , when((taxi_df.pickupHour <= 6) | (taxi_df.pickupHour >= 20),\"Night\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 7) & (taxi_df.pickupHour <= 10), \"AMRush\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 11) & (taxi_df.pickupHour <= 15), \"Afternoon\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 16) & (taxi_df.pickupHour <= 19), \"PMRush\")\\\n",
							"                                                .otherwise(0).alias('trafficTimeBins')\n",
							"                                              )\\\n",
							"                                       .filter((taxi_df.tripTimeSecs >= 30) & (taxi_df.tripTimeSecs <= 7200))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Encoding\n",
							"\n",
							"Different ML algorithms support different types of input, for this example Logistic Regression is being used for Binary Classification. This means that any Categorical (string) variables must be converted to numbers.\n",
							"\n",
							"The process is not as simple as a \"map\" style function as the relationship between the numbers can introduce a bias in the resulting model, the approach is to index the variable and then encode using a std approach called One Hot Encoding.\n",
							"\n",
							"This approach requires the encoder to \"learn\"/fit a model over the data in the Spark instance and then transform based on what was learnt.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# The sample uses an algorithm that only works with numeric features convert them so they can be consumed\n",
							"sI1 = StringIndexer(inputCol=\"trafficTimeBins\", outputCol=\"trafficTimeBinsIndex\"); \n",
							"en1 = OneHotEncoder(dropLast=False, inputCol=\"trafficTimeBinsIndex\", outputCol=\"trafficTimeBinsVec\");\n",
							"sI2 = StringIndexer(inputCol=\"weekdayString\", outputCol=\"weekdayIndex\"); \n",
							"en2 = OneHotEncoder(dropLast=False, inputCol=\"weekdayIndex\", outputCol=\"weekdayVec\");\n",
							"\n",
							"# Create a new dataframe that has had the encodings applied\n",
							"encoded_final_df = Pipeline(stages=[sI1, en1, sI2, en2]).fit(taxi_featurised_df).transform(taxi_featurised_df)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Generation of Testing and Training Data Sets\n",
							"Simple split, 70% for training and 30% for testing the model. Playing with this ratio may result in different models.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Decide on the split between training and testing data from the dataframe \n",
							"trainingFraction = 0.7\n",
							"testingFraction = (1-trainingFraction)\n",
							"seed = 1234\n",
							"\n",
							"# Split the dataframe into test and training dataframes\n",
							"train_data_df, test_data_df = encoded_final_df.randomSplit([trainingFraction, testingFraction], seed=seed)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Train the Model\n",
							"\n",
							"Train the Logistic Regression model and then evaluate it using Area under ROC as the metric."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"## Create a new LR object for the model\n",
							"logReg = LogisticRegression(maxIter=10, regParam=0.3, labelCol = 'tipped')\n",
							"\n",
							"## The formula for the model\n",
							"classFormula = RFormula(formula=\"tipped ~ pickupHour + weekdayVec + passengerCount + tripTimeSecs + tripDistance + fareAmount + paymentType+ trafficTimeBinsVec\")\n",
							"\n",
							"## Undertake training and create an LR model\n",
							"lrModel = Pipeline(stages=[classFormula, logReg]).fit(train_data_df)\n",
							"\n",
							"## Saving the model is optional but its another for of inter session cache\n",
							"datestamp = datetime.now().strftime('%m-%d-%Y-%s');\n",
							"fileName = \"lrModel_\" + datestamp;\n",
							"logRegDirfilename = fileName;\n",
							"lrModel.save(logRegDirfilename)\n",
							"\n",
							"## Predict tip 1/0 (yes/no) on the test dataset, evaluation using AUROC\n",
							"predictions = lrModel.transform(test_data_df)\n",
							"predictionAndLabels = predictions.select(\"label\",\"prediction\").rdd\n",
							"metrics = BinaryClassificationMetrics(predictionAndLabels)\n",
							"print(\"Area under ROC = %s\" % metrics.areaUnderROC)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Evaluate and Visualize\n",
							"\n",
							"Plot the actual curve to develop a better understanding of the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"## Plot the ROC curve, no need for pandas as this uses the modelSummary object\n",
							"modelSummary = lrModel.stages[-1].summary\n",
							"\n",
							"plt.plot([0, 1], [0, 1], 'r--')\n",
							"plt.plot(modelSummary.roc.select('FPR').collect(),\n",
							"         modelSummary.roc.select('TPR').collect())\n",
							"plt.xlabel('False Positive Rate')\n",
							"plt.ylabel('True Positive Rate')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 12
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Getting Started with Delta Lake')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "Synapse Spark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Hitchhiker's Guide to Delta Lake (Scala)\n",
							"\n",
							"This tutorial has been adapted for more clarity from its original counterpart [here](https://docs.delta.io/latest/quick-start.html). This notebook helps you quickly explore the main features of [Delta Lake](https://github.com/delta-io/delta). It provides code snippets that show how to read from and write to Delta Lake tables from interactive, batch, and streaming queries.\n",
							"\n",
							"Here's what we will cover:\n",
							"* Create a table\n",
							"* Understanding meta-data\n",
							"* Read data\n",
							"* Update table data\n",
							"* Overwrite table data\n",
							"* Conditional update without overwrite\n",
							"* Read older versions of data using Time Travel\n",
							"* Write a stream of data to a table\n",
							"* Read a stream of changes from a table"
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Configuration\n",
							"Make sure you modify this as appropriate."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"val sessionId = scala.util.Random.nextInt(1000000)\n",
							"val deltaTablePath = s\"/delta/delta-table-$sessionId\";"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Create a table\n",
							"To create a Delta Lake table, write a DataFrame out in the **delta** format. You can use existing Spark SQL code and change the format from parquet, csv, json, and so on, to delta.\n",
							"\n",
							"These operations create a new Delta Lake table using the schema that was inferred from your DataFrame. For the full set of options available when you create a new Delta Lake table, see Create a table and Write to a table (subsequent cells in this notebook)."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"val data = spark.range(0, 5)\n",
							"data.show\n",
							"data.write.format(\"delta\").save(deltaTablePath)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Understanding Meta-data\n",
							"\n",
							"In Delta Lake, meta-data is no different from data i.e., it is stored next to the data. Therefore, an interesting side-effect here is that you can peek into meta-data using regular Spark APIs. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.read.text(s\"$deltaTablePath/_delta_log/\").collect.foreach(println)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Read data\n",
							"\n",
							"You read data in your Delta Lake table by specifying the path to the files: \"/tmp/delta-table-scala\""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"val df = spark.read.format(\"delta\").load(deltaTablePath)\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Update table data\n",
							"\n",
							"Delta Lake supports several operations to modify tables using standard DataFrame APIs. This example runs a batch job to overwrite the data in the table.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"val data = spark.range(5, 10)\n",
							"data.write.format(\"delta\").mode(\"overwrite\").save(deltaTablePath)\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"When you now inspect the meta-data, what you will notice is that the original data is over-written. Well, not in a true sense but appropriate entries are added to Delta's transaction log so it can provide an \"illusion\" that the original data was deleted. We can verify this by re-inspecting the meta-data. You will see several entries indicating reference removal to the original data."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.read.text(s\"$deltaTablePath/_delta_log/\").collect.foreach(println)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Save as catalog tables\n",
							"\n",
							"Delta Lake can write to managed or external catalog tables."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Write data to a new managed catalog table.\n",
							"data.write.format(\"delta\").saveAsTable(\"ManagedDeltaTable\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"// Define an external catalog table that points to the existing Delta Lake data in storage.\n",
							"spark.sql(s\"CREATE TABLE ExternalDeltaTable USING DELTA LOCATION '$deltaTablePath'\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"// List the 2 new tables.\n",
							"spark.sql(\"SHOW TABLES\").show\n",
							"\n",
							"// Explore their properties.\n",
							"spark.sql(\"DESCRIBE EXTENDED ManagedDeltaTable\").show(truncate=false)\n",
							"spark.sql(\"DESCRIBE EXTENDED ExternalDeltaTable\").show(truncate=false)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Conditional update without overwrite\n",
							"\n",
							"Delta Lake provides programmatic APIs to conditional update, delete, and merge (upsert) data into tables. For more information on these operations, see [Table Deletes, Updates, and Merges](https://docs.delta.io/latest/delta-update.html)."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import io.delta.tables._\n",
							"import org.apache.spark.sql.functions._\n",
							"\n",
							"val deltaTable = DeltaTable.forPath(deltaTablePath)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"source": [
							"// Update every even value by adding 100 to it\n",
							"deltaTable.update(\n",
							"  condition = expr(\"id % 2 == 0\"),\n",
							"  set = Map(\"id\" -> expr(\"id + 100\")))\n",
							"deltaTable.toDF.show"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"// Delete every even value\n",
							"deltaTable.delete(condition = expr(\"id % 2 == 0\"))\n",
							"deltaTable.toDF.show"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"source": [
							"// Upsert (merge) new data\n",
							"val newData = spark.range(0, 20).toDF\n",
							"\n",
							"deltaTable.as(\"oldData\").\n",
							"  merge(\n",
							"    newData.as(\"newData\"),\n",
							"    \"oldData.id = newData.id\").\n",
							"  whenMatched.\n",
							"  update(Map(\"id\" -> lit(-1))).\n",
							"  whenNotMatched.\n",
							"  insert(Map(\"id\" -> col(\"newData.id\"))).\n",
							"  execute()\n",
							"\n",
							"deltaTable.toDF.show()"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"source": [
							"## History\n",
							"Delta's most powerful feature is the ability to allow looking into history i.e., the changes that were made to the underlying Delta Table. The cell below shows how simple it is to inspect the history."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"deltaTable.history.show(false)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Read older versions of data using Time Travel\n",
							"\n",
							"You can query previous snapshots of your Delta Lake table by using a feature called Time Travel. If you want to access the data that you overwrote, you can query a snapshot of the table before you overwrote the first set of data using the versionAsOf option.\n",
							"\n",
							"Once you run the cell below, you should see the first set of data, from before you overwrote it. Time Travel is an extremely powerful feature that takes advantage of the power of the Delta Lake transaction log to access data that is no longer in the table. Removing the version 0 option (or specifying version 1) would let you see the newer data again. For more information, see [Query an older snapshot of a table (time travel)](https://docs.delta.io/latest/delta-batch.html#deltatimetravel)."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"val df = spark.read.format(\"delta\").option(\"versionAsOf\", 0).load(deltaTablePath)\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Write a stream of data to a table\n",
							"\n",
							"You can also write to a Delta Lake table using Spark's Structured Streaming. The Delta Lake transaction log guarantees exactly-once processing, even when there are other streams or batch queries running concurrently against the table. By default, streams run in append mode, which adds new records to the table.\n",
							"\n",
							"For more information about Delta Lake integration with Structured Streaming, see [Table Streaming Reads and Writes](https://docs.delta.io/latest/delta-streaming.html).\n",
							"\n",
							"In the cells below, here's what we are doing:\n",
							"\n",
							"1. *Cell 28* Setup a simple Spark Structured Streaming job to generate a sequence and make the job write into our Delta Table\n",
							"2. *Cell 30* Show the newly appended data\n",
							"3. *Cell 31* Inspect history\n",
							"4. *Cell 32* Stop the structured streaming job\n",
							"5. *Cell 33* Inspect history <-- You'll notice appends have stopped"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"val streamingDf = spark.readStream.format(\"rate\").load()\n",
							"val stream = streamingDf.select($\"value\" as \"id\").writeStream.format(\"delta\").option(\"checkpointLocation\", s\"/tmp/checkpoint-$sessionId\").start(deltaTablePath)"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Read a stream of changes from a table\n",
							"\n",
							"While the stream is writing to the Delta Lake table, you can also read from that table as streaming source. For example, you can start another streaming query that prints all the changes made to the Delta Lake table."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"deltaTable.toDF.sort($\"id\".desc).show"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"source": [
							"deltaTable.history.show"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"source": [
							"stream.stop"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"source": [
							"deltaTable.history.show"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Convert Parquet to Delta\n",
							"You can do an in-place conversion from the Parquet format to Delta.## Cell title\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"val parquetPath = s\"/parquet/parquet-table-$sessionId\"\n",
							"\n",
							"val data = spark.range(0,5)\n",
							"data.write.parquet(parquetPath)\n",
							"\n",
							"// Confirm that the data isn't in the Delta format\n",
							"DeltaTable.isDeltaTable(parquetPath)"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"source": [
							"DeltaTable.convertToDelta(spark, s\"parquet.`$parquetPath`\")\n",
							"\n",
							"// Confirm that the converted data is now in the Delta format\n",
							"DeltaTable.isDeltaTable(parquetPath)"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "markdown",
						"source": [
							"## SQL Support\n",
							"Delta supports table utility commands through SQL.  You can use SQL to:\n",
							"* Get a DeltaTable's history\n",
							"* Vacuum a DeltaTable\n",
							"* Convert a Parquet file to Delta\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(s\"DESCRIBE HISTORY delta.`$deltaTablePath`\").show()"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(s\"VACUUM delta.`$deltaTablePath`\").show()"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"source": [
							"val parquetId = scala.util.Random.nextInt(1000)\n",
							"val parquetPath = s\"/parquet/parquet-table-$sessionId-$parquetId\"\n",
							"\n",
							"val data = spark.range(0,5)\n",
							"data.write.parquet(parquetPath)\n",
							"\n",
							"// Confirm that the data isn't in the Delta format\n",
							"DeltaTable.isDeltaTable(parquetPath)\n",
							"\n",
							"// Use SQL to convert the parquet table to Delta\n",
							"spark.sql(s\"CONVERT TO DELTA parquet.`$parquetPath`\")\n",
							"\n",
							"DeltaTable.isDeltaTable(parquetPath)"
						],
						"outputs": [],
						"execution_count": 25
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NYC_holidays_Scala')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 6,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "6",
						"spark.dynamicAllocation.maxExecutors": "6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "Synapse Spark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Using Azure Open Datasets in Synapse - Enrich NYC Green Taxi Data with Holiday and Weather\n",
							"\n",
							"Synapse has [Azure Open Datasets](https://azure.microsoft.com/en-us/services/open-datasets/) package pre-installed. This notebook provides examples of how to enrich NYC Green Taxi Data with Holiday and Weather with focusing on :\n",
							"- read Azure Open Dataset\n",
							"- manipulate the data to prepare for further analysis, including column projection, filtering, grouping and joins etc. \n",
							"- create a Spark table to be used in other notebooks for modeling training"
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data loading \n",
							"Let's first load the [NYC green taxi trip records](https://azure.microsoft.com/en-us/services/open-datasets/catalog/nyc-taxi-limousine-commission-green-taxi-trip-records/). The Open Datasets package contains a class representing each data source (NycTlcGreen for example) to easily filter date parameters before downloading."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Load nyc green taxi trip records from azure open dataset\n",
							"val blob_account_name = \"azureopendatastorage\"\n",
							"\n",
							"val nyc_blob_container_name = \"nyctlc\"\n",
							"val nyc_blob_relative_path = \"green\"\n",
							"val nyc_blob_sas_token = \"\"\n",
							"\n",
							"val nyc_wasbs_path = f\"wasbs://$nyc_blob_container_name@$blob_account_name.blob.core.windows.net/$nyc_blob_relative_path\"\n",
							"spark.conf.set(f\"fs.azure.sas.$nyc_blob_container_name.$blob_account_name.blob.core.windows.net\",nyc_blob_sas_token)\n",
							"\n",
							"val nyc_tlc = spark.read.parquet(nyc_wasbs_path)\n",
							"\n",
							"//nyc_tlc.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"// Filter data by time range\n",
							"import java.sql.Timestamp\n",
							"import org.joda.time.DateTime\n",
							"\n",
							"val end_date = new Timestamp(DateTime.parse(\"2018-06-06\").getMillis)\n",
							"val start_date = new Timestamp(DateTime.parse(\"2018-05-01\").getMillis)\n",
							"\n",
							"val nyc_tlc_df = nyc_tlc.filter((nyc_tlc(\"lpepPickupDatetime\") >= start_date) && (nyc_tlc(\"lpepPickupDatetime\") <= end_date)) \n",
							"nyc_tlc_df.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Now that the initial data is loaded. Let's do some projection on the data to \n",
							"- create new columns for the month number, day of month, day of week, and hour of day. These info is going to be used in the training model to factor in time-based seasonality.\n",
							"- add a static feature for the country code to join holiday data. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Extract month, day of month, and day of week from pickup datetime and add a static column for the country code to join holiday data. \n",
							"import org.apache.spark.sql.functions._\n",
							"\n",
							"val nyc_tlc_df_expand = (\n",
							"                        nyc_tlc_df.withColumn(\"datetime\", to_date(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"month_num\",month(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"day_of_month\",dayofmonth(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"day_of_week\",dayofweek(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"hour_of_day\",hour(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"country_code\",lit(\"US\"))\n",
							"                        )"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"// Display 5 rows\n",
							"// nyc_tlc_df_expand.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Remove some of the columns that won't need for modeling or additional feature building.\n",
							"\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Remove unused columns from nyc green taxi data\n",
							"val nyc_tlc_df_clean = nyc_tlc_df_expand.drop(\n",
							"                    \"lpepDropoffDatetime\", \"puLocationId\", \"doLocationId\", \"pickupLongitude\", \n",
							"                     \"pickupLatitude\", \"dropoffLongitude\",\"dropoffLatitude\" ,\"rateCodeID\", \n",
							"                     \"storeAndFwdFlag\",\"paymentType\", \"fareAmount\", \"extra\", \"mtaTax\",\n",
							"                     \"improvementSurcharge\", \"tollsAmount\", \"ehailFee\", \"tripType\" )"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"// Display 5 rows\n",
							"nyc_tlc_df_clean.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Enrich with holiday data\n",
							"Now that we have taxi data downloaded and roughly prepared, add in holiday data as additional features. Holiday-specific features will assist model accuracy, as major holidays are times where taxi demand increases dramatically and supply becomes limited. \n",
							"\n",
							"Let's load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) from Azure Open datasets.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Load public holidays data from azure open dataset\n",
							"val hol_blob_container_name = \"holidaydatacontainer\"\n",
							"val hol_blob_relative_path = \"Processed\"\n",
							"val hol_blob_sas_token = \"\"\n",
							"\n",
							"val hol_wasbs_path = f\"wasbs://$hol_blob_container_name@$blob_account_name.blob.core.windows.net/$hol_blob_relative_path\"\n",
							"spark.conf.set(f\"fs.azure.sas.$hol_blob_container_name.$blob_account_name.blob.core.windows.net\",hol_blob_sas_token)\n",
							"\n",
							"val hol_raw = spark.read.parquet(hol_wasbs_path)\n",
							"\n",
							"// Filter data by time range\n",
							"val hol_df = hol_raw.filter((hol_raw(\"date\") >= start_date) && (hol_raw(\"date\") <= end_date))\n",
							"\n",
							"// Display 5 rows\n",
							"// hol_df.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Rename the countryRegionCode and date columns to match the respective field names from the taxi data, and also normalize the time so it can be used as a key. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"val hol_df_clean = (\n",
							"                hol_df.withColumnRenamed(\"countryRegionCode\",\"country_code\")\n",
							"                .withColumn(\"datetime\",to_date(col(\"date\")))\n",
							"                )\n",
							"\n",
							"hol_df_clean.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, join the holiday data with the taxi data by performing a left-join. This will preserve all records from taxi data, but add in holiday data where it exists for the corresponding datetime and country_code, which in this case is always \"US\". Preview the data to verify that they were merged correctly."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// enrich taxi data with holiday data\n",
							"val nyc_taxi_holiday_df = nyc_tlc_df_clean.join(hol_df_clean, Seq(\"datetime\", \"country_code\") , \"left\")\n",
							"\n",
							"nyc_taxi_holiday_df.show(5,truncate = false)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"// Create a temp table and filter out non empty holiday rows\n",
							"\n",
							"nyc_taxi_holiday_df.createOrReplaceTempView(\"nyc_taxi_holiday_df\")\n",
							"val result = spark.sql(\"SELECT * from nyc_taxi_holiday_df WHERE holidayName is NOT NULL \")\n",
							"result.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Enrich with weather data¶\n",
							"\n",
							"Now we append NOAA surface weather data to the taxi and holiday data. Use a similar approach to fetch the [NOAA weather history data](https://azure.microsoft.com/en-us/services/open-datasets/catalog/noaa-integrated-surface-data/) from Azure Open Datasets. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Load weather data from azure open dataset\n",
							"val weather_blob_container_name = \"isdweatherdatacontainer\"\n",
							"val weather_blob_relative_path = \"ISDWeather/\"\n",
							"val weather_blob_sas_token = \"\"\n",
							"\n",
							"val weather_wasbs_path = f\"wasbs://$weather_blob_container_name@$blob_account_name.blob.core.windows.net/$weather_blob_relative_path\"\n",
							"spark.conf.set(f\"fs.azure.sas.$weather_blob_container_name.$blob_account_name.blob.core.windows.net\",hol_blob_sas_token)\n",
							"\n",
							"val isd = spark.read.parquet(weather_wasbs_path)\n",
							"\n",
							"// Display 5 rows\n",
							"// isd.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"// Filter data by time range\n",
							"val isd_df = isd.filter((isd(\"datetime\") >= start_date) && (isd(\"datetime\") <= end_date))\n",
							"\n",
							"// Display 5 rows\n",
							"isd_df.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"// Filter out weather info for new york city, remove the recording with null temperature \n",
							"\n",
							"val weather_df = (\n",
							"                isd_df.filter(isd_df(\"latitude\") >= \"40.53\")\n",
							"                        .filter(isd_df(\"latitude\") <= \"40.88\")\n",
							"                        .filter(isd_df(\"longitude\") >= \"-74.09\")\n",
							"                        .filter(isd_df(\"longitude\") <= \"-73.72\")\n",
							"                        .filter(isd_df(\"temperature\").isNotNull)\n",
							"                        .withColumnRenamed(\"datetime\",\"datetime_full\")\n",
							"                        )"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"// Remove unused columns\n",
							"val weather_df_clean = weather_df.drop(\"usaf\", \"wban\", \"longitude\", \"latitude\").withColumn(\"datetime\", to_date(col(\"datetime_full\")))\n",
							"\n",
							"//weather_df_clean.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next group the weather data so that you have daily aggregated weather values. \n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Enrich weather data with aggregation statistics\n",
							"\n",
							"val weather_df_grouped = (\n",
							"                        weather_df_clean.groupBy('datetime).\n",
							"                        agg(\n",
							"                            mean('snowDepth) as \"avg_snowDepth\",\n",
							"                            max('precipTime) as \"max_precipTime\",\n",
							"                            mean('temperature) as \"avg_temperature\",\n",
							"                            max('precipDepth) as \"max_precipDepth\"\n",
							"                            )\n",
							"                        )\n",
							"\n",
							"weather_df_grouped.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Merge the taxi and holiday data you prepared with the new weather data. This time you only need the datetime key, and again perform a left-join of the data. Run the describe() function on the new dataframe to see summary statistics for each field."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Enrich taxi data with weather\n",
							"val nyc_taxi_holiday_weather_df = nyc_taxi_holiday_df.join(weather_df_grouped, Seq(\"datetime\") ,\"left\")\n",
							"nyc_taxi_holiday_weather_df.cache()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"nyc_taxi_holiday_weather_df.show(5,truncate = false)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"// Run the describe() function on the new dataframe to see summary statistics for each field.\n",
							"display(nyc_taxi_holiday_weather_df.describe())"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"nyc_taxi_holiday_weather_df.count"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"The summary statistics shows that the totalAmount field has negative values, which don't make sense in the context.\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Remove invalid rows with less than 0 taxi fare or tip\n",
							"val final_df = (\n",
							"            nyc_taxi_holiday_weather_df.\n",
							"            filter(nyc_taxi_holiday_weather_df(\"tipAmount\") > 0).\n",
							"            filter(nyc_taxi_holiday_weather_df(\"totalAmount\") > 0)\n",
							"            )"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Cleaning up the existing Database\n",
							"\n",
							"First we need to drop the tables since Spark requires that a database is empty before we can drop the Database.\n",
							"\n",
							"Then we recreate the database and set the default database context to it."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"DROP TABLE IF EXISTS NYCTaxi.nyc_taxi_holiday_weather\"); "
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"DROP DATABASE IF EXISTS NYCTaxi\"); \n",
							"spark.sql(\"CREATE DATABASE NYCTaxi\"); \n",
							"spark.sql(\"USE NYCTaxi\");"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Creating a new table\n",
							"We create a nyc_taxi_holiday_weather table from the nyc_taxi_holiday_weather dataframe.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"final_df.write.saveAsTable(\"nyc_taxi_holiday_weather\");\n",
							"val final_results = spark.sql(\"SELECT COUNT(*) FROM nyc_taxi_holiday_weather\");\n",
							"final_results.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ScalaSample1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {}
				},
				"metadata": {
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"val hol_blob_account_name = \"azureopendatastorage\"\n",
							"val hol_blob_container_name = \"holidaydatacontainer\"\n",
							"val hol_blob_relative_path = \"Processed\"\n",
							"val hol_blob_sas_token = \"\"\n",
							"\n",
							"val hol_wasbs_path = f\"wasbs://$hol_blob_container_name@$hol_blob_account_name.blob.core.windows.net/$hol_blob_relative_path\"\n",
							"spark.conf.set(f\"fs.azure.sas.$hol_blob_container_name.$hol_blob_account_name.blob.core.windows.net\",hol_blob_sas_token)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"val hol_df = spark.read.parquet(hol_wasbs_path) \n",
							"hol_df.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"source": [
							"val account_name = \"\" // replace with your blob name\n",
							"val container_name = \"\" //replace with your container name\n",
							"val relative_path = \"\" //replace with your relative folder path\n",
							"\n",
							"val adls_path = f\"abfss://$container_name@$account_name.dfs.core.windows.net/$relative_path\""
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"val parquet_path = adls_path + \"holiday.parquet\"\n",
							"val json_path = adls_path + \"holiday.json\"\n",
							"val csv_path = adls_path + \"holiday.csv\""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"import org.apache.spark.sql.SaveMode\n",
							"\n",
							"hol_df.write.mode(SaveMode.Overwrite).parquet(parquet_path)\n",
							"hol_df.write.mode(SaveMode.Overwrite).json(json_path)\n",
							"hol_df.write.mode(SaveMode.Overwrite).option(\"header\", \"true\").csv(csv_path)"
						],
						"outputs": [],
						"execution_count": 8
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkMLLib')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 6,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "6",
						"spark.dynamicAllocation.maxExecutors": "6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import matplotlib.pyplot as plt\n",
							"from datetime import datetime\n",
							"from dateutil import parser\n",
							"from pyspark.sql.functions import unix_timestamp, date_format, col, when\n",
							"from pyspark.ml import Pipeline\n",
							"from pyspark.ml import PipelineModel\n",
							"from pyspark.ml.feature import RFormula\n",
							"from pyspark.ml.feature import OneHotEncoder, StringIndexer, VectorIndexer\n",
							"from pyspark.ml.classification import LogisticRegression\n",
							"from pyspark.mllib.evaluation import BinaryClassificationMetrics\n",
							"from pyspark.ml.evaluation import BinaryClassificationEvaluator"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.opendatasets import NycTlcYellow\n",
							"\n",
							"end_date = parser.parse('2018-06-06')\n",
							"start_date = parser.parse('2018-05-01')\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\n",
							"filtered_df = nyc_tlc.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"# To make development easier, faster and less expensive down sample for now\n",
							"sampled_taxi_df = filtered_df.sample(True, 0.001, seed=1234)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"vendorID"
									],
									"values": [
										"tpepPickupDateTime"
									],
									"yLabel": "tpepPickupDateTime",
									"xLabel": "vendorID",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"{\\\"tpepPickupDateTime\\\":{\\\"1\\\":0,\\\"2\\\":0}}\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"#sampled_taxi_df.show(5)\n",
							"display(sampled_taxi_df)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"sampled_taxi_df.createOrReplaceTempView(\"nytaxi\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"taxi_df = sampled_taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'rateCodeId', 'passengerCount'\\\n",
							"                                , 'tripDistance', 'tpepPickupDateTime', 'tpepDropoffDateTime'\\\n",
							"                                , date_format('tpepPickupDateTime', 'hh').alias('pickupHour')\\\n",
							"                                , date_format('tpepPickupDateTime', 'EEEE').alias('weekdayString')\\\n",
							"                                , (unix_timestamp(col('tpepDropoffDateTime')) - unix_timestamp(col('tpepPickupDateTime'))).alias('tripTimeSecs')\\\n",
							"                                , (when(col('tipAmount') > 0, 1).otherwise(0)).alias('tipped')\n",
							"                                )\\\n",
							"                        .filter((sampled_taxi_df.passengerCount > 0) & (sampled_taxi_df.passengerCount < 8)\\\n",
							"                                & (sampled_taxi_df.tipAmount >= 0) & (sampled_taxi_df.tipAmount <= 25)\\\n",
							"                                & (sampled_taxi_df.fareAmount >= 1) & (sampled_taxi_df.fareAmount <= 250)\\\n",
							"                                & (sampled_taxi_df.tipAmount < sampled_taxi_df.fareAmount)\\\n",
							"                                & (sampled_taxi_df.tripDistance > 0) & (sampled_taxi_df.tripDistance <= 100)\\\n",
							"                                & (sampled_taxi_df.rateCodeId <= 5)\n",
							"                                & (sampled_taxi_df.paymentType.isin({\"1\", \"2\"}))\n",
							"                                )"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"taxi_featurised_df = taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'passengerCount'\\\n",
							"                                                , 'tripDistance', 'weekdayString', 'pickupHour','tripTimeSecs','tipped'\\\n",
							"                                                , when((taxi_df.pickupHour <= 6) | (taxi_df.pickupHour >= 20),\"Night\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 7) & (taxi_df.pickupHour <= 10), \"AMRush\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 11) & (taxi_df.pickupHour <= 15), \"Afternoon\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 16) & (taxi_df.pickupHour <= 19), \"PMRush\")\\\n",
							"                                                .otherwise(0).alias('trafficTimeBins')\n",
							"                                              )\\\n",
							"                                       .filter((taxi_df.tripTimeSecs >= 30) & (taxi_df.tripTimeSecs <= 7200))"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"source": [
							"# Since the sample uses an algorithm that only works with numeric features, convert them so they can be consumed\n",
							"sI1 = StringIndexer(inputCol=\"trafficTimeBins\", outputCol=\"trafficTimeBinsIndex\")\n",
							"en1 = OneHotEncoder(dropLast=False, inputCol=\"trafficTimeBinsIndex\", outputCol=\"trafficTimeBinsVec\")\n",
							"sI2 = StringIndexer(inputCol=\"weekdayString\", outputCol=\"weekdayIndex\")\n",
							"en2 = OneHotEncoder(dropLast=False, inputCol=\"weekdayIndex\", outputCol=\"weekdayVec\")\n",
							"\n",
							"# Create a new dataframe that has had the encodings applied\n",
							"encoded_final_df = Pipeline(stages=[sI1, en1, sI2, en2]).fit(taxi_featurised_df).transform(taxi_featurised_df)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"source": [
							"#Decide on the split between training and testing data from the dataframe\n",
							"trainingFraction = 0.7\n",
							"testingFraction = (1-trainingFraction)\n",
							"seed = 1234\n",
							"\n",
							"# Split the dataframe into test and training dataframes\n",
							"train_data_df, test_data_df = encoded_final_df.randomSplit([trainingFraction, testingFraction], seed=seed)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"## Create a new LR object for the model\n",
							"logReg = LogisticRegression(maxIter=10, regParam=0.3, labelCol = 'tipped')\n",
							"\n",
							"## The formula for the model\n",
							"classFormula = RFormula(formula=\"tipped ~ pickupHour + weekdayVec + passengerCount + tripTimeSecs + tripDistance + fareAmount + paymentType+ trafficTimeBinsVec\")\n",
							"\n",
							"## Undertake training and create an LR model\n",
							"lrModel = Pipeline(stages=[classFormula, logReg]).fit(train_data_df)\n",
							"\n",
							"## Saving the model is optional but its another form of inter session cache\n",
							"datestamp = datetime.now().strftime('%m-%d-%Y-%s')\n",
							"fileName = \"lrModel_\" + datestamp\n",
							"logRegDirfilename = fileName\n",
							"lrModel.save(logRegDirfilename)\n",
							"\n",
							"## Predict tip 1/0 (yes/no) on the test dataset, evaluation using AUROC\n",
							"predictions = lrModel.transform(test_data_df)\n",
							"predictionAndLabels = predictions.select(\"label\",\"prediction\").rdd\n",
							"metrics = BinaryClassificationMetrics(predictionAndLabels)\n",
							"print(\"Area under ROC = %s\" % metrics.areaUnderROC)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"source": [
							"## Plot the ROC curve, no need for pandas as this uses the modelSummary object\n",
							"modelSummary = lrModel.stages[-1].summary\n",
							"\n",
							"plt.plot([0, 1], [0, 1], 'r--')\n",
							"plt.plot(modelSummary.roc.select('FPR').collect(),\n",
							"         modelSummary.roc.select('TPR').collect())\n",
							"plt.xlabel('False Positive Rate')\n",
							"plt.ylabel('True Positive Rate')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Using Azure Open Datasets in Synapse')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "Synapse Spark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Using Azure Open Datasets in Synapse - Enrich NYC Green Taxi Data with Holiday and Weather\n",
							"\n",
							"Synapse has [Azure Open Datasets](https://azure.microsoft.com/en-us/services/open-datasets/) package pre-installed. This notebook provides examples of how to enrich NYC Green Taxi Data with Holiday and Weather with focusing on :\n",
							"- read Azure Open Dataset\n",
							"- manipulate the data to prepare for further analysis, including column projection, filtering, grouping and joins etc. \n",
							"- create a Spark table to be used in other notebooks for modeling training"
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data loading \n",
							"Let's first load the [NYC green taxi trip records](https://azure.microsoft.com/en-us/services/open-datasets/catalog/nyc-taxi-limousine-commission-green-taxi-trip-records/). The Open Datasets package contains a class representing each data source (NycTlcGreen for example) to easily filter date parameters before downloading."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Load nyc green taxi trip records from azure open dataset\n",
							"val blob_account_name = \"azureopendatastorage\"\n",
							"\n",
							"val nyc_blob_container_name = \"nyctlc\"\n",
							"val nyc_blob_relative_path = \"green\"\n",
							"val nyc_blob_sas_token = \"\"\n",
							"\n",
							"val nyc_wasbs_path = f\"wasbs://$nyc_blob_container_name@$blob_account_name.blob.core.windows.net/$nyc_blob_relative_path\"\n",
							"spark.conf.set(f\"fs.azure.sas.$nyc_blob_container_name.$blob_account_name.blob.core.windows.net\",nyc_blob_sas_token)\n",
							"\n",
							"val nyc_tlc = spark.read.parquet(nyc_wasbs_path)\n",
							"\n",
							"//nyc_tlc.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"// Filter data by time range\n",
							"import java.sql.Timestamp\n",
							"import org.joda.time.DateTime\n",
							"\n",
							"val end_date = new Timestamp(DateTime.parse(\"2018-06-06\").getMillis)\n",
							"val start_date = new Timestamp(DateTime.parse(\"2018-05-01\").getMillis)\n",
							"\n",
							"val nyc_tlc_df = nyc_tlc.filter((nyc_tlc(\"lpepPickupDatetime\") >= start_date) && (nyc_tlc(\"lpepPickupDatetime\") <= end_date)) \n",
							"nyc_tlc_df.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"Now that the initial data is loaded. Let's do some projection on the data to \n",
							"- create new columns for the month number, day of month, day of week, and hour of day. These info is going to be used in the training model to factor in time-based seasonality.\n",
							"- add a static feature for the country code to join holiday data. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Extract month, day of month, and day of week from pickup datetime and add a static column for the country code to join holiday data. \n",
							"import org.apache.spark.sql.functions._\n",
							"\n",
							"val nyc_tlc_df_expand = (\n",
							"                        nyc_tlc_df.withColumn(\"datetime\", to_date(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"month_num\",month(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"day_of_month\",dayofmonth(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"day_of_week\",dayofweek(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"hour_of_day\",hour(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"country_code\",lit(\"US\"))\n",
							"                        )"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"source": [
							"// Display 5 rows\n",
							"// nyc_tlc_df_expand.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"Remove some of the columns that won't need for modeling or additional feature building.\n",
							"\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Remove unused columns from nyc green taxi data\n",
							"val nyc_tlc_df_clean = nyc_tlc_df_expand.drop(\n",
							"                    \"lpepDropoffDatetime\", \"puLocationId\", \"doLocationId\", \"pickupLongitude\", \n",
							"                     \"pickupLatitude\", \"dropoffLongitude\",\"dropoffLatitude\" ,\"rateCodeID\", \n",
							"                     \"storeAndFwdFlag\",\"paymentType\", \"fareAmount\", \"extra\", \"mtaTax\",\n",
							"                     \"improvementSurcharge\", \"tollsAmount\", \"ehailFee\", \"tripType\" )"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"// Display 5 rows\n",
							"nyc_tlc_df_clean.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Enrich with holiday data\n",
							"Now that we have taxi data downloaded and roughly prepared, add in holiday data as additional features. Holiday-specific features will assist model accuracy, as major holidays are times where taxi demand increases dramatically and supply becomes limited. \n",
							"\n",
							"Let's load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) from Azure Open datasets.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Load public holidays data from azure open dataset\n",
							"val hol_blob_container_name = \"holidaydatacontainer\"\n",
							"val hol_blob_relative_path = \"Processed\"\n",
							"val hol_blob_sas_token = \"\"\n",
							"\n",
							"val hol_wasbs_path = f\"wasbs://$hol_blob_container_name@$blob_account_name.blob.core.windows.net/$hol_blob_relative_path\"\n",
							"spark.conf.set(f\"fs.azure.sas.$hol_blob_container_name.$blob_account_name.blob.core.windows.net\",hol_blob_sas_token)\n",
							"\n",
							"val hol_raw = spark.read.parquet(hol_wasbs_path)\n",
							"\n",
							"// Filter data by time range\n",
							"val hol_df = hol_raw.filter((hol_raw(\"date\") >= start_date) && (hol_raw(\"date\") <= end_date))\n",
							"\n",
							"// Display 5 rows\n",
							"// hol_df.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"source": [
							"Rename the countryRegionCode and date columns to match the respective field names from the taxi data, and also normalize the time so it can be used as a key. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"val hol_df_clean = (\n",
							"                hol_df.withColumnRenamed(\"countryRegionCode\",\"country_code\")\n",
							"                .withColumn(\"datetime\",to_date(col(\"date\")))\n",
							"                )\n",
							"\n",
							"hol_df_clean.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, join the holiday data with the taxi data by performing a left-join. This will preserve all records from taxi data, but add in holiday data where it exists for the corresponding datetime and country_code, which in this case is always \"US\". Preview the data to verify that they were merged correctly."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// enrich taxi data with holiday data\n",
							"val nyc_taxi_holiday_df = nyc_tlc_df_clean.join(hol_df_clean, Seq(\"datetime\", \"country_code\") , \"left\")\n",
							"\n",
							"nyc_taxi_holiday_df.show(5,truncate = false)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"source": [
							"// Create a temp table and filter out non empty holiday rows\n",
							"\n",
							"nyc_taxi_holiday_df.createOrReplaceTempView(\"nyc_taxi_holiday_df\")\n",
							"val result = spark.sql(\"SELECT * from nyc_taxi_holiday_df WHERE holidayName is NOT NULL \")\n",
							"result.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Enrich with weather data¶\n",
							"\n",
							"Now we append NOAA surface weather data to the taxi and holiday data. Use a similar approach to fetch the [NOAA weather history data](https://azure.microsoft.com/en-us/services/open-datasets/catalog/noaa-integrated-surface-data/) from Azure Open Datasets. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Load weather data from azure open dataset\n",
							"val weather_blob_container_name = \"isdweatherdatacontainer\"\n",
							"val weather_blob_relative_path = \"ISDWeather/\"\n",
							"val weather_blob_sas_token = \"\"\n",
							"\n",
							"val weather_wasbs_path = f\"wasbs://$weather_blob_container_name@$blob_account_name.blob.core.windows.net/$weather_blob_relative_path\"\n",
							"spark.conf.set(f\"fs.azure.sas.$weather_blob_container_name.$blob_account_name.blob.core.windows.net\",hol_blob_sas_token)\n",
							"\n",
							"val isd = spark.read.parquet(weather_wasbs_path)\n",
							"\n",
							"// Display 5 rows\n",
							"// isd.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"source": [
							"// Filter data by time range\n",
							"val isd_df = isd.filter((isd(\"datetime\") >= start_date) && (isd(\"datetime\") <= end_date))\n",
							"\n",
							"// Display 5 rows\n",
							"isd_df.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"source": [
							"// Filter out weather info for new york city, remove the recording with null temperature \n",
							"\n",
							"val weather_df = (\n",
							"                isd_df.filter(isd_df(\"latitude\") >= \"40.53\")\n",
							"                        .filter(isd_df(\"latitude\") <= \"40.88\")\n",
							"                        .filter(isd_df(\"longitude\") >= \"-74.09\")\n",
							"                        .filter(isd_df(\"longitude\") <= \"-73.72\")\n",
							"                        .filter(isd_df(\"temperature\").isNotNull)\n",
							"                        .withColumnRenamed(\"datetime\",\"datetime_full\")\n",
							"                        )"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"source": [
							"// Remove unused columns\n",
							"val weather_df_clean = weather_df.drop(\"usaf\", \"wban\", \"longitude\", \"latitude\").withColumn(\"datetime\", to_date(col(\"datetime_full\")))\n",
							"\n",
							"//weather_df_clean.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next group the weather data so that you have daily aggregated weather values. \n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Enrich weather data with aggregation statistics\n",
							"\n",
							"val weather_df_grouped = (\n",
							"                        weather_df_clean.groupBy('datetime).\n",
							"                        agg(\n",
							"                            mean('snowDepth) as \"avg_snowDepth\",\n",
							"                            max('precipTime) as \"max_precipTime\",\n",
							"                            mean('temperature) as \"avg_temperature\",\n",
							"                            max('precipDepth) as \"max_precipDepth\"\n",
							"                            )\n",
							"                        )\n",
							"\n",
							"weather_df_grouped.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"source": [
							"Merge the taxi and holiday data you prepared with the new weather data. This time you only need the datetime key, and again perform a left-join of the data. Run the describe() function on the new dataframe to see summary statistics for each field."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Enrich taxi data with weather\n",
							"val nyc_taxi_holiday_weather_df = nyc_taxi_holiday_df.join(weather_df_grouped, Seq(\"datetime\") ,\"left\")\n",
							"nyc_taxi_holiday_weather_df.cache()"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"source": [
							"nyc_taxi_holiday_weather_df.show(5,truncate = false)"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"// Run the describe() function on the new dataframe to see summary statistics for each field.\n",
							"display(nyc_taxi_holiday_weather_df.describe())"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "markdown",
						"source": [
							"The summary statistics shows that the totalAmount field has negative values, which don't make sense in the context.\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Remove invalid rows with less than 0 taxi fare or tip\n",
							"val final_df = (\n",
							"            nyc_taxi_holiday_weather_df.\n",
							"            filter(nyc_taxi_holiday_weather_df(\"tipAmount\") > 0).\n",
							"            filter(nyc_taxi_holiday_weather_df(\"totalAmount\") > 0)\n",
							"            )"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Cleaning up the existing Database\n",
							"\n",
							"First we need to drop the tables since Spark requires that a database is empty before we can drop the Database.\n",
							"\n",
							"Then we recreate the database and set the default database context to it."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"DROP TABLE IF EXISTS NYCTaxi.nyc_taxi_holiday_weather\"); "
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"DROP DATABASE IF EXISTS NYCTaxi\"); \n",
							"spark.sql(\"CREATE DATABASE NYCTaxi\"); \n",
							"spark.sql(\"USE NYCTaxi\");"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Creating a new table\n",
							"We create a nyc_taxi_holiday_weather table from the nyc_taxi_holiday_weather dataframe.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"final_df.write.saveAsTable(\"nyc_taxi_holiday_weather\");\n",
							"val final_results = spark.sql(\"SELECT COUNT(*) FROM nyc_taxi_holiday_weather\");\n",
							"final_results.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": 23
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/advlttest1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "Synapse Spark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import spark.implicits._"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val customerDF = spark.read.parquet(\"/adventureworkslt/2020/12/29/SalesLT_Customer_20201229.parquet \")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val customerDF = spark.read.parquet(\"abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_Customer_20201229.parquet \")\r\n",
							"val addressDF = spark.read.parquet(\"abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_Address_20201229.parquet \")\r\n",
							"val customeraddressDF = spark.read.parquet(\"abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_CustomerAddress_20201229.parquet \")\r\n",
							"val productDF = spark.read.parquet(\"abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_Product_20201229.parquet \")\r\n",
							"val productcategoryDF = spark.read.parquet(\"abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_ProductCategory_20201229.parquet \")\r\n",
							"val productdescriptionDF = spark.read.parquet(\"abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_ProductDescription_20201229.parquet \")\r\n",
							"val productmodelDF = spark.read.parquet(\"abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_ProductModel_20201229.parquet \")\r\n",
							"val productmodeldescriptionDF = spark.read.parquet(\"abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_ProductModelProductDescription_20201229.parquet \")\r\n",
							"\r\n",
							"val salesorderdetailDF = spark.read.parquet(\"abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_SalesOrderDetail_20201229.parquet \")\r\n",
							"val salesorderheaderDF = spark.read.parquet(\"abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_SalesOrderHeader_20201229.parquet \")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(customerDF)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"spark.Sql(\"CREATE DATABASE adventureworkslt\")"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/advtablecreationparquet')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS adventureworkslt.customer USING Parquet LOCATION 'abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_Customer_20201229.parquet '\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS adventureworkslt.address USING Parquet LOCATION 'abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_Address_20201229.parquet '\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS adventureworkslt.customeraddress USING Parquet LOCATION 'abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_CustomerAddress_20201229.parquet '\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS adventureworkslt.product USING Parquet LOCATION 'abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_Product_20201229.parquet '\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS adventureworkslt.productcategory USING Parquet LOCATION 'abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_ProductCategory_20201229.parquet '\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS adventureworkslt.productdescription USING Parquet LOCATION 'abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_ProductDescription_20201229.parquet '\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS adventureworkslt.productmodel USING Parquet LOCATION 'abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_ProductModel_20201229.parquet '\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS adventureworkslt.productmodelproductdescription USING Parquet LOCATION 'abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_ProductModelProductDescription_20201229.parquet '\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS adventureworkslt.salesorderdetail USING Parquet LOCATION 'abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_SalesOrderDetail_20201229.parquet '\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS adventureworkslt.salesorderheader USING Parquet LOCATION 'abfss://synapseroot@accsynapsestorage.dfs.core.windows.net/adventureworkslt/2020/12/29/SalesLT_SalesOrderHeader_20201229.parquet '\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"display(spark.sql(\"select * from adventureworkslt.customer\"))"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"display(spark.sql(\"select * from adventureworkslt.customeraddress\"))"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"display(spark.sql(\"select * from adventureworkslt.product\"))"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"display(spark.sql(\"select * from adventureworkslt.productmodel\"))"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"display(spark.sql(\"select * from adventureworkslt.salesorderdetail\"))"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"display(spark.sql(\"select * from adventureworkslt.salesorderheader\"))"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/blobread')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"blob_sas_token = mssparkutils.credentials.getSecret(\"accvault1\",\"accbbstore\",\"accvault1\")\r\n",
							"blob_acc_name = mssparkutils.credentials.getSecret(\"accvault1\",\"accstorageaccname\",\"accvault1\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"spark.conf.set(\"fs.azure.account.key.%s.dfs.core.windows.net\" % blob_acc_name, blob_sas_token)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"blob_account_name = blob_acc_name\r\n",
							"blob_container_name = 'coviddata19'\r\n",
							"blob_relative_path = ''\r\n",
							"linked_service_name = 'accvault1'"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"wasb_path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"print(wasb_path)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"dfread = spark.read.parquet(wasb_path).load()\r\n",
							"display(dfread)"
						],
						"outputs": [],
						"execution_count": 8
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/coviddatasave')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql import SparkSession"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"blob_sas_token = mssparkutils.credentials.getSecret(\"accvault1\",\"accbbstore\",\"accvault1\")\r\n",
							"blob_acc_name = mssparkutils.credentials.getSecret(\"accvault1\",\"accstorageaccname\",\"accvault1\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"print(blob_acc_name)\r\n",
							"print(blob_sas_token)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"spark.conf.set(\"fs.azure.account.key.%s.dfs.core.windows.net\" % blob_acc_name, blob_sas_token)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"blob_account_name = \"pandemicdatalake\"\r\n",
							"blob_container_name = \"public\"\r\n",
							"blob_relative_path = \"curated/covid-19/covid_tracking/latest/covid_tracking.parquet\"\r\n",
							"blob_sas_token = r\"\"\r\n",
							"# Allow SPARK to read from Blob remotely\r\n",
							"wasbs_path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path)\r\n",
							"\r\n",
							"spark.conf.set(\r\n",
							"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\r\n",
							"    blob_sas_token)\r\n",
							"df = spark.read.parquet(wasbs_path)\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"spark.conf.set(\"fs.azure.account.key.%s.dfs.core.windows.net\" % blob_acc_name, blob_sas_token)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"blob_account_name = blob_acc_name\r\n",
							"blob_container_name = 'coviddata19'\r\n",
							"blob_relative_path = ''\r\n",
							"linked_service_name = 'accvault1'"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"wasb_path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"print(wasb_path)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"dfread = spark.read.parquet(wasb_path).load()\r\n",
							"display(dfread)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.repartition(1).write.option(\"mode\",\"overwrite\").parquet(\"/coviddata19/\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.repartition(1).write.option(\"mode\",\"overwrite\").parquet(\"wasbs://coviddata19@accsynapsestorage.blob.core.windows.net/coviddata19/\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/csharpdeltalake')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "csharp"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Hitchhiker's Guide to Delta Lake (.NET for Spark C#)\n",
							"\n",
							"This tutorial has been adapted for more clarity from its original counterpart [here](https://docs.delta.io/latest/quick-start.html). This notebook helps you quickly explore the main features of [Delta Lake](https://github.com/delta-io/delta). It provides code snippets that show how to read from and write to Delta Lake tables from interactive, batch, and streaming queries.\n",
							"\n",
							"Here's what we will cover:\n",
							"* Create a table\n",
							"* Understanding meta-data\n",
							"* Read data\n",
							"* Update table data\n",
							"* Overwrite table data\n",
							"* Conditional update without overwrite\n",
							"* Read older versions of data using Time Travel\n",
							"* Write a stream of data to a table\n",
							"* Read a stream of changes from a table"
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Configuration\n",
							"Make sure you modify this as appropriate."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"var sessionId = (new Random()).Next(10000000);\n",
							"var deltaTablePath = $\"/delta/delta-table-{sessionId}\";\n",
							"\n",
							"deltaTablePath"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Create a table\n",
							"To create a Delta Lake table, write a DataFrame out in the **delta** format. You can use existing Spark SQL code and change the format from parquet, csv, json, and so on, to delta.\n",
							"\n",
							"These operations create a new Delta Lake table using the schema that was inferred from your DataFrame. For the full set of options available when you create a new Delta Lake table, see Create a table and Write to a table (subsequent cells in this notebook)."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"var data = spark.Range(0,5);\n",
							"data.Show();\n",
							"data.Write().Format(\"delta\").Save(deltaTablePath);"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Understanding Meta-data\n",
							"\n",
							"In Delta Lake, meta-data is no different from data i.e., it is stored next to the data. Therefore, an interesting side-effect here is that you can peek into meta-data using regular Spark APIs. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"using System.Linq;\n",
							"spark.Read().Text($\"{deltaTablePath}/_delta_log/\").Collect().ToList().ForEach(x => Console.WriteLine(x.GetAs<string>(\"value\")));"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Read data\n",
							"\n",
							"You read data in your Delta Lake table by specifying the path to the files."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"var df = spark.Read().Format(\"delta\").Load(deltaTablePath);\n",
							"df.Show()"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Update table data\n",
							"\n",
							"Delta Lake supports several operations to modify tables using standard DataFrame APIs. This example runs a batch job to overwrite the data in the table.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"var data = spark.Range(5,10);\n",
							"data.Write().Format(\"delta\").Mode(\"overwrite\").Save(deltaTablePath);\n",
							"df.Show();"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"When you now inspect the meta-data, what you will notice is that the original data is over-written. Well, not in a true sense but appropriate entries are added to Delta's transaction log so it can provide an \"illusion\" that the original data was deleted. We can verify this by re-inspecting the meta-data. You will see several entries indicating reference removal to the original data."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.Read().Text($\"{deltaTablePath}/_delta_log/\").Collect().ToList().ForEach(x => Console.WriteLine(x.GetAs<string>(\"value\")));"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Save as catalog tables\n",
							"\n",
							"Delta Lake can write to managed or external catalog tables.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"// Write data to a new managed catalog table.\n",
							"data.Write().Format(\"delta\").SaveAsTable(\"ManagedDeltaTable\");"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"source": [
							"// Define an external catalog table that points to the existing Delta Lake data in storage.\n",
							"spark.Sql($\"CREATE TABLE ExternalDeltaTable USING DELTA LOCATION '{deltaTablePath}'\");"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"source": [
							"// List the 2 new tables.\n",
							"spark.Sql(\"SHOW TABLES\").Show();\n",
							"\n",
							"// Explore their properties.\n",
							"spark.Sql(\"DESCRIBE EXTENDED ManagedDeltaTable\").Show(truncate: 0);\n",
							"spark.Sql(\"DESCRIBE EXTENDED ExternalDeltaTable\").Show(truncate: 0);"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Conditional update without overwrite\n",
							"\n",
							"Delta Lake provides programmatic APIs to conditional update, delete, and merge (upsert) data into tables. For more information on these operations, see [Table Deletes, Updates, and Merges](https://docs.delta.io/latest/delta-update.html)."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"using Microsoft.Spark.Extensions.Delta;\n",
							"using Microsoft.Spark.Extensions.Delta.Tables;\n",
							"using Microsoft.Spark.Sql;\n",
							"using static Microsoft.Spark.Sql.Functions;\n",
							"\n",
							"var deltaTable = DeltaTable.ForPath(deltaTablePath);"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"source": [
							"// Update every even value by adding 100 to it\n",
							"deltaTable.Update(\n",
							"  condition: Expr(\"id % 2 == 0\"),\n",
							"  set: new Dictionary<string, Column>(){{ \"id\", Expr(\"id + 100\") }});\n",
							"deltaTable.ToDF().Show();"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"source": [
							"// Delete every even value\n",
							"deltaTable.Delete(condition: Expr(\"id % 2 == 0\"));\n",
							"deltaTable.ToDF().Show();"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"source": [
							"// Upsert (merge) new data\n",
							"var newData = spark.Range(20).As(\"newData\");\n",
							"\n",
							"deltaTable\n",
							"    .As(\"oldData\")\n",
							"    .Merge(newData, \"oldData.id = newData.id\")\n",
							"    .WhenMatched()\n",
							"        .Update(new Dictionary<string, Column>() {{\"id\", Lit(\"-1\")}})\n",
							"    .WhenNotMatched()\n",
							"        .Insert(new Dictionary<string, Column>() {{\"id\", Col(\"newData.id\")}})\n",
							"    .Execute();\n",
							"\n",
							"deltaTable.ToDF().Show(100);"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"source": [
							"## History\n",
							"Delta's most powerful feature is the ability to allow looking into history i.e., the changes that were made to the underlying Delta Table. The cell below shows how simple it is to inspect the history."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"deltaTable.History().Show(20, 1000, false);"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Read older versions of data using Time Travel\n",
							"\n",
							"You can query previous snapshots of your Delta Lake table by using a feature called Time Travel. If you want to access the data that you overwrote, you can query a snapshot of the table before you overwrote the first set of data using the versionAsOf option.\n",
							"\n",
							"Once you run the cell below, you should see the first set of data, from before you overwrote it. Time Travel is an extremely powerful feature that takes advantage of the power of the Delta Lake transaction log to access data that is no longer in the table. Removing the version 0 option (or specifying version 1) would let you see the newer data again. For more information, see [Query an older snapshot of a table (time travel)](https://docs.delta.io/latest/delta-batch.html#deltatimetravel)."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"var df = spark.Read().Format(\"delta\").Option(\"versionAsOf\", 0).Load(deltaTablePath);\n",
							"df.Show();"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Write a stream of data to a table\n",
							"\n",
							"You can also write to a Delta Lake table using Spark's Structured Streaming. The Delta Lake transaction log guarantees exactly-once processing, even when there are other streams or batch queries running concurrently against the table. By default, streams run in append mode, which adds new records to the table.\n",
							"\n",
							"For more information about Delta Lake integration with Structured Streaming, see [Table Streaming Reads and Writes](https://docs.delta.io/latest/delta-streaming.html).\n",
							"\n",
							"In the cells below, here's what we are doing:\n",
							"\n",
							"1. *Cell 28* Setup a simple Spark Structured Streaming job to generate a sequence and make the job write into our Delta Table\n",
							"2. *Cell 30* Show the newly appended data\n",
							"3. *Cell 31* Inspect history\n",
							"4. *Cell 32* Stop the structured streaming job\n",
							"5. *Cell 33* Inspect history <-- You'll notice appends have stopped"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"var streamingDf = spark.ReadStream().Format(\"rate\").Load();\n",
							"var stream = streamingDf.SelectExpr(\"value as id\").WriteStream().Format(\"delta\").Option(\"checkpointLocation\", $\"/tmp/checkpoint-{sessionId}\").Start(deltaTablePath);"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Read a stream of changes from a table\n",
							"\n",
							"While the stream is writing to the Delta Lake table, you can also read from that table as streaming source. For example, you can start another streaming query that prints all the changes made to the Delta Lake table."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"deltaTable.ToDF().Sort(Col(\"id\").Desc()).Show(100);"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"source": [
							"deltaTable.History().Drop(\"userId\", \"userName\", \"job\", \"notebook\", \"clusterId\", \"isolationLevel\", \"isBlindAppend\").Show(20, 1000, false);"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"source": [
							"stream.Stop();"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"source": [
							"deltaTable.History().Drop(\"userId\", \"userName\", \"job\", \"notebook\", \"clusterId\", \"isolationLevel\", \"isBlindAppend\").Show(100, 1000, false);"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Convert Parquet to Delta\n",
							"You can do an in-place conversion from the Parquet format to Delta."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"var parquetPath = $\"/parquet/parquet-table-{sessionId}\";\n",
							"\n",
							"var data = spark.Range(0,5);\n",
							"data.Write().Parquet(parquetPath);\n",
							"\n",
							"// Confirm that the data isn't in the Delta format\n",
							"DeltaTable.IsDeltaTable(parquetPath)"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"source": [
							"DeltaTable.ConvertToDelta(spark, $\"parquet.`{parquetPath}`\");\n",
							"\n",
							"//Confirm that the converted data is now in the Delta format\n",
							"DeltaTable.IsDeltaTable(parquetPath)"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "markdown",
						"source": [
							"## SQL Support\n",
							"Delta supports table utility commands through SQL.  You can use SQL to:\n",
							"* Get a DeltaTable's history\n",
							"* Vacuum a DeltaTable\n",
							"* Convert a Parquet file to Delta\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.Sql($\"DESCRIBE HISTORY delta.`{deltaTablePath}`\").Show();"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"source": [
							"spark.Sql($\"VACUUM delta.`{deltaTablePath}`\").Show();"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"source": [
							"var parquetId =  (new Random()).Next(10000000);\n",
							"var parquetPath = $\"/parquet/parquet-table-{sessionId}-{parquetId}\";\n",
							"\n",
							"var data = spark.Range(0,5);\n",
							"data.Write().Parquet(parquetPath);\n",
							"\n",
							"// Confirm that the data isn't in the Delta format\n",
							"DeltaTable.IsDeltaTable(parquetPath);\n",
							"\n",
							"// Use SQL to convert the parquet table to Delta\n",
							"spark.Sql($\"CONVERT TO DELTA parquet.`{parquetPath}`\");\n",
							"\n",
							"DeltaTable.IsDeltaTable(parquetPath);"
						],
						"outputs": [],
						"execution_count": 27
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/diabetessample')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\n",
							"blob_account_name = \"azureopendatastorage\"\n",
							"blob_container_name = \"mlsamples\"\n",
							"blob_relative_path = \"diabetes\"\n",
							"blob_sas_token = r\"\"\n",
							"# Allow SPARK to read from Blob remotely\n",
							"wasbs_path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path)\n",
							"\n",
							"spark.conf.set(\n",
							"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\n",
							"    blob_sas_token)\n",
							"df = spark.read.parquet(wasbs_path)\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.cache()"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df = df.dropna() # drop rows with missing values\r\n",
							"#exprs = [col(column).alias(column.replace(' ', '_')) for column in df.columns]"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"print(\"The dataset has %d rows.\" % df.count())"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"train, test = df.randomSplit([0.7, 0.3], seed = 0)\r\n",
							"print(\"There are %d training examples and %d test examples.\" % (train.count(), test.count()))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.ml.feature import VectorAssembler, VectorIndexer\r\n",
							" \r\n",
							"# Remove the target column from the input feature set.\r\n",
							"featuresCols = df.columns\r\n",
							"featuresCols.remove('Y')\r\n",
							" \r\n",
							"# vectorAssembler combines all feature columns into a single feature vector column, \"rawFeatures\".\r\n",
							"vectorAssembler = VectorAssembler(inputCols=featuresCols, outputCol=\"rawFeatures\")\r\n",
							" \r\n",
							"# vectorIndexer identifies categorical features and indexes them, and creates a new column \"features\". \r\n",
							"vectorIndexer = VectorIndexer(inputCol=\"rawFeatures\", outputCol=\"features\", maxCategories=4)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.ml.regression import GBTRegressor\r\n",
							" \r\n",
							"# The next step is to define the model training stage of the pipeline. \r\n",
							"# The following command defines a GBTRegressor model that takes an input column \"features\" by default and learns to predict the labels in the \"cnt\" column. \r\n",
							"gbt = GBTRegressor(labelCol=\"Y\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.ml.tuning import CrossValidator, ParamGridBuilder\r\n",
							"from pyspark.ml.evaluation import RegressionEvaluator\r\n",
							" \r\n",
							"# Define a grid of hyperparameters to test:\r\n",
							"#  - maxDepth: maximum depth of each decision tree \r\n",
							"#  - maxIter: iterations, or the total number of trees \r\n",
							"paramGrid = ParamGridBuilder()\\\r\n",
							"  .addGrid(gbt.maxDepth, [2, 5])\\\r\n",
							"  .addGrid(gbt.maxIter, [10, 100])\\\r\n",
							"  .build()\r\n",
							" \r\n",
							"# Define an evaluation metric.  The CrossValidator compares the true labels with predicted values for each combination of parameters, and calculates this value to determine the best model.\r\n",
							"evaluator = RegressionEvaluator(metricName=\"rmse\", labelCol=gbt.getLabelCol(), predictionCol=gbt.getPredictionCol())\r\n",
							" \r\n",
							"# Declare the CrossValidator, which performs the model tuning.\r\n",
							"cv = CrossValidator(estimator=gbt, evaluator=evaluator, estimatorParamMaps=paramGrid)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.ml import Pipeline\r\n",
							"pipeline = Pipeline(stages=[vectorAssembler, vectorIndexer, cv])"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"pipelineModel = pipeline.fit(train)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"predictions = pipelineModel.transform(test)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(predictions.select(\"Y\", \"prediction\", *featuresCols))"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"rmse = evaluator.evaluate(predictions)\r\n",
							"print(\"RMSE on our test set: %g\" % rmse)"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(predictions.select(\"Y\", \"prediction\"))"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"import pyspark.sql.functions as F\r\n",
							"predictions_with_residuals = predictions.withColumn(\"residual\", (F.col(\"Y\") - F.col(\"prediction\")))\r\n",
							"display(predictions_with_residuals.agg({'residual': 'mean'}))"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(predictions_with_residuals.select(\"Y\", \"residual\"))"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/eventhubtest')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import org.apache.spark.eventhubs._\r\n",
							"import org.apache.spark.sql.SparkSession"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nycyellow')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"vendorID"
									],
									"values": [
										"tpepPickupDateTime"
									],
									"yLabel": "tpepPickupDateTime",
									"xLabel": "vendorID",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tpepPickupDateTime\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":0,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":0}}\\\\\\\\\\\\\\\"\\\\\\\"\\\"\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"from azureml.opendatasets import NycTlcYellow\n",
							"\n",
							"data = NycTlcYellow()\n",
							"data_df = data.to_spark_dataframe()\n",
							"# Display 10 rows\n",
							"display(data_df.limit(10))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"sc.version"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"vendorID"
									],
									"values": [
										"tpepPickupDateTime"
									],
									"yLabel": "tpepPickupDateTime",
									"xLabel": "vendorID",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tpepPickupDateTime\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":0,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":0}}\\\\\\\\\\\\\\\"\\\\\\\"\\\"\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"#display(data_df)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#import org.apache.spark.sql.SaveMode\n",
							"#from pyspark.sql._ import *\n",
							"from pyspark.sql.functions import *\n",
							"from pyspark.sql import *\n",
							"#import org.apache.spark.sql._ \n",
							"#import org.apache.spark.sql.functions._"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"vendorID"
									],
									"values": [
										"tpepPickupDateTime"
									],
									"yLabel": "tpepPickupDateTime",
									"xLabel": "vendorID",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tpepPickupDateTime\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":0,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":0}}\\\\\\\\\\\\\\\"\\\\\\\"\\\"\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"df1 = data_df.withColumn(\"Date\", (col(\"tpepPickupDateTime\").cast(\"date\"))) \n",
							"display(df1)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#df1.dropDuplicates([\"key\",\"pickup_datetime\",\"pickup_longitude\",\"pickup_latitude\"])"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"df1.printSchema"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"df2 = df1.withColumn(\"year\", year(col(\"date\"))) .withColumn(\"month\", month(col(\"date\"))) .withColumn(\"day\", dayofmonth(col(\"date\"))) .withColumn(\"hour\", hour(col(\"date\")))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"vendorID"
									],
									"values": [
										"tpepPickupDateTime"
									],
									"yLabel": "tpepPickupDateTime",
									"xLabel": "vendorID",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tpepPickupDateTime\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":0,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":0}}\\\\\\\\\\\\\\\"\\\\\\\"\\\"\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"#display(df2)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#df2.groupBy(\"year\",\"month\").agg(sum(\"fareAmount\").alias(\"Total\"),count(\"vendorID\").alias(\"Count\")).sort(asc(\"year\"), asc(\"month\")).show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"dfgrouped = df2.groupBy(\"year\",\"month\").agg(sum(\"fareAmount\").alias(\"Total\"),count(\"vendorID\").alias(\"Count\")).sort(asc(\"year\"), asc(\"month\"))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"month"
									],
									"values": [
										"year"
									],
									"yLabel": "year",
									"xLabel": "month",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"year\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":12105,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":10085,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":12105,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"4\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":10085,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":10085,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"6\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":10085,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"7\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":10085,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"8\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":12105,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"9\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":10085,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"10\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":10085,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"11\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":10085,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"12\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":10085}}\\\\\\\\\\\\\\\"\\\\\\\"\\\"\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"#display(dfgrouped)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"dfgrouped.repartition(1).write.mode('overwrite').parquet(\"/dailyaggr/parquet/dailyaggr.parquet\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"dfgrouped.repartition(1).write.mode('overwrite').option(\"header\",\"true\").csv(\"/dailyaggrcsv/csv/dailyaggr.csv\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"df2.createOrReplaceTempView(\"nycyellow\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"vendorID"
									],
									"values": [
										"passengerCount"
									],
									"yLabel": "passengerCount",
									"xLabel": "vendorID",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"passengerCount\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":73,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":125}}\\\\\\\\\\\\\\\"\\\\\\\"\\\"\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"select * from nycyellow limit 100"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"tsHour"
									],
									"values": [
										"tsDay"
									],
									"yLabel": "tsDay",
									"xLabel": "tsHour",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tsDay\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{}}\\\\\\\\\\\\\\\"\\\\\\\"\\\"\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"select  year(cast(tpepPickupDateTime  as timestamp)) as tsYear,\n",
							"        month(cast(tpepPickupDateTime  as timestamp)) as tsmonth,\n",
							"        day(cast(tpepPickupDateTime  as timestamp)) as tsDay, \n",
							"        hour(cast(tpepPickupDateTime  as timestamp)) as tsHour,\n",
							"        avg(totalAmount) as avgTotal, avg(fareAmount) as avgFare\n",
							"from nycyellow\n",
							"group by  tsYear, tsmonth,tsDay, tsHour\n",
							"order by  tsYear, tsmonth,tsDay, tsHour"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [],
									"yLabel": "",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"{}\\\\\\\\\\\\\\\"\\\\\\\"\\\"\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"DROP TABLE dailyaggr"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [],
									"yLabel": "",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"{}\\\\\\\\\\\\\\\"\\\\\\\"\\\"\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"CREATE TABLE dailyaggr\n",
							"  COMMENT 'This table is created with existing data'\n",
							"  AS select  year(cast(tpepPickupDateTime  as timestamp)) as tsYear,\n",
							"        month(cast(tpepPickupDateTime  as timestamp)) as tsmonth,\n",
							"        day(cast(tpepPickupDateTime  as timestamp)) as tsDay, \n",
							"        hour(cast(tpepPickupDateTime  as timestamp)) as tsHour,\n",
							"        avg(totalAmount) as avgTotal, avg(fareAmount) as avgFare\n",
							"from nycyellow\n",
							"group by  tsYear, tsmonth,tsDay, tsHour\n",
							"order by  tsYear, tsmonth,tsDay, tsHour"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"tsDay"
									],
									"values": [
										"tsYear"
									],
									"yLabel": "tsYear",
									"xLabel": "tsDay",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tsYear\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{}}\\\\\\\\\\\\\\\"\\\\\\\"\\\"\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"select * from dailyaggr"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"dailyaggr = spark.sql(\"SELECT tsYear, tsMonth, tsDay, tsHour, avgTotal FROM dailyaggr\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"tsDay"
									],
									"values": [
										"tsYear"
									],
									"yLabel": "tsYear",
									"xLabel": "tsDay",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tsYear\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{}}\\\\\\\\\\\\\\\"\\\\\\\"\\\"\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"display(dailyaggr)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"import com.microsoft.spark.sqlanalytics.utils.Constants\r\n",
							"import org.apache.spark.sql.SqlAnalyticsConnector._"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#dailyaggr.write.synapsesql(\"accsynapsepools.wwi.dailyaggr\", Constants.INTERNAL)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.ml.regression import LinearRegression"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark \n",
							"import pyspark \n",
							"print(print(pyspark.__version__))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"import org.apache.spark.ml.feature.VectorAssembler \n",
							"import org.apache.spark.ml.linalg.Vectors \n",
							"val dailyaggr = spark.sql(\"SELECT tsYear, tsMonth, tsDay, tsHour, avgTotal FROM dailyaggr\")\n",
							"val featureCols=Array(\"tsYear\",\"tsMonth\",\"tsDay\",\"tsHour\") \n",
							"val assembler: org.apache.spark.ml.feature.VectorAssembler= new VectorAssembler().setInputCols(featureCols).setOutputCol(\"features\") \n",
							"val assembledDF = assembler.setHandleInvalid(\"skip\").transform(dailyaggr) \n",
							"val assembledFinalDF = assembledDF.select(\"avgTotal\",\"features\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"import com.microsoft.spark.sqlanalytics.utils.Constants\n",
							"import org.apache.spark.sql.SqlAnalyticsConnector._"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"dailyaggr.repartition(2).write.synapsesql(\"accsynapsepools.wwi.dailyaggr\", Constants.INTERNAL)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"import org.apache.spark.ml.feature.Normalizer \n",
							"val normalizedDF = new Normalizer().setInputCol(\"features\").setOutputCol(\"normalizedFeatures\").transform(assembledFinalDF)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"val normalizedDF1 = normalizedDF.na.drop()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"val Array(trainingDS, testDS) = normalizedDF1.randomSplit(Array(0.7, 0.3))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"import org.apache.spark.ml.regression.LinearRegression\n",
							"// Create a LinearRegression instance. This instance is an Estimator. \n",
							"val lr = new LinearRegression().setLabelCol(\"avgTotal\").setMaxIter(100)\n",
							"// Print out the parameters, documentation, and any default values. println(s\"Linear Regression parameters:\\n ${lr.explainParams()}\\n\") \n",
							"// Learn a Linear Regression model. This uses the parameters stored in lr.\n",
							"val lrModel = lr.fit(trainingDS)\n",
							"// Make predictions on test data using the Transformer.transform() method.\n",
							"// LinearRegression.transform will only use the 'features' column. \n",
							"val lrPredictions = lrModel.transform(testDS)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"import org.apache.spark.sql.functions._ \n",
							"import org.apache.spark.sql.types._ \n",
							"println(\"\\nPredictions : \" ) \n",
							"lrPredictions.select($\"avgTotal\".cast(IntegerType),$\"prediction\".cast(IntegerType)).orderBy(abs($\"prediction\"-$\"avgTotal\")).distinct.show(15)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"import org.apache.spark.ml.evaluation.RegressionEvaluator \n",
							"\n",
							"val evaluator_r2 = new RegressionEvaluator().setPredictionCol(\"prediction\").setLabelCol(\"avgTotal\").setMetricName(\"r2\") \n",
							"//As the name implies, isLargerBetter returns if a larger value is better or smaller for evaluation. \n",
							"val isLargerBetter : Boolean = evaluator_r2.isLargerBetter \n",
							"println(\"Coefficient of determination = \" + evaluator_r2.evaluate(lrPredictions))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"//Evaluate the results. Calculate Root Mean Square Error \n",
							"val evaluator_rmse = new RegressionEvaluator().setPredictionCol(\"prediction\").setLabelCol(\"avgTotal\").setMetricName(\"rmse\") \n",
							"//As the name implies, isLargerBetter returns if a larger value is better for evaluation. \n",
							"val isLargerBetter1 : Boolean = evaluator_rmse.isLargerBetter \n",
							"println(\"Root Mean Square Error = \" + evaluator_rmse.evaluate(lrPredictions))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"val dailyaggrdf = spark.read.synapsesql(\"accsynapsepools.wwi.dailyaggr\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"tsMonth"
									],
									"values": [
										"tsYear"
									],
									"yLabel": "tsYear",
									"xLabel": "tsMonth",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tsYear\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"8\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":474230,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"9\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":726480,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"10\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":548896,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"11\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":199782,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"12\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":70630}}\\\\\\\\\\\\\\\"\\\\\\\"\\\"\"",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"%%spark\n",
							"display(dailyaggrdf)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"dailyaggrdf.count()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nydatacopy')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {}
				},
				"metadata": {
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"outputCollapsed": true
						},
						"source": [
							"yellowdDF = spark.read.option(\"mergeSchema\", \"true\").parquet(\"https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"blob_account_name = \"azureopendatastorage\"\n",
							"blob_container_name = \"nyctlc\"\n",
							"blob_relative_path = \"yellow\"\n",
							"blob_sas_token = r\"\"\n",
							"\n",
							"# Allow Spark to read from Blob remotely\n",
							"wasbs_path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path)\n",
							"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),blob_sas_token)\n",
							"\n",
							"# Spark read parquet, note that it won't load any data yet by now\n",
							"yellowdf = spark.read.parquet(wasbs_path)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"vendorID"
									],
									"values": [
										"tpepPickupDateTime"
									],
									"yLabel": "tpepPickupDateTime",
									"xLabel": "vendorID",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"tpepPickupDateTime\":{\"CMT\":0,\"VTS\":0}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"display(yellowdf)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"blob_account_name = \"azureopendatastorage\"\n",
							"blob_container_name = \"nyctlc\"\n",
							"blob_relative_path = \"green\"\n",
							"blob_sas_token = r\"\"\n",
							"\n",
							"# Allow Spark to read from Blob remotely\n",
							"wasbs_path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path)\n",
							"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),blob_sas_token)\n",
							"\n",
							"# Spark read parquet, note that it won't load any data yet by now\n",
							"greendf = spark.read.parquet(wasbs_path)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"lpepPickupDatetime"
									],
									"values": [
										"vendorID"
									],
									"yLabel": "vendorID",
									"xLabel": "lpepPickupDatetime",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"vendorID\":{\"2015-05-01T20:00:23.000Z\":2,\"2015-05-01T20:00:29.000Z\":2,\"2015-05-01T20:00:32.000Z\":2,\"2015-05-01T20:00:34.000Z\":2,\"2015-05-01T20:00:53.000Z\":2,\"2015-05-01T20:01:14.000Z\":2,\"2015-05-01T20:02:03.000Z\":4,\"2015-05-01T20:02:05.000Z\":2,\"2015-05-01T20:02:14.000Z\":2,\"2015-05-01T20:02:20.000Z\":2,\"2015-05-01T20:02:24.000Z\":2,\"2015-05-01T20:02:28.000Z\":2,\"2015-05-01T20:02:30.000Z\":2,\"2015-05-01T20:02:34.000Z\":2,\"2015-05-01T20:02:35.000Z\":2,\"2015-05-01T20:02:40.000Z\":2,\"2015-05-01T20:03:05.000Z\":2,\"2015-05-01T20:03:06.000Z\":2,\"2015-05-01T20:03:35.000Z\":2,\"2015-05-01T20:04:00.000Z\":2,\"2015-05-01T20:04:03.000Z\":2,\"2015-05-01T20:04:08.000Z\":2,\"2015-05-01T20:04:17.000Z\":2,\"2015-05-01T20:04:23.000Z\":2,\"2015-05-01T20:04:36.000Z\":2,\"2015-05-01T20:04:39.000Z\":2,\"2015-05-01T20:04:42.000Z\":2,\"2015-05-01T20:04:47.000Z\":2,\"2015-05-01T20:04:59.000Z\":2,\"2015-05-01T20:05:09.000Z\":2,\"2015-05-01T20:05:11.000Z\":2,\"2015-05-01T20:05:20.000Z\":2,\"2015-05-01T20:05:22.000Z\":2,\"2015-05-01T20:05:27.000Z\":2,\"2015-05-01T20:05:32.000Z\":2,\"2015-05-01T20:05:38.000Z\":2,\"2015-05-01T20:05:44.000Z\":2,\"2015-05-01T20:05:47.000Z\":2,\"2015-05-01T20:05:53.000Z\":2,\"2015-05-01T20:06:03.000Z\":2,\"2015-05-01T20:06:37.000Z\":2,\"2015-05-01T20:06:40.000Z\":2,\"2015-05-01T20:06:54.000Z\":2,\"2015-05-01T20:06:57.000Z\":2,\"2015-05-01T20:07:01.000Z\":2,\"2015-05-01T20:07:24.000Z\":2,\"2015-05-01T20:07:28.000Z\":2,\"2015-05-01T20:07:32.000Z\":2,\"2015-05-01T20:07:35.000Z\":2,\"2015-05-01T20:07:39.000Z\":2,\"2015-05-01T20:07:42.000Z\":2,\"2015-05-01T20:07:43.000Z\":2,\"2015-05-01T20:07:48.000Z\":2,\"2015-05-01T20:07:49.000Z\":2,\"2015-05-01T20:08:02.000Z\":2,\"2015-05-01T20:08:08.000Z\":2,\"2015-05-01T20:08:14.000Z\":2,\"2015-05-01T20:08:20.000Z\":2,\"2015-05-01T20:08:23.000Z\":2,\"2015-05-01T20:08:27.000Z\":2,\"2015-05-01T20:08:30.000Z\":2,\"2015-05-01T20:08:33.000Z\":2,\"2015-05-01T20:08:37.000Z\":2,\"2015-05-01T20:08:45.000Z\":2,\"2015-05-01T20:08:53.000Z\":2,\"2015-05-01T20:08:55.000Z\":2,\"2015-05-01T20:08:58.000Z\":2,\"2015-05-01T20:09:02.000Z\":2,\"2015-05-01T20:09:05.000Z\":2,\"2015-05-01T20:09:12.000Z\":2,\"2015-05-01T20:09:18.000Z\":2,\"2015-05-01T20:09:24.000Z\":2,\"2015-05-01T20:09:26.000Z\":2,\"2015-05-01T20:09:35.000Z\":2,\"2015-05-01T20:09:43.000Z\":2,\"2015-05-01T20:09:50.000Z\":2,\"2015-05-01T20:09:57.000Z\":2,\"2015-05-01T20:10:01.000Z\":2,\"2015-05-01T20:10:05.000Z\":2,\"2015-05-01T20:10:08.000Z\":2,\"2015-05-01T20:10:12.000Z\":2,\"2015-05-01T20:10:23.000Z\":2,\"2015-05-01T20:10:26.000Z\":2,\"2015-05-01T20:10:41.000Z\":2,\"2015-05-01T20:10:45.000Z\":2,\"2015-05-01T20:10:49.000Z\":2,\"2015-05-01T20:10:53.000Z\":2,\"2015-05-01T20:10:55.000Z\":2,\"2015-05-01T20:10:59.000Z\":2,\"2015-05-01T20:11:10.000Z\":2,\"2015-05-01T20:11:15.000Z\":2,\"2015-05-01T20:11:17.000Z\":2,\"2015-05-01T20:11:21.000Z\":2,\"2015-05-01T20:11:27.000Z\":2,\"2015-05-01T20:11:31.000Z\":2,\"2015-05-01T20:11:34.000Z\":2,\"2015-05-01T20:11:42.000Z\":2,\"2015-05-01T20:11:46.000Z\":2,\"2015-05-01T20:11:49.000Z\":2,\"2015-05-01T20:11:52.000Z\":2,\"2015-05-01T20:11:55.000Z\":2,\"2015-05-01T20:11:57.000Z\":2,\"2015-05-01T20:11:59.000Z\":2,\"2015-05-01T20:12:05.000Z\":2,\"2015-05-01T20:12:07.000Z\":2,\"2015-05-01T20:12:11.000Z\":2,\"2015-05-01T20:12:12.000Z\":2,\"2015-05-01T20:12:14.000Z\":2,\"2015-05-01T20:12:20.000Z\":2,\"2015-05-01T20:12:26.000Z\":2,\"2015-05-01T20:12:28.000Z\":2,\"2015-05-01T20:12:33.000Z\":2,\"2015-05-01T20:12:35.000Z\":2,\"2015-05-01T20:12:40.000Z\":2,\"2015-05-01T20:12:46.000Z\":2,\"2015-05-01T20:12:49.000Z\":2,\"2015-05-01T20:12:52.000Z\":2,\"2015-05-01T20:12:56.000Z\":2,\"2015-05-01T20:12:58.000Z\":2,\"2015-05-01T20:13:03.000Z\":2,\"2015-05-01T20:13:09.000Z\":2,\"2015-05-01T20:13:16.000Z\":2,\"2015-05-01T20:13:17.000Z\":2,\"2015-05-01T20:13:20.000Z\":2,\"2015-05-01T20:13:22.000Z\":2,\"2015-05-01T20:13:24.000Z\":2,\"2015-05-01T20:13:27.000Z\":2,\"2015-05-01T20:13:31.000Z\":2,\"2015-05-01T20:13:35.000Z\":2,\"2015-05-01T20:13:39.000Z\":2,\"2015-05-01T20:13:45.000Z\":2,\"2015-05-01T20:13:47.000Z\":2,\"2015-05-01T20:13:55.000Z\":2,\"2015-05-01T20:14:00.000Z\":2,\"2015-05-01T20:14:04.000Z\":2,\"2015-05-01T20:14:08.000Z\":2,\"2015-05-01T20:14:11.000Z\":2,\"2015-05-01T20:14:17.000Z\":2,\"2015-05-01T20:14:22.000Z\":2,\"2015-05-01T20:14:26.000Z\":2,\"2015-05-01T20:14:30.000Z\":2,\"2015-05-01T20:14:33.000Z\":2,\"2015-05-01T20:14:36.000Z\":2,\"2015-05-01T20:14:39.000Z\":2,\"2015-05-01T20:14:43.000Z\":2,\"2015-05-01T20:14:46.000Z\":2,\"2015-05-01T20:14:48.000Z\":2,\"2015-05-01T20:14:54.000Z\":2,\"2015-05-01T20:14:56.000Z\":2,\"2015-05-01T20:14:59.000Z\":2,\"2015-05-01T20:15:04.000Z\":2,\"2015-05-01T20:15:05.000Z\":2,\"2015-05-01T20:15:11.000Z\":2,\"2015-05-01T20:15:14.000Z\":2,\"2015-05-01T20:15:17.000Z\":2,\"2015-05-01T20:15:21.000Z\":2,\"2015-05-01T20:15:22.000Z\":2,\"2015-05-01T20:15:25.000Z\":2,\"2015-05-01T20:15:29.000Z\":2,\"2015-05-01T20:15:32.000Z\":2,\"2015-05-01T20:15:39.000Z\":2,\"2015-05-01T20:15:42.000Z\":2,\"2015-05-01T20:15:46.000Z\":2,\"2015-05-01T20:15:51.000Z\":2,\"2015-05-01T20:15:54.000Z\":2,\"2015-05-01T20:15:57.000Z\":2,\"2015-05-01T20:16:01.000Z\":2,\"2015-05-01T20:16:08.000Z\":2,\"2015-05-01T20:16:17.000Z\":2,\"2015-05-01T20:16:21.000Z\":2,\"2015-05-01T20:16:28.000Z\":2,\"2015-05-01T20:16:33.000Z\":2,\"2015-05-01T20:16:37.000Z\":2,\"2015-05-01T20:16:40.000Z\":2,\"2015-05-01T20:16:43.000Z\":2,\"2015-05-01T20:16:46.000Z\":2,\"2015-05-01T20:16:49.000Z\":2,\"2015-05-01T20:16:53.000Z\":2,\"2015-05-01T20:16:56.000Z\":2,\"2015-05-01T20:16:57.000Z\":2,\"2015-05-01T20:16:59.000Z\":2,\"2015-05-01T20:17:02.000Z\":2,\"2015-05-01T20:17:08.000Z\":2,\"2015-05-01T20:17:12.000Z\":2,\"2015-05-01T20:17:13.000Z\":2,\"2015-05-01T20:17:14.000Z\":2,\"2015-05-01T20:17:16.000Z\":2,\"2015-05-01T20:17:19.000Z\":2,\"2015-05-01T20:17:24.000Z\":2,\"2015-05-01T20:17:37.000Z\":2,\"2015-05-01T20:17:42.000Z\":2,\"2015-05-01T20:17:50.000Z\":2,\"2015-05-01T20:17:53.000Z\":2,\"2015-05-01T20:17:56.000Z\":2,\"2015-05-01T20:17:58.000Z\":2,\"2015-05-01T20:18:01.000Z\":2,\"2015-05-01T20:18:03.000Z\":2,\"2015-05-01T20:18:05.000Z\":2,\"2015-05-01T20:18:07.000Z\":2,\"2015-05-01T20:18:09.000Z\":2,\"2015-05-01T20:18:11.000Z\":2,\"2015-05-01T20:18:15.000Z\":2,\"2015-05-01T20:18:16.000Z\":2,\"2015-05-01T20:18:22.000Z\":2,\"2015-05-01T20:18:26.000Z\":2,\"2015-05-01T20:18:27.000Z\":2,\"2015-05-01T20:18:31.000Z\":2,\"2015-05-01T20:18:38.000Z\":2,\"2015-05-01T20:18:45.000Z\":2,\"2015-05-01T20:18:51.000Z\":2,\"2015-05-01T20:18:55.000Z\":2,\"2015-05-01T20:19:00.000Z\":1,\"2015-05-01T20:19:02.000Z\":2,\"2015-05-01T20:19:04.000Z\":2,\"2015-05-01T20:19:06.000Z\":2,\"2015-05-01T20:19:09.000Z\":1,\"2015-05-01T20:19:10.000Z\":2,\"2015-05-01T20:19:13.000Z\":2,\"2015-05-01T20:19:16.000Z\":2,\"2015-05-01T20:19:18.000Z\":2,\"2015-05-01T20:19:23.000Z\":2,\"2015-05-01T20:19:26.000Z\":2,\"2015-05-01T20:19:29.000Z\":2,\"2015-05-01T20:19:30.000Z\":2,\"2015-05-01T20:19:32.000Z\":1,\"2015-05-01T20:19:34.000Z\":1,\"2015-05-01T20:19:36.000Z\":2,\"2015-05-01T20:19:39.000Z\":2,\"2015-05-01T20:19:41.000Z\":2,\"2015-05-01T20:19:46.000Z\":2,\"2015-05-01T20:19:48.000Z\":2,\"2015-05-01T20:19:51.000Z\":2,\"2015-05-01T20:19:57.000Z\":2,\"2015-05-01T20:20:02.000Z\":2,\"2015-05-01T20:20:05.000Z\":2,\"2015-05-01T20:20:07.000Z\":2,\"2015-05-01T20:20:09.000Z\":2,\"2015-05-01T20:20:14.000Z\":2,\"2015-05-01T20:20:16.000Z\":2,\"2015-05-01T20:20:21.000Z\":1,\"2015-05-01T20:20:25.000Z\":2,\"2015-05-01T20:20:30.000Z\":2,\"2015-05-01T20:20:31.000Z\":1,\"2015-05-01T20:20:33.000Z\":2,\"2015-05-01T20:20:37.000Z\":2,\"2015-05-01T20:20:40.000Z\":2,\"2015-05-01T20:20:42.000Z\":2,\"2015-05-01T20:20:47.000Z\":2,\"2015-05-01T20:20:49.000Z\":2,\"2015-05-01T20:20:51.000Z\":2,\"2015-05-01T20:20:53.000Z\":1,\"2015-05-01T20:20:58.000Z\":2,\"2015-05-01T20:21:01.000Z\":2,\"2015-05-01T20:21:04.000Z\":2,\"2015-05-01T20:21:05.000Z\":2,\"2015-05-01T20:21:11.000Z\":2,\"2015-05-01T20:21:14.000Z\":2,\"2015-05-01T20:21:16.000Z\":2,\"2015-05-01T20:21:18.000Z\":2,\"2015-05-01T20:21:22.000Z\":2,\"2015-05-01T20:21:23.000Z\":2,\"2015-05-01T20:21:25.000Z\":1,\"2015-05-01T20:21:26.000Z\":2,\"2015-05-01T20:21:27.000Z\":1,\"2015-05-01T20:21:30.000Z\":2,\"2015-05-01T20:21:35.000Z\":1,\"2015-05-01T20:21:38.000Z\":1,\"2015-05-01T20:21:41.000Z\":2,\"2015-05-01T20:21:44.000Z\":2,\"2015-05-01T20:21:52.000Z\":2,\"2015-05-01T20:21:55.000Z\":2,\"2015-05-01T20:21:57.000Z\":2,\"2015-05-01T20:22:00.000Z\":2,\"2015-05-01T20:22:01.000Z\":2,\"2015-05-01T20:22:03.000Z\":2,\"2015-05-01T20:22:06.000Z\":1,\"2015-05-01T20:22:10.000Z\":1,\"2015-05-01T20:22:14.000Z\":2,\"2015-05-01T20:22:18.000Z\":2,\"2015-05-01T20:22:24.000Z\":2,\"2015-05-01T20:22:28.000Z\":2,\"2015-05-01T20:22:33.000Z\":1,\"2015-05-01T20:22:34.000Z\":2,\"2015-05-01T20:22:38.000Z\":2,\"2015-05-01T20:22:42.000Z\":2,\"2015-05-01T20:22:45.000Z\":2,\"2015-05-01T20:22:51.000Z\":1,\"2015-05-01T20:22:53.000Z\":2,\"2015-05-01T20:22:56.000Z\":2,\"2015-05-01T20:23:00.000Z\":2,\"2015-05-01T20:23:04.000Z\":1,\"2015-05-01T20:23:05.000Z\":2,\"2015-05-01T20:23:07.000Z\":2,\"2015-05-01T20:23:10.000Z\":4,\"2015-05-01T20:23:13.000Z\":2,\"2015-05-01T20:23:15.000Z\":2,\"2015-05-01T20:23:19.000Z\":2,\"2015-05-01T20:23:23.000Z\":2,\"2015-05-01T20:23:25.000Z\":2,\"2015-05-01T20:23:28.000Z\":1,\"2015-05-01T20:23:31.000Z\":2,\"2015-05-01T20:23:33.000Z\":2,\"2015-05-01T20:23:36.000Z\":2,\"2015-05-01T20:23:38.000Z\":2,\"2015-05-01T20:23:42.000Z\":2,\"2015-05-01T20:23:43.000Z\":2,\"2015-05-01T20:23:46.000Z\":2,\"2015-05-01T20:23:50.000Z\":1,\"2015-05-01T20:23:54.000Z\":2,\"2015-05-01T20:24:00.000Z\":2,\"2015-05-01T20:24:03.000Z\":1,\"2015-05-01T20:24:04.000Z\":1,\"2015-05-01T20:24:07.000Z\":2,\"2015-05-01T20:24:14.000Z\":2,\"2015-05-01T20:24:16.000Z\":2,\"2015-05-01T20:24:21.000Z\":2,\"2015-05-01T20:24:24.000Z\":1,\"2015-05-01T20:24:28.000Z\":2,\"2015-05-01T20:24:29.000Z\":2,\"2015-05-01T20:24:33.000Z\":2,\"2015-05-01T20:24:34.000Z\":2,\"2015-05-01T20:24:39.000Z\":2,\"2015-05-01T20:24:44.000Z\":2,\"2015-05-01T20:24:48.000Z\":1,\"2015-05-01T20:24:54.000Z\":4,\"2015-05-01T20:24:59.000Z\":2,\"2015-05-01T20:25:02.000Z\":2,\"2015-05-01T20:25:04.000Z\":2,\"2015-05-01T20:25:07.000Z\":2,\"2015-05-01T20:25:10.000Z\":1,\"2015-05-01T20:25:14.000Z\":1,\"2015-05-01T20:25:16.000Z\":1,\"2015-05-01T20:25:21.000Z\":2,\"2015-05-01T20:25:23.000Z\":2,\"2015-05-01T20:25:27.000Z\":2,\"2015-05-01T20:25:29.000Z\":2,\"2015-05-01T20:25:30.000Z\":2,\"2015-05-01T20:25:37.000Z\":2,\"2015-05-01T20:25:39.000Z\":2,\"2015-05-01T20:25:44.000Z\":2,\"2015-05-01T20:25:48.000Z\":2,\"2015-05-01T20:25:53.000Z\":2,\"2015-05-01T20:25:55.000Z\":2,\"2015-05-01T20:26:02.000Z\":2,\"2015-05-01T20:26:03.000Z\":1,\"2015-05-01T20:26:05.000Z\":2,\"2015-05-01T20:26:07.000Z\":1,\"2015-05-01T20:26:10.000Z\":2,\"2015-05-01T20:26:13.000Z\":2,\"2015-05-01T20:26:17.000Z\":2,\"2015-05-01T20:26:19.000Z\":2,\"2015-05-01T20:26:22.000Z\":2,\"2015-05-01T20:26:23.000Z\":2,\"2015-05-01T20:26:27.000Z\":2,\"2015-05-01T20:26:31.000Z\":2,\"2015-05-01T20:26:33.000Z\":1,\"2015-05-01T20:26:40.000Z\":2,\"2015-05-01T20:26:42.000Z\":2,\"2015-05-01T20:26:47.000Z\":2,\"2015-05-01T20:26:48.000Z\":1,\"2015-05-01T20:26:55.000Z\":1,\"2015-05-01T20:26:59.000Z\":2,\"2015-05-01T20:27:02.000Z\":2,\"2015-05-01T20:27:05.000Z\":2,\"2015-05-01T20:27:10.000Z\":2,\"2015-05-01T20:27:14.000Z\":2,\"2015-05-01T20:27:19.000Z\":2,\"2015-05-01T20:27:21.000Z\":1,\"2015-05-01T20:27:24.000Z\":2,\"2015-05-01T20:27:27.000Z\":2,\"2015-05-01T20:27:28.000Z\":2,\"2015-05-01T20:27:31.000Z\":2,\"2015-05-01T20:27:37.000Z\":2,\"2015-05-01T20:27:40.000Z\":3,\"2015-05-01T20:27:46.000Z\":1,\"2015-05-01T20:27:47.000Z\":1,\"2015-05-01T20:27:50.000Z\":1,\"2015-05-01T20:27:53.000Z\":2,\"2015-05-01T20:28:00.000Z\":2,\"2015-05-01T20:28:02.000Z\":1,\"2015-05-01T20:28:05.000Z\":2,\"2015-05-01T20:28:09.000Z\":2,\"2015-05-01T20:28:11.000Z\":2,\"2015-05-01T20:28:12.000Z\":2,\"2015-05-01T20:28:17.000Z\":1,\"2015-05-01T20:28:21.000Z\":2,\"2015-05-01T20:28:24.000Z\":1,\"2015-05-01T20:28:25.000Z\":2,\"2015-05-01T20:28:26.000Z\":1,\"2015-05-01T20:28:29.000Z\":2,\"2015-05-01T20:28:31.000Z\":2,\"2015-05-01T20:28:36.000Z\":2,\"2015-05-01T20:28:37.000Z\":2,\"2015-05-01T20:28:44.000Z\":4,\"2015-05-01T20:28:47.000Z\":2,\"2015-05-01T20:28:52.000Z\":2,\"2015-05-01T20:28:53.000Z\":1,\"2015-05-01T20:28:55.000Z\":2,\"2015-05-01T20:28:57.000Z\":1,\"2015-05-01T20:29:00.000Z\":2,\"2015-05-01T20:29:03.000Z\":2,\"2015-05-01T20:29:05.000Z\":2,\"2015-05-01T20:29:10.000Z\":2,\"2015-05-01T20:29:13.000Z\":2,\"2015-05-01T20:29:16.000Z\":2,\"2015-05-01T20:29:20.000Z\":1,\"2015-05-01T20:29:26.000Z\":2,\"2015-05-01T20:29:27.000Z\":1,\"2015-05-01T20:29:28.000Z\":2,\"2015-05-01T20:29:30.000Z\":2,\"2015-05-01T20:29:32.000Z\":2,\"2015-05-01T20:29:33.000Z\":2,\"2015-05-01T20:29:34.000Z\":2,\"2015-05-01T20:29:38.000Z\":2,\"2015-05-01T20:29:40.000Z\":2,\"2015-05-01T20:29:43.000Z\":2,\"2015-05-01T20:29:45.000Z\":2,\"2015-05-01T20:29:49.000Z\":2,\"2015-05-01T20:29:50.000Z\":2,\"2015-05-01T20:29:53.000Z\":2,\"2015-05-01T20:29:55.000Z\":2,\"2015-05-01T20:30:00.000Z\":2,\"2015-05-01T20:30:04.000Z\":1,\"2015-05-01T20:30:05.000Z\":1,\"2015-05-01T20:30:08.000Z\":2,\"2015-05-01T20:30:17.000Z\":1,\"2015-05-01T20:30:18.000Z\":1,\"2015-05-01T20:30:23.000Z\":2,\"2015-05-01T20:30:26.000Z\":2,\"2015-05-01T20:30:27.000Z\":2,\"2015-05-01T20:30:30.000Z\":2,\"2015-05-01T20:30:34.000Z\":2,\"2015-05-01T20:30:37.000Z\":2,\"2015-05-01T20:30:40.000Z\":1,\"2015-05-01T20:30:44.000Z\":1,\"2015-05-01T20:30:47.000Z\":1,\"2015-05-01T20:30:49.000Z\":2,\"2015-05-01T20:30:51.000Z\":1,\"2015-05-01T20:30:54.000Z\":2,\"2015-05-01T20:30:58.000Z\":2,\"2015-05-01T20:31:02.000Z\":2,\"2015-05-01T20:31:08.000Z\":2,\"2015-05-01T20:31:09.000Z\":2,\"2015-05-01T20:31:10.000Z\":1,\"2015-05-01T20:31:12.000Z\":2,\"2015-05-01T20:31:18.000Z\":2,\"2015-05-01T20:31:22.000Z\":2,\"2015-05-01T20:31:25.000Z\":2,\"2015-05-01T20:31:28.000Z\":2,\"2015-05-01T20:31:31.000Z\":2,\"2015-05-01T20:31:33.000Z\":2,\"2015-05-01T20:31:37.000Z\":2,\"2015-05-01T20:31:39.000Z\":2,\"2015-05-01T20:31:44.000Z\":2,\"2015-05-01T20:31:48.000Z\":2,\"2015-05-01T20:31:53.000Z\":2,\"2015-05-01T20:31:58.000Z\":2,\"2015-05-01T20:31:59.000Z\":1,\"2015-05-01T20:32:03.000Z\":1,\"2015-05-01T20:32:04.000Z\":2,\"2015-05-01T20:32:07.000Z\":2,\"2015-05-01T20:32:09.000Z\":2,\"2015-05-01T20:32:13.000Z\":1,\"2015-05-01T20:32:17.000Z\":1,\"2015-05-01T20:32:19.000Z\":2,\"2015-05-01T20:32:21.000Z\":2,\"2015-05-01T20:32:25.000Z\":2,\"2015-05-01T20:32:27.000Z\":2,\"2015-05-01T20:32:28.000Z\":2,\"2015-05-01T20:32:31.000Z\":2,\"2015-05-01T20:32:36.000Z\":2,\"2015-05-01T20:32:37.000Z\":2,\"2015-05-01T20:32:40.000Z\":1,\"2015-05-01T20:32:44.000Z\":2,\"2015-05-01T20:32:45.000Z\":2,\"2015-05-01T20:32:49.000Z\":2,\"2015-05-01T20:32:53.000Z\":1,\"2015-05-01T20:32:55.000Z\":2,\"2015-05-01T20:32:57.000Z\":2,\"2015-05-01T20:32:58.000Z\":2,\"2015-05-01T20:33:01.000Z\":1,\"2015-05-01T20:33:03.000Z\":2,\"2015-05-01T20:33:07.000Z\":2,\"2015-05-01T20:33:14.000Z\":2,\"2015-05-01T20:33:15.000Z\":1,\"2015-05-01T20:33:18.000Z\":2,\"2015-05-01T20:33:23.000Z\":2,\"2015-05-01T20:33:25.000Z\":1,\"2015-05-01T20:33:27.000Z\":2,\"2015-05-01T20:33:32.000Z\":2,\"2015-05-01T20:33:33.000Z\":2,\"2015-05-01T20:33:37.000Z\":2,\"2015-05-01T20:33:38.000Z\":2,\"2015-05-01T20:33:46.000Z\":2,\"2015-05-01T20:33:53.000Z\":2,\"2015-05-01T20:33:57.000Z\":1,\"2015-05-01T20:34:00.000Z\":1,\"2015-05-01T20:34:03.000Z\":2,\"2015-05-01T20:34:04.000Z\":2,\"2015-05-01T20:34:09.000Z\":2,\"2015-05-01T20:34:13.000Z\":1,\"2015-05-01T20:34:16.000Z\":2,\"2015-05-01T20:34:17.000Z\":2,\"2015-05-01T20:34:21.000Z\":2,\"2015-05-01T20:34:24.000Z\":2,\"2015-05-01T20:34:25.000Z\":2,\"2015-05-01T20:34:28.000Z\":1,\"2015-05-01T20:34:30.000Z\":2,\"2015-05-01T20:34:33.000Z\":2,\"2015-05-01T20:34:34.000Z\":2,\"2015-05-01T20:34:38.000Z\":2,\"2015-05-01T20:34:43.000Z\":2,\"2015-05-01T20:34:45.000Z\":2,\"2015-05-01T20:34:52.000Z\":2,\"2015-05-01T20:34:54.000Z\":2,\"2015-05-01T20:34:57.000Z\":2,\"2015-05-01T20:35:01.000Z\":2,\"2015-05-01T20:35:04.000Z\":2,\"2015-05-01T20:35:06.000Z\":2,\"2015-05-01T20:35:07.000Z\":2,\"2015-05-01T20:35:10.000Z\":2,\"2015-05-01T20:35:14.000Z\":1,\"2015-05-01T20:35:15.000Z\":2,\"2015-05-01T20:35:18.000Z\":2,\"2015-05-01T20:35:22.000Z\":2,\"2015-05-01T20:35:23.000Z\":1,\"2015-05-01T20:35:27.000Z\":1,\"2015-05-01T20:35:29.000Z\":1,\"2015-05-01T20:35:32.000Z\":2,\"2015-05-01T20:35:34.000Z\":2,\"2015-05-01T20:35:38.000Z\":2,\"2015-05-01T20:35:41.000Z\":1,\"2015-05-01T20:35:44.000Z\":2,\"2015-05-01T20:35:48.000Z\":1,\"2015-05-01T20:35:51.000Z\":2,\"2015-05-01T20:35:56.000Z\":2,\"2015-05-01T20:36:04.000Z\":2,\"2015-05-01T20:36:07.000Z\":2,\"2015-05-01T20:36:08.000Z\":2,\"2015-05-01T20:36:15.000Z\":2,\"2015-05-01T20:36:17.000Z\":2,\"2015-05-01T20:36:21.000Z\":1,\"2015-05-01T20:36:25.000Z\":2,\"2015-05-01T20:36:31.000Z\":2,\"2015-05-01T20:36:38.000Z\":2,\"2015-05-01T20:36:39.000Z\":2,\"2015-05-01T20:36:40.000Z\":2,\"2015-05-01T20:36:45.000Z\":2,\"2015-05-01T20:36:51.000Z\":2,\"2015-05-01T20:36:54.000Z\":2,\"2015-05-01T20:36:56.000Z\":1,\"2015-05-01T20:36:58.000Z\":2,\"2015-05-01T20:37:02.000Z\":2,\"2015-05-01T20:37:05.000Z\":2,\"2015-05-01T20:37:09.000Z\":1,\"2015-05-01T20:37:15.000Z\":2,\"2015-05-01T20:37:17.000Z\":1,\"2015-05-01T20:37:19.000Z\":2,\"2015-05-01T20:37:21.000Z\":2,\"2015-05-01T20:37:24.000Z\":2,\"2015-05-01T20:37:26.000Z\":2,\"2015-05-01T20:37:29.000Z\":2,\"2015-05-01T20:37:32.000Z\":2,\"2015-05-01T20:37:34.000Z\":2,\"2015-05-01T20:37:38.000Z\":2,\"2015-05-01T20:37:42.000Z\":1,\"2015-05-01T20:37:51.000Z\":2,\"2015-05-01T20:37:55.000Z\":2,\"2015-05-01T20:37:58.000Z\":2,\"2015-05-01T20:38:00.000Z\":1,\"2015-05-01T20:38:04.000Z\":2,\"2015-05-01T20:38:06.000Z\":2,\"2015-05-01T20:38:08.000Z\":2,\"2015-05-01T20:38:10.000Z\":2,\"2015-05-01T20:38:14.000Z\":2,\"2015-05-01T20:38:15.000Z\":2,\"2015-05-01T20:38:19.000Z\":1,\"2015-05-01T20:38:20.000Z\":2,\"2015-05-01T20:38:23.000Z\":2,\"2015-05-01T20:38:27.000Z\":2,\"2015-05-01T20:38:28.000Z\":2,\"2015-05-01T20:38:30.000Z\":2,\"2015-05-01T20:38:33.000Z\":1,\"2015-05-01T20:38:36.000Z\":2,\"2015-05-01T20:38:37.000Z\":2,\"2015-05-01T20:38:40.000Z\":2,\"2015-05-01T20:38:42.000Z\":2,\"2015-05-01T20:38:44.000Z\":2,\"2015-05-01T20:38:49.000Z\":2,\"2015-05-01T20:38:51.000Z\":2,\"2015-05-01T20:38:55.000Z\":2,\"2015-05-01T20:38:57.000Z\":2,\"2015-05-01T20:38:58.000Z\":1,\"2015-05-01T20:39:03.000Z\":1,\"2015-05-01T20:39:05.000Z\":2,\"2015-05-01T20:39:06.000Z\":2,\"2015-05-01T20:39:09.000Z\":2,\"2015-05-01T20:39:12.000Z\":2,\"2015-05-01T20:39:15.000Z\":2,\"2015-05-01T20:39:17.000Z\":2,\"2015-05-01T20:39:19.000Z\":2,\"2015-05-01T20:39:21.000Z\":2,\"2015-05-01T20:39:25.000Z\":2,\"2015-05-01T20:39:28.000Z\":2,\"2015-05-01T20:39:33.000Z\":2,\"2015-05-01T20:39:37.000Z\":2,\"2015-05-01T20:39:39.000Z\":1,\"2015-05-01T20:39:41.000Z\":2,\"2015-05-01T20:39:44.000Z\":2,\"2015-05-01T20:39:46.000Z\":1,\"2015-05-01T20:39:49.000Z\":1,\"2015-05-01T20:39:52.000Z\":2,\"2015-05-01T20:39:55.000Z\":1,\"2015-05-01T20:39:58.000Z\":1,\"2015-05-01T20:40:00.000Z\":2,\"2015-05-01T20:40:03.000Z\":2,\"2015-05-01T20:40:08.000Z\":2,\"2015-05-01T20:40:13.000Z\":2,\"2015-05-01T20:40:18.000Z\":1,\"2015-05-01T20:40:20.000Z\":2,\"2015-05-01T20:40:25.000Z\":2,\"2015-05-01T20:40:27.000Z\":2,\"2015-05-01T20:40:30.000Z\":2,\"2015-05-01T20:40:33.000Z\":2,\"2015-05-01T20:40:36.000Z\":2,\"2015-05-01T20:40:41.000Z\":2,\"2015-05-01T20:40:47.000Z\":2,\"2015-05-01T20:40:50.000Z\":2,\"2015-05-01T20:40:53.000Z\":1,\"2015-05-01T20:40:58.000Z\":2,\"2015-05-01T20:41:02.000Z\":2,\"2015-05-01T20:41:06.000Z\":2,\"2015-05-01T20:41:12.000Z\":2,\"2015-05-01T20:41:16.000Z\":2,\"2015-05-01T20:41:18.000Z\":2,\"2015-05-01T20:41:24.000Z\":2,\"2015-05-01T20:41:25.000Z\":1,\"2015-05-01T20:41:28.000Z\":2,\"2015-05-01T20:41:30.000Z\":2,\"2015-05-01T20:41:31.000Z\":2,\"2015-05-01T20:41:35.000Z\":2,\"2015-05-01T20:41:36.000Z\":2,\"2015-05-01T20:41:39.000Z\":1,\"2015-05-01T20:41:44.000Z\":2,\"2015-05-01T20:41:47.000Z\":2,\"2015-05-01T20:41:49.000Z\":2,\"2015-05-01T20:41:51.000Z\":2,\"2015-05-01T20:41:59.000Z\":2,\"2015-05-01T20:42:03.000Z\":1,\"2015-05-01T20:42:08.000Z\":1,\"2015-05-01T20:42:11.000Z\":2,\"2015-05-01T20:42:14.000Z\":1,\"2015-05-01T20:42:15.000Z\":2,\"2015-05-01T20:42:16.000Z\":1,\"2015-05-01T20:42:19.000Z\":2,\"2015-05-01T20:42:22.000Z\":2,\"2015-05-01T20:42:27.000Z\":2,\"2015-05-01T20:42:28.000Z\":1,\"2015-05-01T20:42:30.000Z\":2,\"2015-05-01T20:42:34.000Z\":2,\"2015-05-01T20:42:37.000Z\":2,\"2015-05-01T20:42:42.000Z\":2,\"2015-05-01T20:42:43.000Z\":2,\"2015-05-01T20:42:44.000Z\":1,\"2015-05-01T20:42:45.000Z\":1,\"2015-05-01T20:42:47.000Z\":2,\"2015-05-01T20:42:50.000Z\":2,\"2015-05-01T20:42:52.000Z\":1,\"2015-05-01T20:42:55.000Z\":2,\"2015-05-01T20:43:00.000Z\":2,\"2015-05-01T20:43:05.000Z\":2,\"2015-05-01T20:43:06.000Z\":2,\"2015-05-01T20:43:09.000Z\":2,\"2015-05-01T20:43:10.000Z\":2,\"2015-05-01T20:43:13.000Z\":2,\"2015-05-01T20:43:14.000Z\":2,\"2015-05-01T20:43:22.000Z\":2,\"2015-05-01T20:43:24.000Z\":2,\"2015-05-01T20:43:27.000Z\":2,\"2015-05-01T20:43:30.000Z\":2,\"2015-05-01T20:43:31.000Z\":2,\"2015-05-01T20:43:35.000Z\":2,\"2015-05-01T20:43:38.000Z\":2,\"2015-05-01T20:43:40.000Z\":2,\"2015-05-01T20:43:43.000Z\":2,\"2015-05-01T20:43:45.000Z\":2,\"2015-05-01T20:43:49.000Z\":2,\"2015-05-01T20:43:54.000Z\":2,\"2015-05-01T20:44:00.000Z\":2,\"2015-05-01T20:44:02.000Z\":2,\"2015-05-01T20:44:05.000Z\":2,\"2015-05-01T20:44:06.000Z\":1,\"2015-05-01T20:44:14.000Z\":2,\"2015-05-01T20:44:16.000Z\":2,\"2015-05-01T20:44:18.000Z\":2,\"2015-05-01T20:44:21.000Z\":2,\"2015-05-01T20:44:25.000Z\":3,\"2015-05-01T20:44:27.000Z\":2,\"2015-05-01T20:44:30.000Z\":2,\"2015-05-01T20:44:36.000Z\":2,\"2015-05-01T20:44:41.000Z\":2,\"2015-05-01T20:44:42.000Z\":1,\"2015-05-01T20:44:48.000Z\":2,\"2015-05-01T20:44:54.000Z\":2,\"2015-05-01T20:44:59.000Z\":2,\"2015-05-01T20:45:01.000Z\":2,\"2015-05-01T20:45:04.000Z\":2,\"2015-05-01T20:45:08.000Z\":1,\"2015-05-01T20:45:10.000Z\":1,\"2015-05-01T20:45:11.000Z\":2,\"2015-05-01T20:45:16.000Z\":2,\"2015-05-01T20:45:19.000Z\":2,\"2015-05-01T20:45:21.000Z\":2,\"2015-05-01T20:45:26.000Z\":2,\"2015-05-01T20:45:29.000Z\":2,\"2015-05-01T20:45:33.000Z\":2,\"2015-05-01T20:45:35.000Z\":2,\"2015-05-01T20:45:36.000Z\":1,\"2015-05-01T20:45:40.000Z\":1,\"2015-05-01T20:45:43.000Z\":2,\"2015-05-01T20:45:46.000Z\":1,\"2015-05-01T20:45:49.000Z\":2,\"2015-05-01T20:45:53.000Z\":1,\"2015-05-01T20:45:55.000Z\":2,\"2015-05-01T20:46:02.000Z\":2,\"2015-05-01T20:46:04.000Z\":2,\"2015-05-01T20:46:07.000Z\":1,\"2015-05-01T20:46:09.000Z\":2,\"2015-05-01T20:46:14.000Z\":2,\"2015-05-01T20:46:16.000Z\":2,\"2015-05-01T20:46:19.000Z\":2,\"2015-05-01T20:46:23.000Z\":2,\"2015-05-01T20:46:26.000Z\":1,\"2015-05-01T20:46:28.000Z\":2,\"2015-05-01T20:46:30.000Z\":1,\"2015-05-01T20:46:32.000Z\":2,\"2015-05-01T20:46:34.000Z\":1,\"2015-05-01T20:46:36.000Z\":2,\"2015-05-01T20:46:38.000Z\":2,\"2015-05-01T20:46:43.000Z\":2,\"2015-05-01T20:46:47.000Z\":1,\"2015-05-01T20:46:51.000Z\":2,\"2015-05-01T20:46:53.000Z\":2,\"2015-05-01T20:46:57.000Z\":2,\"2015-05-01T20:46:59.000Z\":2,\"2015-05-01T20:47:01.000Z\":2,\"2015-05-01T20:47:03.000Z\":1,\"2015-05-01T20:47:08.000Z\":1,\"2015-05-01T20:47:10.000Z\":2,\"2015-05-01T20:47:11.000Z\":2,\"2015-05-01T20:47:15.000Z\":1,\"2015-05-01T20:47:18.000Z\":2,\"2015-05-01T20:47:19.000Z\":1,\"2015-05-01T20:47:23.000Z\":2,\"2015-05-01T20:47:28.000Z\":2,\"2015-05-01T20:47:31.000Z\":2,\"2015-05-01T20:47:33.000Z\":2,\"2015-05-01T20:47:35.000Z\":2,\"2015-05-01T20:47:36.000Z\":2,\"2015-05-01T20:47:39.000Z\":2,\"2015-05-01T20:47:41.000Z\":2,\"2015-05-01T20:47:46.000Z\":2,\"2015-05-01T20:47:48.000Z\":2,\"2015-05-01T20:47:50.000Z\":2,\"2015-05-01T20:47:52.000Z\":2,\"2015-05-01T20:47:55.000Z\":2,\"2015-05-01T20:47:59.000Z\":1,\"2015-05-01T20:48:04.000Z\":2,\"2015-05-01T20:48:09.000Z\":2,\"2015-05-01T20:48:14.000Z\":3,\"2015-05-01T20:48:16.000Z\":2,\"2015-05-01T20:48:19.000Z\":2,\"2015-05-01T20:48:22.000Z\":2,\"2015-05-01T20:48:25.000Z\":2,\"2015-05-01T20:48:29.000Z\":2,\"2015-05-01T20:48:33.000Z\":1,\"2015-05-01T20:48:35.000Z\":2,\"2015-05-01T20:48:36.000Z\":2,\"2015-05-01T20:48:42.000Z\":2,\"2015-05-01T20:48:44.000Z\":2,\"2015-05-01T20:48:45.000Z\":1,\"2015-05-01T20:48:48.000Z\":2,\"2015-05-01T20:48:51.000Z\":2,\"2015-05-01T20:48:55.000Z\":2,\"2015-05-01T20:48:59.000Z\":2,\"2015-05-01T20:49:02.000Z\":2,\"2015-05-01T20:49:06.000Z\":2,\"2015-05-01T20:49:11.000Z\":1,\"2015-05-01T20:49:13.000Z\":2,\"2015-05-01T20:49:18.000Z\":1,\"2015-05-01T20:49:23.000Z\":2,\"2015-05-01T20:49:25.000Z\":2,\"2015-05-01T20:49:29.000Z\":2,\"2015-05-01T20:49:32.000Z\":2,\"2015-05-01T20:49:35.000Z\":2,\"2015-05-01T20:49:38.000Z\":2,\"2015-05-01T20:49:41.000Z\":1,\"2015-05-01T20:49:45.000Z\":1,\"2015-05-01T20:49:47.000Z\":2,\"2015-05-01T20:49:50.000Z\":1,\"2015-05-01T20:49:54.000Z\":2,\"2015-05-01T20:49:58.000Z\":2,\"2015-05-01T20:50:00.000Z\":2,\"2015-05-01T20:50:02.000Z\":1,\"2015-05-01T20:50:05.000Z\":1,\"2015-05-01T20:50:09.000Z\":1,\"2015-05-01T20:50:14.000Z\":1,\"2015-05-01T20:50:17.000Z\":2,\"2015-05-01T20:50:20.000Z\":2,\"2015-05-01T20:50:22.000Z\":2,\"2015-05-01T20:50:26.000Z\":2,\"2015-05-01T20:50:27.000Z\":2,\"2015-05-01T20:50:29.000Z\":2,\"2015-05-01T20:50:31.000Z\":1,\"2015-05-01T20:50:37.000Z\":2,\"2015-05-01T20:50:39.000Z\":2,\"2015-05-01T20:50:42.000Z\":2,\"2015-05-01T20:50:45.000Z\":2,\"2015-05-01T20:50:46.000Z\":2,\"2015-05-01T20:50:49.000Z\":2,\"2015-05-01T20:50:51.000Z\":2,\"2015-05-01T20:50:56.000Z\":2,\"2015-05-01T20:51:00.000Z\":2,\"2015-05-01T20:51:03.000Z\":1,\"2015-05-01T20:51:05.000Z\":2,\"2015-05-01T20:51:09.000Z\":2,\"2015-05-01T20:51:15.000Z\":2,\"2015-05-01T20:51:17.000Z\":1,\"2015-05-01T20:51:19.000Z\":2,\"2015-05-01T20:51:22.000Z\":2,\"2015-05-01T20:51:24.000Z\":2,\"2015-05-01T20:51:27.000Z\":1,\"2015-05-01T20:51:32.000Z\":2,\"2015-05-01T20:51:36.000Z\":2,\"2015-05-01T20:51:41.000Z\":2,\"2015-05-01T20:51:43.000Z\":1,\"2015-05-01T20:51:45.000Z\":2,\"2015-05-01T20:51:49.000Z\":1,\"2015-05-01T20:51:50.000Z\":1,\"2015-05-01T20:51:52.000Z\":2,\"2015-05-01T20:51:54.000Z\":2,\"2015-05-01T20:51:56.000Z\":2,\"2015-05-01T20:52:00.000Z\":2,\"2015-05-01T20:52:02.000Z\":2,\"2015-05-01T20:52:06.000Z\":2,\"2015-05-01T20:52:09.000Z\":2,\"2015-05-01T20:52:12.000Z\":2,\"2015-05-01T20:52:14.000Z\":2,\"2015-05-01T20:52:17.000Z\":2,\"2015-05-01T20:52:24.000Z\":1,\"2015-05-01T20:52:26.000Z\":1,\"2015-05-01T20:52:29.000Z\":1,\"2015-05-01T20:52:32.000Z\":2,\"2015-05-01T20:52:34.000Z\":1,\"2015-05-01T20:52:37.000Z\":1,\"2015-05-01T20:52:44.000Z\":1,\"2015-05-01T20:52:45.000Z\":2,\"2015-05-01T20:52:49.000Z\":2,\"2015-05-01T20:52:54.000Z\":2,\"2015-05-01T20:52:55.000Z\":1,\"2015-05-01T20:52:58.000Z\":1,\"2015-05-01T20:53:02.000Z\":1,\"2015-05-01T20:53:05.000Z\":2,\"2015-05-01T20:53:10.000Z\":2,\"2015-05-01T20:53:15.000Z\":2,\"2015-05-01T20:53:19.000Z\":2,\"2015-05-01T20:53:24.000Z\":2,\"2015-05-01T20:53:27.000Z\":2,\"2015-05-01T20:53:32.000Z\":2,\"2015-05-01T20:53:34.000Z\":2,\"2015-05-01T20:53:37.000Z\":1,\"2015-05-01T20:53:43.000Z\":1,\"2015-05-01T20:53:45.000Z\":2,\"2015-05-01T20:53:49.000Z\":3,\"2015-05-01T20:53:50.000Z\":2,\"2015-05-01T20:53:54.000Z\":2,\"2015-05-01T20:53:57.000Z\":2,\"2015-05-01T20:53:59.000Z\":1,\"2015-05-01T20:54:01.000Z\":2,\"2015-05-01T20:54:04.000Z\":2,\"2015-05-01T20:54:07.000Z\":1,\"2015-05-01T20:54:13.000Z\":2,\"2015-05-01T20:54:14.000Z\":2,\"2015-05-01T20:54:17.000Z\":1,\"2015-05-01T20:54:19.000Z\":2,\"2015-05-01T20:54:23.000Z\":1,\"2015-05-01T20:54:28.000Z\":2,\"2015-05-01T20:54:32.000Z\":2,\"2015-05-01T20:54:36.000Z\":2,\"2015-05-01T20:54:40.000Z\":2,\"2015-05-01T20:54:44.000Z\":1,\"2015-05-01T20:54:45.000Z\":2,\"2015-05-01T20:54:48.000Z\":2,\"2015-05-01T20:54:55.000Z\":1,\"2015-05-01T20:54:57.000Z\":2,\"2015-05-01T20:55:00.000Z\":2,\"2015-05-01T20:55:02.000Z\":2,\"2015-05-01T20:55:06.000Z\":1,\"2015-05-01T20:55:07.000Z\":2,\"2015-05-01T20:55:08.000Z\":2,\"2015-05-01T20:55:13.000Z\":2,\"2015-05-01T20:55:17.000Z\":2,\"2015-05-01T20:55:19.000Z\":2,\"2015-05-01T20:55:22.000Z\":1,\"2015-05-01T20:55:23.000Z\":2,\"2015-05-01T20:55:25.000Z\":2,\"2015-05-01T20:55:27.000Z\":1,\"2015-05-01T20:55:32.000Z\":2,\"2015-05-01T20:55:36.000Z\":1,\"2015-05-01T20:55:40.000Z\":2,\"2015-05-01T20:55:41.000Z\":2,\"2015-05-01T20:55:43.000Z\":2,\"2015-05-01T20:55:44.000Z\":2,\"2015-05-01T20:55:48.000Z\":2,\"2015-05-01T20:55:50.000Z\":1,\"2015-05-01T20:55:51.000Z\":1,\"2015-05-01T20:55:57.000Z\":2,\"2015-05-01T20:56:04.000Z\":2,\"2015-05-01T20:56:07.000Z\":2,\"2015-05-01T20:56:12.000Z\":2,\"2015-05-01T20:56:15.000Z\":2,\"2015-05-01T20:56:18.000Z\":2,\"2015-05-01T20:56:23.000Z\":2,\"2015-05-01T20:56:25.000Z\":2,\"2015-05-01T20:56:28.000Z\":1,\"2015-05-01T20:56:34.000Z\":2,\"2015-05-01T20:56:39.000Z\":2,\"2015-05-01T20:56:41.000Z\":1,\"2015-05-01T20:56:46.000Z\":2,\"2015-05-01T20:56:50.000Z\":2,\"2015-05-01T20:56:52.000Z\":2,\"2015-05-01T20:56:56.000Z\":2,\"2015-05-01T20:56:58.000Z\":2,\"2015-05-01T20:56:59.000Z\":2,\"2015-05-01T20:57:01.000Z\":2,\"2015-05-01T20:57:03.000Z\":2,\"2015-05-01T20:57:08.000Z\":1,\"2015-05-01T20:57:11.000Z\":2,\"2015-05-01T20:57:15.000Z\":2,\"2015-05-01T20:57:18.000Z\":1,\"2015-05-01T20:57:21.000Z\":2,\"2015-05-01T20:57:27.000Z\":2,\"2015-05-01T20:57:30.000Z\":2,\"2015-05-01T20:57:32.000Z\":1,\"2015-05-01T20:57:36.000Z\":2,\"2015-05-01T20:57:39.000Z\":1,\"2015-05-01T20:57:41.000Z\":2,\"2015-05-01T20:57:44.000Z\":1,\"2015-05-01T20:57:47.000Z\":2,\"2015-05-01T20:57:52.000Z\":2,\"2015-05-01T20:57:54.000Z\":2,\"2015-05-01T20:58:01.000Z\":2,\"2015-05-01T20:58:03.000Z\":1,\"2015-05-01T20:58:05.000Z\":2,\"2015-05-01T20:58:09.000Z\":2,\"2015-05-01T20:58:10.000Z\":2,\"2015-05-01T20:58:12.000Z\":2,\"2015-05-01T20:58:16.000Z\":2,\"2015-05-01T20:58:19.000Z\":2,\"2015-05-01T20:58:21.000Z\":2,\"2015-05-01T20:58:25.000Z\":2,\"2015-05-01T20:58:28.000Z\":2,\"2015-05-01T20:58:30.000Z\":2,\"2015-05-01T20:58:32.000Z\":2,\"2015-05-01T20:58:33.000Z\":2,\"2015-05-01T20:58:39.000Z\":2,\"2015-05-01T20:58:46.000Z\":2,\"2015-05-01T20:58:48.000Z\":2,\"2015-05-01T20:58:53.000Z\":2,\"2015-05-01T20:58:58.000Z\":2,\"2015-05-01T20:59:00.000Z\":2,\"2015-05-01T20:59:05.000Z\":2,\"2015-05-01T20:59:07.000Z\":2,\"2015-05-01T20:59:11.000Z\":2,\"2015-05-01T20:59:15.000Z\":2,\"2015-05-01T20:59:18.000Z\":2,\"2015-05-01T20:59:21.000Z\":2,\"2015-05-01T20:59:24.000Z\":2,\"2015-05-01T20:59:29.000Z\":2,\"2015-05-01T20:59:31.000Z\":2,\"2015-05-01T20:59:32.000Z\":2,\"2015-05-01T20:59:35.000Z\":2,\"2015-05-01T20:59:36.000Z\":2,\"2015-05-01T20:59:37.000Z\":2,\"2015-05-01T20:59:39.000Z\":2,\"2015-05-01T20:59:42.000Z\":2,\"2015-05-01T20:59:45.000Z\":2,\"2015-05-01T20:59:47.000Z\":1,\"2015-05-01T20:59:50.000Z\":1,\"2015-05-01T20:59:51.000Z\":2,\"2015-05-01T20:59:52.000Z\":2,\"2015-05-01T20:59:54.000Z\":2,\"2015-05-01T20:59:59.000Z\":2}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"display(greendf)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"import org.apache.spark.sql"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"source": [
							"yellowdf.write.mode('overwrite').parquet(\"/nyctaxiyellow\")"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"source": [
							"greendf.write.mode('overwrite').parquet(\"/nyctaxigreen\")"
						],
						"outputs": [],
						"execution_count": 21
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"val hol_blob_account_name = \"azureopendatastorage\"\r\n",
							"val hol_blob_container_name = \"holidaydatacontainer\"\r\n",
							"val hol_blob_relative_path = \"Processed\"\r\n",
							"val hol_blob_sas_token = \"\"\r\n",
							"\r\n",
							"val hol_wasbs_path = f\"wasbs://$hol_blob_container_name@$hol_blob_account_name.blob.core.windows.net/$hol_blob_relative_path\"\r\n",
							"spark.conf.set(f\"fs.azure.sas.$hol_blob_container_name.$hol_blob_account_name.blob.core.windows.net\",hol_blob_sas_token)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val hol_df = spark.read.parquet(hol_wasbs_path) \r\n",
							"hol_df.show(5, truncate = false)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(hol_df)"
						],
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tftest')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 3,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "3",
						"spark.dynamicAllocation.maxExecutors": "3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import tensorflow as tf; \r\n",
							"print(tf.__version__)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"mnist = tf.keras.datasets.mnist\r\n",
							"\r\n",
							"(x_train, y_train), (x_test, y_test) = mnist.load_data()\r\n",
							"x_train, x_test = x_train / 255.0, x_test / 255.0"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"model = tf.keras.models.Sequential([\r\n",
							"  tf.keras.layers.Flatten(input_shape=(28, 28)),\r\n",
							"  tf.keras.layers.Dense(128, activation='relu'),\r\n",
							"  tf.keras.layers.Dropout(0.2),\r\n",
							"  tf.keras.layers.Dense(10)\r\n",
							"])"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"predictions = model(x_train[:1]).numpy()\r\n",
							"predictions"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"tf.nn.softmax(predictions).numpy()"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"loss_fn(y_train[:1], predictions).numpy()"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"model.compile(optimizer='adam',\r\n",
							"              loss=loss_fn,\r\n",
							"              metrics=['accuracy'])"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"model.fit(x_train, y_train, epochs=5)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"model.evaluate(x_test,  y_test, verbose=2)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"probability_model = tf.keras.Sequential([\r\n",
							"  model,\r\n",
							"  tf.keras.layers.Softmax()\r\n",
							"])"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"probability_model(x_test[:5])"
						],
						"outputs": [],
						"execution_count": 12
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tftest1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "accsparkpools",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 3,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "3",
						"spark.dynamicAllocation.maxExecutors": "3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
						"name": "accsparkpools",
						"type": "Spark",
						"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Import TensorFlow and TensorFlow Datasets\r\n",
							"\r\n",
							"#import tensorflow_datasets as tfds\r\n",
							"import tensorflow as tf\r\n",
							"\r\n",
							"import os"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"print(tf.__version__)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import os\r\n",
							"import sys\r\n",
							"\r\n",
							"import numpy as np\r\n",
							"import pandas as pd\r\n",
							"import matplotlib.pyplot as plt\r\n",
							"from IPython.display import clear_output\r\n",
							"from six.moves import urllib"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import tensorflow.compat.v2.feature_column as fc\r\n",
							"\r\n",
							"import tensorflow as tf"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Load dataset.\r\n",
							"dftrain = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/train.csv')\r\n",
							"dfeval = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/eval.csv')\r\n",
							"y_train = dftrain.pop('survived')\r\n",
							"y_eval = dfeval.pop('survived')"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"dftrain.head()"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"dftrain.describe()"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"dftrain.shape[0], dfeval.shape[0]"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"dftrain.age.hist(bins=20)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"dftrain.sex.value_counts().plot(kind='barh')"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"dftrain['class'].value_counts().plot(kind='barh')"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"pd.concat([dftrain, y_train], axis=1).groupby('sex').survived.mean().plot(kind='barh').set_xlabel('% survive')"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"CATEGORICAL_COLUMNS = ['sex', 'n_siblings_spouses', 'parch', 'class', 'deck',\r\n",
							"                       'embark_town', 'alone']\r\n",
							"NUMERIC_COLUMNS = ['age', 'fare']\r\n",
							"\r\n",
							"feature_columns = []\r\n",
							"for feature_name in CATEGORICAL_COLUMNS:\r\n",
							"  vocabulary = dftrain[feature_name].unique()\r\n",
							"  feature_columns.append(tf.feature_column.categorical_column_with_vocabulary_list(feature_name, vocabulary))\r\n",
							"\r\n",
							"for feature_name in NUMERIC_COLUMNS:\r\n",
							"  feature_columns.append(tf.feature_column.numeric_column(feature_name, dtype=tf.float32))"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"def make_input_fn(data_df, label_df, num_epochs=10, shuffle=True, batch_size=32):\r\n",
							"  def input_function():\r\n",
							"    ds = tf.data.Dataset.from_tensor_slices((dict(data_df), label_df))\r\n",
							"    if shuffle:\r\n",
							"      ds = ds.shuffle(1000)\r\n",
							"    ds = ds.batch(batch_size).repeat(num_epochs)\r\n",
							"    return ds\r\n",
							"  return input_function\r\n",
							"\r\n",
							"train_input_fn = make_input_fn(dftrain, y_train)\r\n",
							"eval_input_fn = make_input_fn(dfeval, y_eval, num_epochs=1, shuffle=False)"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"ds = make_input_fn(dftrain, y_train, batch_size=10)()\r\n",
							"for feature_batch, label_batch in ds.take(1):\r\n",
							"  print('Some feature keys:', list(feature_batch.keys()))\r\n",
							"  print()\r\n",
							"  print('A batch of class:', feature_batch['class'].numpy())\r\n",
							"  print()\r\n",
							"  print('A batch of Labels:', label_batch.numpy())"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"age_column = feature_columns[7]\r\n",
							"tf.keras.layers.DenseFeatures([age_column])(feature_batch).numpy()"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"gender_column = feature_columns[0]\r\n",
							"tf.keras.layers.DenseFeatures([tf.feature_column.indicator_column(gender_column)])(feature_batch).numpy()"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"linear_est = tf.estimator.LinearClassifier(feature_columns=feature_columns)\r\n",
							"linear_est.train(train_input_fn)\r\n",
							"result = linear_est.evaluate(eval_input_fn)\r\n",
							"\r\n",
							"clear_output()\r\n",
							"print(result)"
						],
						"outputs": [],
						"execution_count": 21
					}
				]
			},
			"dependsOn": []
		}
	]
}